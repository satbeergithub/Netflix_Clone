{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar util_1 = require(\"@firebase/util\");\nvar Change_1 = require(\"./Change\");\nvar util_2 = require(\"@firebase/util\");\n/**\n * @constructor\n */\nvar ChildChangeAccumulator = /** @class */function () {\n  function ChildChangeAccumulator() {\n    this.changeMap_ = {};\n  }\n  /**\n   * @param {!Change} change\n   */\n  ChildChangeAccumulator.prototype.trackChildChange = function (change) {\n    var type = change.type;\n    var childKey /** @type {!string} */ = change.childName;\n    util_2.assert(type == Change_1.Change.CHILD_ADDED || type == Change_1.Change.CHILD_CHANGED || type == Change_1.Change.CHILD_REMOVED, 'Only child changes supported for tracking');\n    util_2.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n    var oldChange = util_1.safeGet(this.changeMap_, childKey);\n    if (oldChange) {\n      var oldType = oldChange.type;\n      if (type == Change_1.Change.CHILD_ADDED && oldType == Change_1.Change.CHILD_REMOVED) {\n        this.changeMap_[childKey] = Change_1.Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode);\n      } else if (type == Change_1.Change.CHILD_REMOVED && oldType == Change_1.Change.CHILD_ADDED) {\n        delete this.changeMap_[childKey];\n      } else if (type == Change_1.Change.CHILD_REMOVED && oldType == Change_1.Change.CHILD_CHANGED) {\n        this.changeMap_[childKey] = Change_1.Change.childRemovedChange(childKey, oldChange.oldSnap);\n      } else if (type == Change_1.Change.CHILD_CHANGED && oldType == Change_1.Change.CHILD_ADDED) {\n        this.changeMap_[childKey] = Change_1.Change.childAddedChange(childKey, change.snapshotNode);\n      } else if (type == Change_1.Change.CHILD_CHANGED && oldType == Change_1.Change.CHILD_CHANGED) {\n        this.changeMap_[childKey] = Change_1.Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap);\n      } else {\n        throw util_2.assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);\n      }\n    } else {\n      this.changeMap_[childKey] = change;\n    }\n  };\n  /**\n   * @return {!Array.<!Change>}\n   */\n  ChildChangeAccumulator.prototype.getChanges = function () {\n    return util_1.getValues(this.changeMap_);\n  };\n  return ChildChangeAccumulator;\n}();\nexports.ChildChangeAccumulator = ChildChangeAccumulator;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AAEA;;;AAGA;EAAA;IACU,eAAU,GAA4B,EAAE;EA4ElD;EA1EE;;;EAGAA,iDAAgB,GAAhB,UAAiBC,MAAc;IAC7B,IAAMC,IAAI,GAAGD,MAAM,CAACC,IAAI;IACxB,IAAMC,QAAQ,CAAC,yBAAyBF,MAAM,CAACG,SAAS;IACxDC,aAAM,CACJH,IAAI,IAAII,eAAM,CAACC,WAAW,IACxBL,IAAI,IAAII,eAAM,CAACE,aAAa,IAC5BN,IAAI,IAAII,eAAM,CAACG,aAAa,EAC9B,2CAA2C,CAC5C;IACDJ,aAAM,CACJF,QAAQ,KAAK,WAAW,EACxB,iDAAiD,CAClD;IACD,IAAMO,SAAS,GAAGC,cAAO,CAAC,IAAI,CAACC,UAAU,EAAET,QAAQ,CAAW;IAC9D,IAAIO,SAAS,EAAE;MACb,IAAMG,OAAO,GAAGH,SAAS,CAACR,IAAI;MAC9B,IAAIA,IAAI,IAAII,eAAM,CAACC,WAAW,IAAIM,OAAO,IAAIP,eAAM,CAACG,aAAa,EAAE;QACjE,IAAI,CAACG,UAAU,CAACT,QAAQ,CAAC,GAAGG,eAAM,CAACQ,kBAAkB,CACnDX,QAAQ,EACRF,MAAM,CAACc,YAAY,EACnBL,SAAS,CAACK,YAAY,CACvB;MACH,CAAC,MAAM,IACLb,IAAI,IAAII,eAAM,CAACG,aAAa,IAC5BI,OAAO,IAAIP,eAAM,CAACC,WACpB,EAAE;QACA,OAAO,IAAI,CAACK,UAAU,CAACT,QAAQ,CAAC;MAClC,CAAC,MAAM,IACLD,IAAI,IAAII,eAAM,CAACG,aAAa,IAC5BI,OAAO,IAAIP,eAAM,CAACE,aACpB,EAAE;QACA,IAAI,CAACI,UAAU,CAACT,QAAQ,CAAC,GAAGG,eAAM,CAACU,kBAAkB,CACnDb,QAAQ,EACRO,SAAS,CAACO,OAAO,CAClB;MACH,CAAC,MAAM,IACLf,IAAI,IAAII,eAAM,CAACE,aAAa,IAC5BK,OAAO,IAAIP,eAAM,CAACC,WACpB,EAAE;QACA,IAAI,CAACK,UAAU,CAACT,QAAQ,CAAC,GAAGG,eAAM,CAACY,gBAAgB,CACjDf,QAAQ,EACRF,MAAM,CAACc,YAAY,CACpB;MACH,CAAC,MAAM,IACLb,IAAI,IAAII,eAAM,CAACE,aAAa,IAC5BK,OAAO,IAAIP,eAAM,CAACE,aACpB,EAAE;QACA,IAAI,CAACI,UAAU,CAACT,QAAQ,CAAC,GAAGG,eAAM,CAACQ,kBAAkB,CACnDX,QAAQ,EACRF,MAAM,CAACc,YAAY,EACnBL,SAAS,CAACO,OAAO,CAClB;MACH,CAAC,MAAM;QACL,MAAMZ,qBAAc,CAClB,kCAAkC,GAChCJ,MAAM,GACN,kBAAkB,GAClBS,SAAS,CACZ;MACH;IACF,CAAC,MAAM;MACL,IAAI,CAACE,UAAU,CAACT,QAAQ,CAAC,GAAGF,MAAM;IACpC;EACF,CAAC;EAED;;;EAGAD,2CAAU,GAAV;IACE,OAAOW,gBAAS,CAAC,IAAI,CAACC,UAAU,CAAC;EACnC,CAAC;EACH,6BAAC;AAAD,CA7EA,EA6EC;AA7EYO","names":["ChildChangeAccumulator","change","type","childKey","childName","util_2","Change_1","CHILD_ADDED","CHILD_CHANGED","CHILD_REMOVED","oldChange","util_1","changeMap_","oldType","childChangedChange","snapshotNode","childRemovedChange","oldSnap","childAddedChange","exports"],"sources":["../src/core/view/ChildChangeAccumulator.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getValues, safeGet } from '@firebase/util';\nimport { Change } from './Change';\nimport { assert, assertionError } from '@firebase/util';\n\n/**\n * @constructor\n */\nexport class ChildChangeAccumulator {\n  private changeMap_: { [k: string]: Change } = {};\n\n  /**\n   * @param {!Change} change\n   */\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey /** @type {!string} */ = change.childName;\n    assert(\n      type == Change.CHILD_ADDED ||\n        type == Change.CHILD_CHANGED ||\n        type == Change.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = safeGet(this.changeMap_, childKey) as Change;\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {\n        this.changeMap_[childKey] = Change.childChangedChange(\n          childKey,\n          change.snapshotNode,\n          oldChange.snapshotNode\n        );\n      } else if (\n        type == Change.CHILD_REMOVED &&\n        oldType == Change.CHILD_ADDED\n      ) {\n        delete this.changeMap_[childKey];\n      } else if (\n        type == Change.CHILD_REMOVED &&\n        oldType == Change.CHILD_CHANGED\n      ) {\n        this.changeMap_[childKey] = Change.childRemovedChange(\n          childKey,\n          oldChange.oldSnap\n        );\n      } else if (\n        type == Change.CHILD_CHANGED &&\n        oldType == Change.CHILD_ADDED\n      ) {\n        this.changeMap_[childKey] = Change.childAddedChange(\n          childKey,\n          change.snapshotNode\n        );\n      } else if (\n        type == Change.CHILD_CHANGED &&\n        oldType == Change.CHILD_CHANGED\n      ) {\n        this.changeMap_[childKey] = Change.childChangedChange(\n          childKey,\n          change.snapshotNode,\n          oldChange.oldSnap\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap_[childKey] = change;\n    }\n  }\n\n  /**\n   * @return {!Array.<!Change>}\n   */\n  getChanges(): Change[] {\n    return getValues(this.changeMap_);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}