{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as errorsExports from './error';\nimport * as object from './object';\nimport * as promiseimpl from './promise_external';\nimport * as type from './type';\nimport * as XhrIoExports from './xhrio';\n/**\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\n * doesn't work in React Native on Android.\n */\nvar NetworkXhrIo = /** @class */function () {\n  function NetworkXhrIo() {\n    var _this = this;\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = XhrIoExports.ErrorCode.NO_ERROR;\n    this.sendPromise_ = promiseimpl.make(function (resolve, reject) {\n      _this.xhr_.addEventListener('abort', function (event) {\n        _this.errorCode_ = XhrIoExports.ErrorCode.ABORT;\n        resolve(_this);\n      });\n      _this.xhr_.addEventListener('error', function (event) {\n        _this.errorCode_ = XhrIoExports.ErrorCode.NETWORK_ERROR;\n        resolve(_this);\n      });\n      _this.xhr_.addEventListener('load', function (event) {\n        resolve(_this);\n      });\n    });\n  }\n  /**\n   * @override\n   */\n  NetworkXhrIo.prototype.send = function (url, method, opt_body, opt_headers) {\n    var _this = this;\n    if (this.sent_) {\n      throw errorsExports.internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (type.isDef(opt_headers)) {\n      var headers = opt_headers;\n      object.forEach(headers, function (key, val) {\n        _this.xhr_.setRequestHeader(key, val.toString());\n      });\n    }\n    if (type.isDef(opt_body)) {\n      this.xhr_.send(opt_body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  };\n  /**\n   * @override\n   */\n  NetworkXhrIo.prototype.getErrorCode = function () {\n    if (!this.sent_) {\n      throw errorsExports.internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  };\n  /**\n   * @override\n   */\n  NetworkXhrIo.prototype.getStatus = function () {\n    if (!this.sent_) {\n      throw errorsExports.internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  };\n  /**\n   * @override\n   */\n  NetworkXhrIo.prototype.getResponseText = function () {\n    if (!this.sent_) {\n      throw errorsExports.internalError('cannot .getResponseText() before sending');\n    }\n    return this.xhr_.responseText;\n  };\n  /**\n   * Aborts the request.\n   * @override\n   */\n  NetworkXhrIo.prototype.abort = function () {\n    this.xhr_.abort();\n  };\n  /**\n   * @override\n   */\n  NetworkXhrIo.prototype.getResponseHeader = function (header) {\n    return this.xhr_.getResponseHeader(header);\n  };\n  /**\n   * @override\n   */\n  NetworkXhrIo.prototype.addUploadProgressListener = function (listener) {\n    if (type.isDef(this.xhr_.upload)) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  };\n  /**\n   * @override\n   */\n  NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) {\n    if (type.isDef(this.xhr_.upload)) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  };\n  return NetworkXhrIo;\n}();\nexport { NetworkXhrIo };","map":{"version":3,"mappings":"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","names":["errorsExports","object","promiseimpl","type","XhrIoExports","xhr_","XMLHttpRequest","errorCode_","ErrorCode","NO_ERROR","sendPromise_","make","resolve","reject","_this","addEventListener","ABORT","NETWORK_ERROR","NetworkXhrIo","url","method","opt_body","opt_headers","sent_","internalError","open","isDef","headers","forEach","key","val","setRequestHeader","toString","send","status","e","responseText","abort","header","getResponseHeader","listener","upload","removeEventListener"],"sources":["../src/implementation/xhrio_network.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as errorsExports from './error';\nimport * as object from './object';\nimport * as promiseimpl from './promise_external';\nimport * as type from './type';\nimport * as XhrIoExports from './xhrio';\nimport { Headers, XhrIo } from './xhrio';\n\n/**\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\n * doesn't work in React Native on Android.\n */\nexport class NetworkXhrIo implements XhrIo {\n  private xhr_: XMLHttpRequest;\n  private errorCode_: XhrIoExports.ErrorCode;\n  private sendPromise_: Promise<XhrIo>;\n  private sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = XhrIoExports.ErrorCode.NO_ERROR;\n    this.sendPromise_ = promiseimpl.make((resolve, reject) => {\n      this.xhr_.addEventListener('abort', event => {\n        this.errorCode_ = XhrIoExports.ErrorCode.ABORT;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('error', event => {\n        this.errorCode_ = XhrIoExports.ErrorCode.NETWORK_ERROR;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('load', event => {\n        resolve(this);\n      });\n    });\n  }\n\n  /**\n   * @override\n   */\n  send(\n    url: string,\n    method: string,\n    opt_body?: ArrayBufferView | Blob | string | null,\n    opt_headers?: Headers\n  ): Promise<XhrIo> {\n    if (this.sent_) {\n      throw errorsExports.internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (type.isDef(opt_headers)) {\n      const headers = opt_headers as Headers;\n      object.forEach(headers, (key, val) => {\n        this.xhr_.setRequestHeader(key, val.toString());\n      });\n    }\n    if (type.isDef(opt_body)) {\n      this.xhr_.send(opt_body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  /**\n   * @override\n   */\n  getErrorCode(): XhrIoExports.ErrorCode {\n    if (!this.sent_) {\n      throw errorsExports.internalError(\n        'cannot .getErrorCode() before sending'\n      );\n    }\n    return this.errorCode_;\n  }\n\n  /**\n   * @override\n   */\n  getStatus(): number {\n    if (!this.sent_) {\n      throw errorsExports.internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  getResponseText(): string {\n    if (!this.sent_) {\n      throw errorsExports.internalError(\n        'cannot .getResponseText() before sending'\n      );\n    }\n    return this.xhr_.responseText;\n  }\n\n  /**\n   * Aborts the request.\n   * @override\n   */\n  abort() {\n    this.xhr_.abort();\n  }\n\n  /**\n   * @override\n   */\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  /**\n   * @override\n   */\n  addUploadProgressListener(listener: (p1: Event) => void) {\n    if (type.isDef(this.xhr_.upload)) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  /**\n   * @override\n   */\n  removeUploadProgressListener(listener: (p1: Event) => void) {\n    if (type.isDef(this.xhr_.upload)) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}