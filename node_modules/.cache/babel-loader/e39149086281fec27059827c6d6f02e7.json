{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar util_1 = require(\"@firebase/util\");\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nvar EventEmitter = /** @class */function () {\n  /**\n   * @param {!Array.<string>} allowedEvents_\n   */\n  function EventEmitter(allowedEvents_) {\n    this.allowedEvents_ = allowedEvents_;\n    this.listeners_ = {};\n    util_1.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n  }\n  /**\n   * To be called by derived classes to trigger events.\n   * @param {!string} eventType\n   * @param {...*} var_args\n   */\n  EventEmitter.prototype.trigger = function (eventType) {\n    var var_args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      var_args[_i - 1] = arguments[_i];\n    }\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      var listeners = this.listeners_[eventType].slice();\n      for (var i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, var_args);\n      }\n    }\n  };\n  EventEmitter.prototype.on = function (eventType, callback, context) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({\n      callback: callback,\n      context: context\n    });\n    var eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  };\n  EventEmitter.prototype.off = function (eventType, callback, context) {\n    this.validateEventType_(eventType);\n    var listeners = this.listeners_[eventType] || [];\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  };\n  EventEmitter.prototype.validateEventType_ = function (eventType) {\n    util_1.assert(this.allowedEvents_.find(function (et) {\n      return et === eventType;\n    }), 'Unknown event: ' + eventType);\n  };\n  return EventEmitter;\n}();\nexports.EventEmitter = EventEmitter;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAgBA;AAEA;;;;AAIA;EAQE;;;EAGA,sBAAoBA,cAA6B;IAA7B,mBAAc,GAAdA,cAAc;IAV1B,eAAU,GAKd,EAAE;IAMJC,aAAM,CACJC,KAAK,CAACC,OAAO,CAACH,cAAc,CAAC,IAAIA,cAAc,CAACI,MAAM,GAAG,CAAC,EAC1D,4BAA4B,CAC7B;EACH;EAWA;;;;;EAKUC,8BAAO,GAAjB,UAAkBC,SAAiB;IAAE;SAAA,UAAkB,EAAlBC,qBAAkB,EAAlBA,IAAkB;MAAlBC;;IACnC,IAAIN,KAAK,CAACC,OAAO,CAAC,IAAI,CAACM,UAAU,CAACH,SAAS,CAAC,CAAC,EAAE;MAC7C;MACA,IAAMI,SAAS,GAAO,IAAI,CAACD,UAAU,CAACH,SAAS,CAAC,QAAC;MAEjD,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,SAAS,CAACN,MAAM,EAAEO,CAAC,EAAE,EAAE;QACzCD,SAAS,CAACC,CAAC,CAAC,CAACC,QAAQ,CAACC,KAAK,CAACH,SAAS,CAACC,CAAC,CAAC,CAACG,OAAO,EAAEN,QAAQ,CAAC;MAC7D;IACF;EACF,CAAC;EAEDH,yBAAE,GAAF,UAAGC,SAAiB,EAAEM,QAA0B,EAAEE,OAAY;IAC5D,IAAI,CAACC,kBAAkB,CAACT,SAAS,CAAC;IAClC,IAAI,CAACG,UAAU,CAACH,SAAS,CAAC,GAAG,IAAI,CAACG,UAAU,CAACH,SAAS,CAAC,IAAI,EAAE;IAC7D,IAAI,CAACG,UAAU,CAACH,SAAS,CAAC,CAACU,IAAI,CAAC;MAAEJ,QAAQ;MAAEE,OAAO;IAAA,CAAE,CAAC;IAEtD,IAAMG,SAAS,GAAG,IAAI,CAACC,eAAe,CAACZ,SAAS,CAAC;IACjD,IAAIW,SAAS,EAAE;MACbL,QAAQ,CAACC,KAAK,CAACC,OAAO,EAAEG,SAAS,CAAC;IACpC;EACF,CAAC;EAEDZ,0BAAG,GAAH,UAAIC,SAAiB,EAAEM,QAA0B,EAAEE,OAAY;IAC7D,IAAI,CAACC,kBAAkB,CAACT,SAAS,CAAC;IAClC,IAAMI,SAAS,GAAG,IAAI,CAACD,UAAU,CAACH,SAAS,CAAC,IAAI,EAAE;IAClD,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,SAAS,CAACN,MAAM,EAAEO,CAAC,EAAE,EAAE;MACzC,IACED,SAAS,CAACC,CAAC,CAAC,CAACC,QAAQ,KAAKA,QAAQ,KACjC,CAACE,OAAO,IAAIA,OAAO,KAAKJ,SAAS,CAACC,CAAC,CAAC,CAACG,OAAO,CAC/C,EAAE;QACAJ,SAAS,CAACS,MAAM,CAACR,CAAC,EAAE,CAAC,CAAC;QACtB;MACF;IACF;EACF,CAAC;EAEON,yCAAkB,GAA1B,UAA2BC,SAAiB;IAC1CL,aAAM,CACJ,IAAI,CAACD,cAAc,CAACoB,IAAI,CAAC,UAASC,EAAE;MAClC,OAAOA,EAAE,KAAKf,SAAS;IACzB,CAAC,CAAC,EACF,iBAAiB,GAAGA,SAAS,CAC9B;EACH,CAAC;EACH,mBAAC;AAAD,CA5EA,EA4EC;AA5EqBgB","names":["allowedEvents_","util_1","Array","isArray","length","EventEmitter","eventType","_i","var_args","listeners_","listeners","i","callback","apply","context","validateEventType_","push","eventData","getInitialEvent","splice","find","et","exports"],"sources":["../src/core/util/EventEmitter.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: any[]): void;\n      context: any;\n    }>;\n  } = {};\n\n  /**\n   * @param {!Array.<string>} allowedEvents_\n   */\n  constructor(private allowedEvents_: Array<string>) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @param {!string} eventType\n   * @return {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): any[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   * @param {!string} eventType\n   * @param {...*} var_args\n   */\n  protected trigger(eventType: string, ...var_args: any[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, var_args);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: any) => void, context: any) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: any) => void, context: any) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(function(et) {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}