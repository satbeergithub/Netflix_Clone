{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"./util/util\");\nvar AckUserWrite_1 = require(\"./operation/AckUserWrite\");\nvar ChildrenNode_1 = require(\"./snap/ChildrenNode\");\nvar util_3 = require(\"@firebase/util\");\nvar ImmutableTree_1 = require(\"./util/ImmutableTree\");\nvar ListenComplete_1 = require(\"./operation/ListenComplete\");\nvar Merge_1 = require(\"./operation/Merge\");\nvar Operation_1 = require(\"./operation/Operation\");\nvar Overwrite_1 = require(\"./operation/Overwrite\");\nvar Path_1 = require(\"./util/Path\");\nvar SyncPoint_1 = require(\"./SyncPoint\");\nvar WriteTree_1 = require(\"./WriteTree\");\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n * @constructor\n */\nvar SyncTree = /** @class */function () {\n  /**\n   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  function SyncTree(listenProvider_) {\n    this.listenProvider_ = listenProvider_;\n    /**\n     * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n     * @type {!ImmutableTree.<!SyncPoint>}\n     * @private\n     */\n    this.syncPointTree_ = ImmutableTree_1.ImmutableTree.Empty;\n    /**\n     * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n     * @type {!WriteTree}\n     * @private\n     */\n    this.pendingWriteTree_ = new WriteTree_1.WriteTree();\n    this.tagToQueryMap_ = {};\n    this.queryToTagMap_ = {};\n  }\n  /**\n   * Apply the data changes for a user-generated set() or transaction() call.\n   *\n   * @param {!Path} path\n   * @param {!Node} newData\n   * @param {number} writeId\n   * @param {boolean=} visible\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(new Overwrite_1.Overwrite(Operation_1.OperationSource.User, path, newData));\n    }\n  };\n  /**\n   * Apply the data from a user-generated update() call\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} writeId\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n    var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);\n    return this.applyOperationToSyncPoints_(new Merge_1.Merge(Operation_1.OperationSource.User, path, changeTree));\n  };\n  /**\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n   *\n   * @param {!number} writeId\n   * @param {boolean=} revert True if the given write failed and needs to be reverted\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  SyncTree.prototype.ackUserWrite = function (writeId, revert) {\n    if (revert === void 0) {\n      revert = false;\n    }\n    var write = this.pendingWriteTree_.getWrite(writeId);\n    var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      var affectedTree_1 = ImmutableTree_1.ImmutableTree.Empty;\n      if (write.snap != null) {\n        // overwrite\n        affectedTree_1 = affectedTree_1.set(Path_1.Path.Empty, true);\n      } else {\n        util_3.forEach(write.children, function (pathString, node) {\n          affectedTree_1 = affectedTree_1.set(new Path_1.Path(pathString), node);\n        });\n      }\n      return this.applyOperationToSyncPoints_(new AckUserWrite_1.AckUserWrite(write.path, affectedTree_1, revert));\n    }\n  };\n  /**\n   * Apply new server data for the specified path..\n   *\n   * @param {!Path} path\n   * @param {!Node} newData\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  SyncTree.prototype.applyServerOverwrite = function (path, newData) {\n    return this.applyOperationToSyncPoints_(new Overwrite_1.Overwrite(Operation_1.OperationSource.Server, path, newData));\n  };\n  /**\n   * Apply new server data to be merged in at the specified path.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\n    var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);\n    return this.applyOperationToSyncPoints_(new Merge_1.Merge(Operation_1.OperationSource.Server, path, changeTree));\n  };\n  /**\n   * Apply a listen complete for a query\n   *\n   * @param {!Path} path\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  SyncTree.prototype.applyListenComplete = function (path) {\n    return this.applyOperationToSyncPoints_(new ListenComplete_1.ListenComplete(Operation_1.OperationSource.Server, path));\n  };\n  /**\n   * Apply new server data for the specified tagged query.\n   *\n   * @param {!Path} path\n   * @param {!Node} snap\n   * @param {!number} tag\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n    if (queryKey != null) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n        queryId = r.queryId;\n      var relativePath = Path_1.Path.relativePath(queryPath, path);\n      var op = new Overwrite_1.Overwrite(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  };\n  /**\n   * Apply server data to be merged in for the specified tagged query.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} tag\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n        queryId = r.queryId;\n      var relativePath = Path_1.Path.relativePath(queryPath, path);\n      var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);\n      var op = new Merge_1.Merge(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  };\n  /**\n   * Apply a listen complete for a tagged query\n   *\n   * @param {!Path} path\n   * @param {!number} tag\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n        queryId = r.queryId;\n      var relativePath = Path_1.Path.relativePath(queryPath, path);\n      var op = new ListenComplete_1.ListenComplete(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  };\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @param {!Query} query\n   * @param {!EventRegistration} eventRegistration\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\n    var path = query.path;\n    var serverCache = null;\n    var foundAncestorDefaultView = false;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\n      var relativePath = Path_1.Path.relativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView = foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    var syncPoint = this.syncPointTree_.get(path);\n    if (!syncPoint) {\n      syncPoint = new SyncPoint_1.SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView = foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache = serverCache || syncPoint.getCompleteServerCache(Path_1.Path.Empty);\n    }\n    var serverCacheComplete;\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n      var subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild(function (childName, childSyncPoint) {\n        var completeCache = childSyncPoint.getCompleteServerCache(Path_1.Path.Empty);\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(childName, completeCache);\n        }\n      });\n    }\n    var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      var queryKey = SyncTree.makeQueryKey_(query);\n      util_1.assert(!(queryKey in this.queryToTagMap_), 'View does not exist, but we have a tag');\n      var tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap_[queryKey] = tag;\n      // Coerce to string to avoid sparse arrays.\n      this.tagToQueryMap_['_' + tag] = queryKey;\n    }\n    var writesCache = this.pendingWriteTree_.childWrites(path);\n    var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      var view /** @type !View */ = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n    return events;\n  };\n  /**\n   * Remove event callback(s).\n   *\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n   *\n   * @param {!Query} query\n   * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n  SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\n    var _this = this;\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\n    var path = query.path;\n    var maybeSyncPoint = this.syncPointTree_.get(path);\n    var cancelEvents = [];\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n    if (maybeSyncPoint && (query.queryIdentifier() === 'default' || maybeSyncPoint.viewExistsForQuery(query))) {\n      /**\n       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\n       */\n      var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n      var removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events;\n      // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      var removingDefault = -1 !== removed.findIndex(function (query) {\n        return query.getQueryParams().loadsAllData();\n      });\n      var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\n        return parentSyncPoint.hasCompleteView();\n      });\n      if (removingDefault && !covered) {\n        var subtree = this.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          var newViews = this.collectDistinctViewsForSubTree_(subtree);\n          // Ok, we've collected all the listens we need. Set them up.\n          for (var i = 0; i < newViews.length; ++i) {\n            var view = newViews[i],\n              newQuery = view.getQuery();\n            var listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\n          }\n        } else {\n          // There's nothing below us, so nothing we need to start listening on\n        }\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          var defaultTag = null;\n          this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\n        } else {\n          removed.forEach(function (queryToRemove) {\n            var tagToRemove = _this.queryToTagMap_[SyncTree.makeQueryKey_(queryToRemove)];\n            _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\n          });\n        }\n      }\n      // Now, clear all of the tags we're tracking for the removed listens\n      this.removeTags_(removed);\n    } else {\n      // No-op, this listener must've been already removed\n    }\n    return cancelEvents;\n  };\n  /**\n   * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\n   * it, but as this is only used by transaction code, that should always be the case anyways.\n   *\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n   * @param {!Path} path The path to the data we want\n   * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded\n   * @return {?Node}\n   */\n  SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\n    var includeHiddenSets = true;\n    var writeTree = this.pendingWriteTree_;\n    var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\n      var relativePath = Path_1.Path.relativePath(pathSoFar, path);\n      var serverCache = syncPoint.getCompleteServerCache(relativePath);\n      if (serverCache) {\n        return serverCache;\n      }\n    });\n    return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\n  };\n  /**\n   * This collapses multiple unfiltered views into a single view, since we only need a single\n   * listener for them.\n   *\n   * @param {!ImmutableTree.<!SyncPoint>} subtree\n   * @return {!Array.<!View>}\n   * @private\n   */\n  SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\n    return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n      if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n        var completeView = maybeChildSyncPoint.getCompleteView();\n        return [completeView];\n      } else {\n        // No complete view here, flatten any deeper listens into an array\n        var views_1 = [];\n        if (maybeChildSyncPoint) {\n          views_1 = maybeChildSyncPoint.getQueryViews();\n        }\n        util_3.forEach(childMap, function (key, childViews) {\n          views_1 = views_1.concat(childViews);\n        });\n        return views_1;\n      }\n    });\n  };\n  /**\n   * @param {!Array.<!Query>} queries\n   * @private\n   */\n  SyncTree.prototype.removeTags_ = function (queries) {\n    for (var j = 0; j < queries.length; ++j) {\n      var removedQuery = queries[j];\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        var removedQueryTag = this.queryToTagMap_[removedQueryKey];\n        delete this.queryToTagMap_[removedQueryKey];\n        delete this.tagToQueryMap_['_' + removedQueryTag];\n      }\n    }\n  };\n  /**\n   * Normalizes a query to a query we send the server for listening\n   * @param {!Query} query\n   * @return {!Query} The normalized query\n   * @private\n   */\n  SyncTree.queryForListening_ = function (query) {\n    if (query.getQueryParams().loadsAllData() && !query.getQueryParams().isDefault()) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return (/** @type {!Query} */query.getRef()\n      );\n    } else {\n      return query;\n    }\n  };\n  /**\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\n   *\n   * @param {!Query} query\n   * @param {!View} view\n   * @return {!Array.<!Event>} This method can return events to support synchronous data sources\n   * @private\n   */\n  SyncTree.prototype.setupListener_ = function (query, view) {\n    var path = query.path;\n    var tag = this.tagForQuery_(query);\n    var listener = this.createListenerForView_(view);\n    var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\n    var subtree = this.syncPointTree_.subtree(path);\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n    if (tag) {\n      util_1.assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n        if (!relativePath.isEmpty() && maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n          return [maybeChildSyncPoint.getCompleteView().getQuery()];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          var queries_1 = [];\n          if (maybeChildSyncPoint) {\n            queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) {\n              return view.getQuery();\n            }));\n          }\n          util_3.forEach(childMap, function (key, childQueries) {\n            queries_1 = queries_1.concat(childQueries);\n          });\n          return queries_1;\n        }\n      });\n      for (var i = 0; i < queriesToStop.length; ++i) {\n        var queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\n      }\n    }\n    return events;\n  };\n  /**\n   *\n   * @param {!View} view\n   * @return {{hashFn: function(), onComplete: function(!string, *)}}\n   * @private\n   */\n  SyncTree.prototype.createListenerForView_ = function (view) {\n    var _this = this;\n    var query = view.getQuery();\n    var tag = this.tagForQuery_(query);\n    return {\n      hashFn: function () {\n        var cache = view.getServerCache() || ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: function (status) {\n        if (status === 'ok') {\n          if (tag) {\n            return _this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return _this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          var error = util_2.errorForServerCode(status, query);\n          return _this.removeEventRegistration(query, /*eventRegistration*/null, error);\n        }\n      }\n    };\n  };\n  /**\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n   * @private\n   * @param {!Query} query\n   * @return {string}\n   */\n  SyncTree.makeQueryKey_ = function (query) {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  };\n  /**\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n   * @private\n   * @param {!string} queryKey\n   * @return {{queryId: !string, path: !Path}}\n   */\n  SyncTree.parseQueryKey_ = function (queryKey) {\n    var splitIndex = queryKey.indexOf('$');\n    util_1.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path_1.Path(queryKey.substr(0, splitIndex))\n    };\n  };\n  /**\n   * Return the query associated with the given tag, if we have one\n   * @param {!number} tag\n   * @return {?string}\n   * @private\n   */\n  SyncTree.prototype.queryKeyForTag_ = function (tag) {\n    return this.tagToQueryMap_['_' + tag];\n  };\n  /**\n   * Return the tag associated with the given query.\n   * @param {!Query} query\n   * @return {?number}\n   * @private\n   */\n  SyncTree.prototype.tagForQuery_ = function (query) {\n    var queryKey = SyncTree.makeQueryKey_(query);\n    return util_3.safeGet(this.queryToTagMap_, queryKey);\n  };\n  /**\n   * Static accessor for query tags.\n   * @return {number}\n   * @private\n   */\n  SyncTree.getNextQueryTag_ = function () {\n    return SyncTree.nextQueryTag_++;\n  };\n  /**\n   * A helper method to apply tagged operations\n   *\n   * @param {!Path} queryPath\n   * @param {!Operation} operation\n   * @return {!Array.<!Event>}\n   * @private\n   */\n  SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\n    var syncPoint = this.syncPointTree_.get(queryPath);\n    util_1.assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    var writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(operation, writesCache, /*serverCache=*/null);\n  };\n  /**\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n   *\n   * NOTES:\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n      * - We call applyOperation() on each SyncPoint passing three things:\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n   *   3. A snapshot Node with cached server data, if we have it.\n      * - We concatenate all of the events returned by each SyncPoint and return the result.\n   *\n   * @param {!Operation} operation\n   * @return {!Array.<!Event>}\n   * @private\n   */\n  SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\n    return this.applyOperationHelper_(operation, this.syncPointTree_, /*serverCache=*/null, this.pendingWriteTree_.childWrites(Path_1.Path.Empty));\n  };\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   *\n   * @private\n   * @param {!Operation} operation\n   * @param {ImmutableTree.<!SyncPoint>} syncPointTree\n   * @param {?Node} serverCache\n   * @param {!WriteTreeRef} writesCache\n   * @return {!Array.<!Event>}\n   */\n  SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n    if (operation.path.isEmpty()) {\n      return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n    } else {\n      var syncPoint = syncPointTree.get(Path_1.Path.Empty);\n      // If we don't have cached server data, see if we can get it from this SyncPoint.\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(Path_1.Path.Empty);\n      }\n      var events = [];\n      var childName = operation.path.getFront();\n      var childOperation = operation.operationForChild(childName);\n      var childTree = syncPointTree.children.get(childName);\n      if (childTree && childOperation) {\n        var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n        var childWritesCache = writesCache.child(childName);\n        events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n      }\n      if (syncPoint) {\n        events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n      }\n      return events;\n    }\n  };\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   *\n   * @private\n   * @param {!Operation} operation\n   * @param {ImmutableTree.<!SyncPoint>} syncPointTree\n   * @param {?Node} serverCache\n   * @param {!WriteTreeRef} writesCache\n   * @return {!Array.<!Event>}\n   */\n  SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n    var _this = this;\n    var syncPoint = syncPointTree.get(Path_1.Path.Empty);\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(Path_1.Path.Empty);\n    }\n    var events = [];\n    syncPointTree.children.inorderTraversal(function (childName, childTree) {\n      var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n      var childWritesCache = writesCache.child(childName);\n      var childOperation = operation.operationForChild(childName);\n      if (childOperation) {\n        events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n      }\n    });\n    if (syncPoint) {\n      events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n    }\n    return events;\n  };\n  /**\n   * Static tracker for next query tag.\n   * @type {number}\n   * @private\n   */\n  SyncTree.nextQueryTag_ = 1;\n  return SyncTree;\n}();\nexports.SyncTree = SyncTree;","map":{"version":3,"mappings":"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","names":["listenProvider_","ImmutableTree_1","Empty","WriteTree_1","SyncTree","path","newData","writeId","visible","pendingWriteTree_","addOverwrite","applyOperationToSyncPoints_","Overwrite_1","Operation_1","User","changedChildren","addMerge","changeTree","fromObject","Merge_1","revert","write","getWrite","needToReevaluate","removeWrite","affectedTree_1","snap","set","Path_1","util_3","children","pathString","node","AckUserWrite_1","Server","ListenComplete_1","tag","queryKey","queryKeyForTag_","r","parseQueryKey_","queryPath","queryId","relativePath","op","forServerTaggedQuery","applyTaggedOperation_","query","eventRegistration","serverCache","foundAncestorDefaultView","syncPointTree_","foreachOnPath","pathToSyncPoint","sp","getCompleteServerCache","hasCompleteView","syncPoint","get","SyncPoint_1","serverCacheComplete","ChildrenNode_1","EMPTY_NODE","subtree","foreachChild","childName","childSyncPoint","completeCache","updateImmediateChild","viewAlreadyExists","viewExistsForQuery","getQueryParams","loadsAllData","makeQueryKey_","util_1","queryToTagMap_","getNextQueryTag_","tagToQueryMap_","writesCache","childWrites","events","addEventRegistration","view","viewForQuery","concat","setupListener_","cancelError","maybeSyncPoint","cancelEvents","queryIdentifier","removedAndEvents","removeEventRegistration","isEmpty","remove","removed","removingDefault","findIndex","covered","findOnPath","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","i","length","newQuery","getQuery","listener","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","onComplete","defaultTag","stopListening","forEach","queryToRemove","tagToRemove","_this","removeTags_","writeIdsToExclude","includeHiddenSets","writeTree","pathSoFar","calcCompleteEventCache","fold","maybeChildSyncPoint","childMap","completeView","getCompleteView","views_1","getQueryViews","key","childViews","queries","j","removedQuery","removedQueryKey","removedQueryTag","isDefault","getRef","value","queriesToStop","queries_1","map","childQueries","queryToStop","cache","getServerCache","hash","status","applyTaggedListenComplete","applyListenComplete","error","util_2","toString","splitIndex","indexOf","substr","nextQueryTag_","operation","applyOperation","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","getFront","childOperation","operationForChild","childTree","childServerCache","getImmediateChild","childWritesCache","child","inorderTraversal","exports"],"sources":["../src/core/SyncTree.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { errorForServerCode } from './util/util';\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { forEach, safeGet } from '@firebase/util';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport { Operation, OperationSource } from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { Path } from './util/Path';\nimport { SyncPoint } from './SyncPoint';\nimport { WriteTree, WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { Node } from './snap/Node';\nimport { Event } from './view/Event';\nimport { EventRegistration } from './view/EventRegistration';\nimport { View } from './view/View';\n\n/**\n * @typedef {{\n *   startListening: function(\n *     !Query,\n *     ?number,\n *     function():string,\n *     function(!string, *):!Array.<!Event>\n *   ):!Array.<!Event>,\n *\n *   stopListening: function(!Query, ?number)\n * }}\n */\nexport interface ListenProvider {\n  startListening(\n    query: Query,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: any) => Event[]\n  ): Event[];\n\n  stopListening(a: Query, b: number | null): void;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n * @constructor\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   * @type {!ImmutableTree.<!SyncPoint>}\n   * @private\n   */\n  private syncPointTree_: ImmutableTree<SyncPoint> = ImmutableTree.Empty;\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   * @type {!WriteTree}\n   * @private\n   */\n  private pendingWriteTree_ = new WriteTree();\n\n  private tagToQueryMap_: { [k: string]: string } = {};\n  private queryToTagMap_: { [k: string]: number } = {};\n\n  /**\n   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(private listenProvider_: ListenProvider) {}\n\n  /**\n   * Apply the data changes for a user-generated set() or transaction() call.\n   *\n   * @param {!Path} path\n   * @param {!Node} newData\n   * @param {number} writeId\n   * @param {boolean=} visible\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyUserOverwrite(\n    path: Path,\n    newData: Node,\n    writeId: number,\n    visible?: boolean\n  ): Event[] {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(\n        new Overwrite(OperationSource.User, path, newData)\n      );\n    }\n  }\n\n  /**\n   * Apply the data from a user-generated update() call\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} writeId\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyUserMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ): Event[] {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.User, path, changeTree)\n    );\n  }\n\n  /**\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n   *\n   * @param {!number} writeId\n   * @param {boolean=} revert True if the given write failed and needs to be reverted\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  ackUserWrite(writeId: number, revert: boolean = false) {\n    const write = this.pendingWriteTree_.getWrite(writeId);\n    const needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      let affectedTree = ImmutableTree.Empty;\n      if (write.snap != null) {\n        // overwrite\n        affectedTree = affectedTree.set(Path.Empty, true);\n      } else {\n        forEach(write.children, function(pathString: string, node: Node) {\n          affectedTree = affectedTree.set(new Path(pathString), node);\n        });\n      }\n      return this.applyOperationToSyncPoints_(\n        new AckUserWrite(write.path, affectedTree, revert)\n      );\n    }\n  }\n\n  /**\n   * Apply new server data for the specified path..\n   *\n   * @param {!Path} path\n   * @param {!Node} newData\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyServerOverwrite(path: Path, newData: Node): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new Overwrite(OperationSource.Server, path, newData)\n    );\n  }\n\n  /**\n   * Apply new server data to be merged in at the specified path.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyServerMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node }\n  ): Event[] {\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.Server, path, changeTree)\n    );\n  }\n\n  /**\n   * Apply a listen complete for a query\n   *\n   * @param {!Path} path\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyListenComplete(path: Path): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new ListenComplete(OperationSource.Server, path)\n    );\n  }\n\n  /**\n   * Apply new server data for the specified tagged query.\n   *\n   * @param {!Path} path\n   * @param {!Node} snap\n   * @param {!number} tag\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyTaggedQueryOverwrite(path: Path, snap: Node, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey != null) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new Overwrite(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        snap\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  }\n\n  /**\n   * Apply server data to be merged in for the specified tagged query.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} tag\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyTaggedQueryMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    tag: number\n  ): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const changeTree = ImmutableTree.fromObject(changedChildren);\n      const op = new Merge(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        changeTree\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Apply a listen complete for a tagged query\n   *\n   * @param {!Path} path\n   * @param {!number} tag\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyTaggedListenComplete(path: Path, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new ListenComplete(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @param {!Query} query\n   * @param {!EventRegistration} eventRegistration\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration\n  ): Event[] {\n    const path = query.path;\n\n    let serverCache: Node | null = null;\n    let foundAncestorDefaultView = false;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    this.syncPointTree_.foreachOnPath(path, function(pathToSyncPoint, sp) {\n      const relativePath = Path.relativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    let syncPoint = this.syncPointTree_.get(path);\n    if (!syncPoint) {\n      syncPoint = new SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let serverCacheComplete;\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode.EMPTY_NODE;\n      const subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild(function(childName, childSyncPoint) {\n        const completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(\n            childName,\n            completeCache\n          );\n        }\n      });\n    }\n\n    const viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      const queryKey = SyncTree.makeQueryKey_(query);\n      assert(\n        !(queryKey in this.queryToTagMap_),\n        'View does not exist, but we have a tag'\n      );\n      const tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap_[queryKey] = tag;\n      // Coerce to string to avoid sparse arrays.\n      this.tagToQueryMap_['_' + tag] = queryKey;\n    }\n    const writesCache = this.pendingWriteTree_.childWrites(path);\n    let events = syncPoint.addEventRegistration(\n      query,\n      eventRegistration,\n      writesCache,\n      serverCache,\n      serverCacheComplete\n    );\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      const view /** @type !View */ = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n    return events;\n  }\n\n  /**\n   * Remove event callback(s).\n   *\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n   *\n   * @param {!Query} query\n   * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\n    const path = query.path;\n    const maybeSyncPoint = this.syncPointTree_.get(path);\n    let cancelEvents: Event[] = [];\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n    if (\n      maybeSyncPoint &&\n      (query.queryIdentifier() === 'default' ||\n        maybeSyncPoint.viewExistsForQuery(query))\n    ) {\n      /**\n       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\n       */\n      const removedAndEvents = maybeSyncPoint.removeEventRegistration(\n        query,\n        eventRegistration,\n        cancelError\n      );\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n      const removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events;\n      // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(function(query) {\n          return query.getQueryParams().loadsAllData();\n        });\n      const covered = this.syncPointTree_.findOnPath(path, function(\n        relativePath,\n        parentSyncPoint\n      ) {\n        return parentSyncPoint.hasCompleteView();\n      });\n\n      if (removingDefault && !covered) {\n        const subtree = this.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = this.collectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.getQuery();\n            const listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(\n              SyncTree.queryForListening_(newQuery),\n              this.tagForQuery_(newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        } else {\n          // There's nothing below us, so nothing we need to start listening on\n        }\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          this.listenProvider_.stopListening(\n            SyncTree.queryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: Query) => {\n            const tagToRemove = this.queryToTagMap_[\n              SyncTree.makeQueryKey_(queryToRemove)\n            ];\n            this.listenProvider_.stopListening(\n              SyncTree.queryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n      // Now, clear all of the tags we're tracking for the removed listens\n      this.removeTags_(removed);\n    } else {\n      // No-op, this listener must've been already removed\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\n   * it, but as this is only used by transaction code, that should always be the case anyways.\n   *\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n   * @param {!Path} path The path to the data we want\n   * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    path: Path,\n    writeIdsToExclude?: number[]\n  ): Node | null {\n    const includeHiddenSets = true;\n    const writeTree = this.pendingWriteTree_;\n    const serverCache = this.syncPointTree_.findOnPath(path, function(\n      pathSoFar,\n      syncPoint\n    ) {\n      const relativePath = Path.relativePath(pathSoFar, path);\n      const serverCache = syncPoint.getCompleteServerCache(relativePath);\n      if (serverCache) {\n        return serverCache;\n      }\n    });\n    return writeTree.calcCompleteEventCache(\n      path,\n      serverCache,\n      writeIdsToExclude,\n      includeHiddenSets\n    );\n  }\n\n  /**\n   * This collapses multiple unfiltered views into a single view, since we only need a single\n   * listener for them.\n   *\n   * @param {!ImmutableTree.<!SyncPoint>} subtree\n   * @return {!Array.<!View>}\n   * @private\n   */\n  private collectDistinctViewsForSubTree_(\n    subtree: ImmutableTree<SyncPoint>\n  ): View[] {\n    return subtree.fold<View[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n          const completeView = maybeChildSyncPoint.getCompleteView();\n          return [completeView];\n        } else {\n          // No complete view here, flatten any deeper listens into an array\n          let views: View[] = [];\n          if (maybeChildSyncPoint) {\n            views = maybeChildSyncPoint.getQueryViews();\n          }\n          forEach(childMap, function(key: string, childViews: View[]) {\n            views = views.concat(childViews);\n          });\n          return views;\n        }\n      }\n    );\n  }\n\n  /**\n   * @param {!Array.<!Query>} queries\n   * @private\n   */\n  private removeTags_(queries: Query[]) {\n    for (let j = 0; j < queries.length; ++j) {\n      const removedQuery = queries[j];\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        const removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        const removedQueryTag = this.queryToTagMap_[removedQueryKey];\n        delete this.queryToTagMap_[removedQueryKey];\n        delete this.tagToQueryMap_['_' + removedQueryTag];\n      }\n    }\n  }\n\n  /**\n   * Normalizes a query to a query we send the server for listening\n   * @param {!Query} query\n   * @return {!Query} The normalized query\n   * @private\n   */\n  private static queryForListening_(query: Query): Query {\n    if (\n      query.getQueryParams().loadsAllData() &&\n      !query.getQueryParams().isDefault()\n    ) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return /** @type {!Query} */ query.getRef();\n    } else {\n      return query;\n    }\n  }\n\n  /**\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\n   *\n   * @param {!Query} query\n   * @param {!View} view\n   * @return {!Array.<!Event>} This method can return events to support synchronous data sources\n   * @private\n   */\n  private setupListener_(query: Query, view: View): Event[] {\n    const path = query.path;\n    const tag = this.tagForQuery_(query);\n    const listener = this.createListenerForView_(view);\n\n    const events = this.listenProvider_.startListening(\n      SyncTree.queryForListening_(query),\n      tag,\n      listener.hashFn,\n      listener.onComplete\n    );\n\n    const subtree = this.syncPointTree_.subtree(path);\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n    if (tag) {\n      assert(\n        !subtree.value.hasCompleteView(),\n        \"If we're adding a query, it shouldn't be shadowed\"\n      );\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      const queriesToStop = subtree.fold<Query[]>(function(\n        relativePath,\n        maybeChildSyncPoint,\n        childMap\n      ) {\n        if (\n          !relativePath.isEmpty() &&\n          maybeChildSyncPoint &&\n          maybeChildSyncPoint.hasCompleteView()\n        ) {\n          return [maybeChildSyncPoint.getCompleteView().getQuery()];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: Query[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              maybeChildSyncPoint.getQueryViews().map(view => view.getQuery())\n            );\n          }\n          forEach(childMap, function(key: string, childQueries: Query[]) {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      });\n      for (let i = 0; i < queriesToStop.length; ++i) {\n        const queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(\n          SyncTree.queryForListening_(queryToStop),\n          this.tagForQuery_(queryToStop)\n        );\n      }\n    }\n    return events;\n  }\n\n  /**\n   *\n   * @param {!View} view\n   * @return {{hashFn: function(), onComplete: function(!string, *)}}\n   * @private\n   */\n  private createListenerForView_(\n    view: View\n  ): { hashFn(): string; onComplete(a: string, b?: any): Event[] } {\n    const query = view.getQuery();\n    const tag = this.tagForQuery_(query);\n\n    return {\n      hashFn: () => {\n        const cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: (status: string): Event[] => {\n        if (status === 'ok') {\n          if (tag) {\n            return this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          const error = errorForServerCode(status, query);\n          return this.removeEventRegistration(\n            query,\n            /*eventRegistration*/ null,\n            error\n          );\n        }\n      }\n    };\n  }\n\n  /**\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n   * @private\n   * @param {!Query} query\n   * @return {string}\n   */\n  private static makeQueryKey_(query: Query): string {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  }\n\n  /**\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n   * @private\n   * @param {!string} queryKey\n   * @return {{queryId: !string, path: !Path}}\n   */\n  private static parseQueryKey_(\n    queryKey: string\n  ): { queryId: string; path: Path } {\n    const splitIndex = queryKey.indexOf('$');\n    assert(\n      splitIndex !== -1 && splitIndex < queryKey.length - 1,\n      'Bad queryKey.'\n    );\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path(queryKey.substr(0, splitIndex))\n    };\n  }\n\n  /**\n   * Return the query associated with the given tag, if we have one\n   * @param {!number} tag\n   * @return {?string}\n   * @private\n   */\n  private queryKeyForTag_(tag: number): string | null {\n    return this.tagToQueryMap_['_' + tag];\n  }\n\n  /**\n   * Return the tag associated with the given query.\n   * @param {!Query} query\n   * @return {?number}\n   * @private\n   */\n  private tagForQuery_(query: Query): number | null {\n    const queryKey = SyncTree.makeQueryKey_(query);\n    return safeGet(this.queryToTagMap_, queryKey);\n  }\n\n  /**\n   * Static tracker for next query tag.\n   * @type {number}\n   * @private\n   */\n  private static nextQueryTag_ = 1;\n\n  /**\n   * Static accessor for query tags.\n   * @return {number}\n   * @private\n   */\n  private static getNextQueryTag_(): number {\n    return SyncTree.nextQueryTag_++;\n  }\n\n  /**\n   * A helper method to apply tagged operations\n   *\n   * @param {!Path} queryPath\n   * @param {!Operation} operation\n   * @return {!Array.<!Event>}\n   * @private\n   */\n  private applyTaggedOperation_(\n    queryPath: Path,\n    operation: Operation\n  ): Event[] {\n    const syncPoint = this.syncPointTree_.get(queryPath);\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    const writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(\n      operation,\n      writesCache,\n      /*serverCache=*/ null\n    );\n  }\n\n  /**\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n   *\n   * NOTES:\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n\n   * - We call applyOperation() on each SyncPoint passing three things:\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n   *   3. A snapshot Node with cached server data, if we have it.\n\n   * - We concatenate all of the events returned by each SyncPoint and return the result.\n   *\n   * @param {!Operation} operation\n   * @return {!Array.<!Event>}\n   * @private\n   */\n  private applyOperationToSyncPoints_(operation: Operation): Event[] {\n    return this.applyOperationHelper_(\n      operation,\n      this.syncPointTree_,\n      /*serverCache=*/ null,\n      this.pendingWriteTree_.childWrites(Path.Empty)\n    );\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   *\n   * @private\n   * @param {!Operation} operation\n   * @param {ImmutableTree.<!SyncPoint>} syncPointTree\n   * @param {?Node} serverCache\n   * @param {!WriteTreeRef} writesCache\n   * @return {!Array.<!Event>}\n   */\n  private applyOperationHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    if (operation.path.isEmpty()) {\n      return this.applyOperationDescendantsHelper_(\n        operation,\n        syncPointTree,\n        serverCache,\n        writesCache\n      );\n    } else {\n      const syncPoint = syncPointTree.get(Path.Empty);\n\n      // If we don't have cached server data, see if we can get it from this SyncPoint.\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n      }\n\n      let events: Event[] = [];\n      const childName = operation.path.getFront();\n      const childOperation = operation.operationForChild(childName);\n      const childTree = syncPointTree.children.get(childName);\n      if (childTree && childOperation) {\n        const childServerCache = serverCache\n          ? serverCache.getImmediateChild(childName)\n          : null;\n        const childWritesCache = writesCache.child(childName);\n        events = events.concat(\n          this.applyOperationHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n\n      if (syncPoint) {\n        events = events.concat(\n          syncPoint.applyOperation(operation, writesCache, serverCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   *\n   * @private\n   * @param {!Operation} operation\n   * @param {ImmutableTree.<!SyncPoint>} syncPointTree\n   * @param {?Node} serverCache\n   * @param {!WriteTreeRef} writesCache\n   * @return {!Array.<!Event>}\n   */\n  private applyOperationDescendantsHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    const syncPoint = syncPointTree.get(Path.Empty);\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let events: Event[] = [];\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writesCache.child(childName);\n      const childOperation = operation.operationForChild(childName);\n      if (childOperation) {\n        events = events.concat(\n          this.applyOperationDescendantsHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n    });\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPoint.applyOperation(operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}