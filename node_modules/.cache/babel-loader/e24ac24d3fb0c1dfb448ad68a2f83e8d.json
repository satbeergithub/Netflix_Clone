{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Index_1 = require(\"./Index\");\nvar Node_1 = require(\"../Node\");\nvar util_1 = require(\"../../util/util\");\nvar nodeFromJSON_1 = require(\"../nodeFromJSON\");\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nvar ValueIndex = /** @class */function (_super) {\n  __extends(ValueIndex, _super);\n  function ValueIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @inheritDoc\n   */\n  ValueIndex.prototype.compare = function (a, b) {\n    var indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return util_1.nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n  ValueIndex.prototype.isDefinedOn = function (node) {\n    return true;\n  };\n  /**\n   * @inheritDoc\n   */\n  ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return !oldNode.equals(newNode);\n  };\n  /**\n   * @inheritDoc\n   */\n  ValueIndex.prototype.minPost = function () {\n    return Node_1.NamedNode.MIN;\n  };\n  /**\n   * @inheritDoc\n   */\n  ValueIndex.prototype.maxPost = function () {\n    return Node_1.NamedNode.MAX;\n  };\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  ValueIndex.prototype.makePost = function (indexValue, name) {\n    var valueNode = nodeFromJSON_1.nodeFromJSON(indexValue);\n    return new Node_1.NamedNode(name, valueNode);\n  };\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  ValueIndex.prototype.toString = function () {\n    return '.value';\n  };\n  return ValueIndex;\n}(Index_1.Index);\nexports.ValueIndex = ValueIndex;\nexports.VALUE_INDEX = new ValueIndex();","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AACA;AAEA;;;;;AAKA;EAAgCA;EAAhC;;EAyDA;EAxDE;;;EAGAC,4BAAO,GAAP,UAAQC,CAAY,EAAEC,CAAY;IAChC,IAAMC,QAAQ,GAAGF,CAAC,CAACG,IAAI,CAACC,SAAS,CAACH,CAAC,CAACE,IAAI,CAAC;IACzC,IAAID,QAAQ,KAAK,CAAC,EAAE;MAClB,OAAOG,kBAAW,CAACL,CAAC,CAACM,IAAI,EAAEL,CAAC,CAACK,IAAI,CAAC;IACpC,CAAC,MAAM;MACL,OAAOJ,QAAQ;IACjB;EACF,CAAC;EAED;;;EAGAH,gCAAW,GAAX,UAAYI,IAAU;IACpB,OAAO,IAAI;EACb,CAAC;EAED;;;EAGAJ,wCAAmB,GAAnB,UAAoBQ,OAAa,EAAEC,OAAa;IAC9C,OAAO,CAACD,OAAO,CAACE,MAAM,CAACD,OAAO,CAAC;EACjC,CAAC;EAED;;;EAGAT,4BAAO,GAAP;IACE,OAAQW,gBAAiB,CAACC,GAAG;EAC/B,CAAC;EAED;;;EAGAZ,4BAAO,GAAP;IACE,OAAQW,gBAAiB,CAACE,GAAG;EAC/B,CAAC;EAED;;;;;EAKAb,6BAAQ,GAAR,UAASc,UAAkB,EAAEP,IAAY;IACvC,IAAMQ,SAAS,GAAGC,2BAAY,CAACF,UAAU,CAAC;IAC1C,OAAO,IAAIH,gBAAS,CAACJ,IAAI,EAAEQ,SAAS,CAAC;EACvC,CAAC;EAED;;;EAGAf,6BAAQ,GAAR;IACE,OAAO,QAAQ;EACjB,CAAC;EACH,iBAAC;AAAD,CAzDA,CAAgCiB,aAAK;AAAxBC;AA2DAA,mBAAW,GAAG,IAAIlB,UAAU,EAAE","names":["__extends","ValueIndex","a","b","indexCmp","node","compareTo","util_1","name","oldNode","newNode","equals","Node_1","MIN","MAX","indexValue","valueNode","nodeFromJSON_1","Index_1","exports"],"sources":["../src/core/snap/indexes/ValueIndex.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { NamedNode, Node } from '../Node';\nimport { nameCompare } from '../../util/util';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class ValueIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return (NamedNode as any).MAX;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n"]},"metadata":{},"sourceType":"script"}