{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ChildrenNode_1 = require(\"./ChildrenNode\");\nvar LeafNode_1 = require(\"./LeafNode\");\nvar Node_1 = require(\"./Node\");\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"@firebase/util\");\nvar childSet_1 = require(\"./childSet\");\nvar comparators_1 = require(\"./comparators\");\nvar IndexMap_1 = require(\"./IndexMap\");\nvar PriorityIndex_1 = require(\"./indexes/PriorityIndex\");\nvar USE_HINZE = true;\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param {*} json JSON to create a node for.\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n * @return {!Node}\n */\nfunction nodeFromJSON(json, priority) {\n  if (priority === void 0) {\n    priority = null;\n  }\n  if (json === null) {\n    return ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n  }\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n  util_2.assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    var jsonLeaf = json;\n    return new LeafNode_1.LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n  if (!(json instanceof Array) && USE_HINZE) {\n    var children_1 = [];\n    var childrenHavePriority_1 = false;\n    var hinzeJsonObj_1 = json;\n    util_1.forEach(hinzeJsonObj_1, function (key, child) {\n      if (typeof key !== 'string' || key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        var childNode = nodeFromJSON(hinzeJsonObj_1[key]);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority_1 = childrenHavePriority_1 || !childNode.getPriority().isEmpty();\n          children_1.push(new Node_1.NamedNode(key, childNode));\n        }\n      }\n    });\n    if (children_1.length == 0) {\n      return ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n    }\n    var childSet = childSet_1.buildChildSet(children_1, comparators_1.NAME_ONLY_COMPARATOR, function (namedNode) {\n      return namedNode.name;\n    }, comparators_1.NAME_COMPARATOR);\n    if (childrenHavePriority_1) {\n      var sortedChildSet = childSet_1.buildChildSet(children_1, PriorityIndex_1.PRIORITY_INDEX.getCompare());\n      return new ChildrenNode_1.ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap_1.IndexMap({\n        '.priority': sortedChildSet\n      }, {\n        '.priority': PriorityIndex_1.PRIORITY_INDEX\n      }));\n    } else {\n      return new ChildrenNode_1.ChildrenNode(childSet, nodeFromJSON(priority), IndexMap_1.IndexMap.Default);\n    }\n  } else {\n    var node_1 = ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n    var jsonObj_1 = json;\n    util_1.forEach(jsonObj_1, function (key, childData) {\n      if (util_1.contains(jsonObj_1, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          var childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) node_1 = node_1.updateImmediateChild(key, childNode);\n        }\n      }\n    });\n    return node_1.updatePriority(nodeFromJSON(priority));\n  }\n}\nexports.nodeFromJSON = nodeFromJSON;\nPriorityIndex_1.setNodeFromJSON(nodeFromJSON);","map":{"version":3,"mappings":"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","names":["USE_HINZE","json","priority","ChildrenNode_1","EMPTY_NODE","util_2","jsonLeaf","LeafNode_1","nodeFromJSON","Array","children_1","childrenHavePriority_1","hinzeJsonObj_1","util_1","key","child","substring","childNode","isEmpty","getPriority","push","Node_1","length","childSet","childSet_1","comparators_1","name","sortedChildSet","PriorityIndex_1","getCompare","IndexMap_1","Default","node_1","jsonObj_1","childData","isLeafNode","updateImmediateChild","updatePriority","exports"],"sources":["../src/core/snap/nodeFromJSON.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { forEach, contains } from '@firebase/util';\nimport { assert } from '@firebase/util';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { IndexMap } from './IndexMap';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { SortedMap } from '../util/SortedMap';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param {*} json JSON to create a node for.\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n * @return {!Node}\n */\nexport function nodeFromJSON(\n  json: any | null,\n  priority: string | number | null = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | object;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj: { [k: string]: any } = json as object;\n    forEach(hinzeJsonObj, (key: string, child: any) => {\n      if (typeof key !== 'string' || key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(hinzeJsonObj[key]);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length == 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    const jsonObj = json as object;\n    forEach(jsonObj, (key: string, childData: any) => {\n      if (contains(jsonObj, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty())\n            node = node.updateImmediateChild(key, childNode);\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n"]},"metadata":{},"sourceType":"script"}