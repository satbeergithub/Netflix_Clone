{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Index_1 = require(\"./Index\");\nvar util_1 = require(\"../../util/util\");\nvar Node_1 = require(\"../Node\");\nvar LeafNode_1 = require(\"../LeafNode\");\nvar nodeFromJSON;\nvar MAX_NODE;\nfunction setNodeFromJSON(val) {\n  nodeFromJSON = val;\n}\nexports.setNodeFromJSON = setNodeFromJSON;\nfunction setMaxNode(val) {\n  MAX_NODE = val;\n}\nexports.setMaxNode = setMaxNode;\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nvar PriorityIndex = /** @class */function (_super) {\n  __extends(PriorityIndex, _super);\n  function PriorityIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @inheritDoc\n   */\n  PriorityIndex.prototype.compare = function (a, b) {\n    var aPriority = a.node.getPriority();\n    var bPriority = b.node.getPriority();\n    var indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return util_1.nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n  PriorityIndex.prototype.isDefinedOn = function (node) {\n    return !node.getPriority().isEmpty();\n  };\n  /**\n   * @inheritDoc\n   */\n  PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  };\n  /**\n   * @inheritDoc\n   */\n  PriorityIndex.prototype.minPost = function () {\n    return Node_1.NamedNode.MIN;\n  };\n  /**\n   * @inheritDoc\n   */\n  PriorityIndex.prototype.maxPost = function () {\n    return new Node_1.NamedNode(util_1.MAX_NAME, new LeafNode_1.LeafNode('[PRIORITY-POST]', MAX_NODE));\n  };\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  PriorityIndex.prototype.makePost = function (indexValue, name) {\n    var priorityNode = nodeFromJSON(indexValue);\n    return new Node_1.NamedNode(name, new LeafNode_1.LeafNode('[PRIORITY-POST]', priorityNode));\n  };\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  PriorityIndex.prototype.toString = function () {\n    return '.priority';\n  };\n  return PriorityIndex;\n}(Index_1.Index);\nexports.PriorityIndex = PriorityIndex;\nexports.PRIORITY_INDEX = new PriorityIndex();","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AACA;AAEA,IAAIA,YAA8B;AAClC,IAAIC,QAAc;AAElB,yBAAgCC,GAAqB;EACnDF,YAAY,GAAGE,GAAG;AACpB;AAFAC;AAIA,oBAA2BD,GAAS;EAClCD,QAAQ,GAAGC,GAAG;AAChB;AAFAC;AAIA;;;;;AAKA;EAAmCC;EAAnC;;EA2DA;EA1DE;;;EAGAC,+BAAO,GAAP,UAAQC,CAAY,EAAEC,CAAY;IAChC,IAAMC,SAAS,GAAGF,CAAC,CAACG,IAAI,CAACC,WAAW,EAAE;IACtC,IAAMC,SAAS,GAAGJ,CAAC,CAACE,IAAI,CAACC,WAAW,EAAE;IACtC,IAAME,QAAQ,GAAGJ,SAAS,CAACK,SAAS,CAACF,SAAS,CAAC;IAC/C,IAAIC,QAAQ,KAAK,CAAC,EAAE;MAClB,OAAOE,kBAAW,CAACR,CAAC,CAACS,IAAI,EAAER,CAAC,CAACQ,IAAI,CAAC;IACpC,CAAC,MAAM;MACL,OAAOH,QAAQ;IACjB;EACF,CAAC;EAED;;;EAGAP,mCAAW,GAAX,UAAYI,IAAU;IACpB,OAAO,CAACA,IAAI,CAACC,WAAW,EAAE,CAACM,OAAO,EAAE;EACtC,CAAC;EAED;;;EAGAX,2CAAmB,GAAnB,UAAoBY,OAAa,EAAEC,OAAa;IAC9C,OAAO,CAACD,OAAO,CAACP,WAAW,EAAE,CAACS,MAAM,CAACD,OAAO,CAACR,WAAW,EAAE,CAAC;EAC7D,CAAC;EAED;;;EAGAL,+BAAO,GAAP;IACE,OAAQe,gBAAiB,CAACC,GAAG;EAC/B,CAAC;EAED;;;EAGAhB,+BAAO,GAAP;IACE,OAAO,IAAIe,gBAAS,CAACN,eAAQ,EAAE,IAAIQ,mBAAQ,CAAC,iBAAiB,EAAErB,QAAQ,CAAC,CAAC;EAC3E,CAAC;EAED;;;;;EAKAI,gCAAQ,GAAR,UAASkB,UAAe,EAAER,IAAY;IACpC,IAAMS,YAAY,GAAGxB,YAAY,CAACuB,UAAU,CAAC;IAC7C,OAAO,IAAIH,gBAAS,CAACL,IAAI,EAAE,IAAIO,mBAAQ,CAAC,iBAAiB,EAAEE,YAAY,CAAC,CAAC;EAC3E,CAAC;EAED;;;EAGAnB,gCAAQ,GAAR;IACE,OAAO,WAAW;EACpB,CAAC;EACH,oBAAC;AAAD,CA3DA,CAAmCoB,aAAK;AAA3BtB;AA6DAA,sBAAc,GAAG,IAAIE,aAAa,EAAE","names":["nodeFromJSON","MAX_NODE","val","exports","__extends","PriorityIndex","a","b","aPriority","node","getPriority","bPriority","indexCmp","compareTo","util_1","name","isEmpty","oldNode","newNode","equals","Node_1","MIN","LeafNode_1","indexValue","priorityNode","Index_1"],"sources":["../src/core/snap/indexes/PriorityIndex.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { LeafNode } from '../LeafNode';\n\nlet nodeFromJSON: (a: any) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: any) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class PriorityIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: any, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n"]},"metadata":{},"sourceType":"script"}