{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar util_1 = require(\"@firebase/util\");\n/**\n *\n * @enum\n */\nvar OperationType;\n(function (OperationType) {\n  OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n  OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n  OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n  OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType = exports.OperationType || (exports.OperationType = {}));\n/**\n * @param {boolean} fromUser\n * @param {boolean} fromServer\n * @param {?string} queryId\n * @param {boolean} tagged\n * @constructor\n */\nvar OperationSource = /** @class */function () {\n  function OperationSource(fromUser, fromServer, queryId, tagged) {\n    this.fromUser = fromUser;\n    this.fromServer = fromServer;\n    this.queryId = queryId;\n    this.tagged = tagged;\n    util_1.assert(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  OperationSource.User = new OperationSource( /*fromUser=*/true, false, null, /*tagged=*/false);\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  OperationSource.Server = new OperationSource(false, /*fromServer=*/true, null, /*tagged=*/false);\n  /**\n   * @param {string} queryId\n   * @return {!OperationSource}\n   */\n  OperationSource.forServerTaggedQuery = function (queryId) {\n    return new OperationSource(false, /*fromServer=*/true, queryId, /*tagged=*/true);\n  };\n  return OperationSource;\n}();\nexports.OperationSource = OperationSource;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAgBA;AAGA;;;;AAIA,IAAYA,aAKX;AALD,WAAYA,aAAa;EACvBA,2DAAS;EACTA,mDAAK;EACLA,qEAAc;EACdA,uEAAe;AACjB,CAAC,EALWA,aAAa,GAAbC,qBAAa,KAAbA,qBAAa;AAiCzB;;;;;;;AAOA;EACE,yBACSC,QAAiB,EACjBC,UAAmB,EACnBC,OAAsB,EACtBC,MAAe;IAHf,aAAQ,GAARH,QAAQ;IACR,eAAU,GAAVC,UAAU;IACV,YAAO,GAAPC,OAAO;IACP,WAAM,GAANC,MAAM;IAEbC,aAAM,CAAC,CAACD,MAAM,IAAIF,UAAU,EAAE,qCAAqC,CAAC;EACtE;EACA;;;;EAIOI,oBAAI,GAAG,IAAIA,eAAe,EAC/B,aAAc,IAAI,EAClB,KAAK,EACL,IAAI,EACJ,WAAY,KAAK,CAClB;EAED;;;;EAIOA,sBAAM,GAAG,IAAIA,eAAe,CACjC,KAAK,EACL,eAAgB,IAAI,EACpB,IAAI,EACJ,WAAY,KAAK,CAClB;EAED;;;;EAIOA,oCAAoB,GAAG,UAASH,OAAe;IACpD,OAAO,IAAIG,eAAe,CACxB,KAAK,EACL,eAAgB,IAAI,EACpBH,OAAO,EACP,WAAY,IAAI,CACjB;EACH,CAAC;EACH,sBAAC;CA3CD,EA2CC;AA3CYH","names":["OperationType","exports","fromUser","fromServer","queryId","tagged","util_1","OperationSource"],"sources":["../src/core/operation/Operation.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  /**\n   * @type {!OperationSource}\n   */\n  source: OperationSource;\n\n  /**\n   * @type {!OperationType}\n   */\n  type: OperationType;\n\n  /**\n   * @type {!Path}\n   */\n  path: Path;\n\n  /**\n   * @param {string} childName\n   * @return {?Operation}\n   */\n  operationForChild(childName: string): Operation | null;\n}\n\n/**\n * @param {boolean} fromUser\n * @param {boolean} fromServer\n * @param {?string} queryId\n * @param {boolean} tagged\n * @constructor\n */\nexport class OperationSource {\n  constructor(\n    public fromUser: boolean,\n    public fromServer: boolean,\n    public queryId: string | null,\n    public tagged: boolean\n  ) {\n    assert(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static User = new OperationSource(\n    /*fromUser=*/ true,\n    false,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static Server = new OperationSource(\n    false,\n    /*fromServer=*/ true,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @param {string} queryId\n   * @return {!OperationSource}\n   */\n  static forServerTaggedQuery = function(queryId: string): OperationSource {\n    return new OperationSource(\n      false,\n      /*fromServer=*/ true,\n      queryId,\n      /*tagged=*/ true\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"script"}