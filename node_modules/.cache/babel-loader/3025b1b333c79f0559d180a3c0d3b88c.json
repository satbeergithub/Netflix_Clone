{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Implements the promise abstraction interface for external\n * (public SDK) packaging, which just passes through to the firebase-app impl.\n */\n/**\n * @template T\n * @param {function((function(T): void),\n *                  (function(!Error): void))} resolver\n */\nexport function make(resolver) {\n  return new Promise(resolver);\n}\n/**\n * @template T\n */\nexport function resolve(value) {\n  return Promise.resolve(value);\n}\nexport function reject(error) {\n  return Promise.reject(error);\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA;;;;AAKA;;;;;AAMA,OAAM,cACJA,QAAgE;EAEhE,OAAO,IAAIC,OAAO,CAACD,QAAQ,CAAC;AAC9B;AAEA;;;AAGA,OAAM,iBAAqBE,KAAQ;EACjC,OAAOD,OAAO,CAACE,OAAO,CAACD,KAAK,CAAe;AAC7C;AAEA,OAAM,gBAAoBE,KAAY;EACpC,OAAOH,OAAO,CAACI,MAAM,CAACD,KAAK,CAAe;AAC5C","names":["resolver","Promise","value","resolve","error","reject"],"sources":["../src/implementation/promise_external.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implements the promise abstraction interface for external\n * (public SDK) packaging, which just passes through to the firebase-app impl.\n */\n\n/**\n * @template T\n * @param {function((function(T): void),\n *                  (function(!Error): void))} resolver\n */\n\nexport function make<T>(\n  resolver: (p1: (p1: T) => void, p2: (p1: Error) => void) => void\n): Promise<T> {\n  return new Promise(resolver);\n}\n\n/**\n * @template T\n */\nexport function resolve<T>(value: T): Promise<T> {\n  return Promise.resolve(value) as Promise<T>;\n}\n\nexport function reject<T>(error: Error): Promise<T> {\n  return Promise.reject(error) as Promise<T>;\n}\n"]},"metadata":{},"sourceType":"module"}