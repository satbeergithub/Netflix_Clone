{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar hash_1 = require(\"./hash\");\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @extends {Hash}\n * @final\n * @struct\n */\nvar Sha1 = /** @class */function (_super) {\n  __extends(Sha1, _super);\n  function Sha1() {\n    var _this = _super.call(this) || this;\n    /**\n     * Holds the previous values of accumulated variables a-e in the compress_\n     * function.\n     * @type {!Array<number>}\n     * @private\n     */\n    _this.chain_ = [];\n    /**\n     * A buffer holding the partially computed hash result.\n     * @type {!Array<number>}\n     * @private\n     */\n    _this.buf_ = [];\n    /**\n     * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n     * as the message schedule in the docs.\n     * @type {!Array<number>}\n     * @private\n     */\n    _this.W_ = [];\n    /**\n     * Contains data needed to pad messages less than 64 bytes.\n     * @type {!Array<number>}\n     * @private\n     */\n    _this.pad_ = [];\n    /**\n     * @private {number}\n     */\n    _this.inbuf_ = 0;\n    /**\n     * @private {number}\n     */\n    _this.total_ = 0;\n    _this.blockSize = 512 / 8;\n    _this.pad_[0] = 128;\n    for (var i = 1; i < _this.blockSize; ++i) {\n      _this.pad_[i] = 0;\n    }\n    _this.reset();\n    return _this;\n  }\n  Sha1.prototype.reset = function () {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  };\n  /**\n   * Internal compress helper function.\n   * @param {!Array<number>|!Uint8Array|string} buf Block to compress.\n   * @param {number=} opt_offset Offset of the block in the buffer.\n   * @private\n   */\n  Sha1.prototype.compress_ = function (buf, opt_offset) {\n    if (!opt_offset) {\n      opt_offset = 0;\n    }\n    var W = this.W_;\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (var i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] = buf.charCodeAt(opt_offset) << 24 | buf.charCodeAt(opt_offset + 1) << 16 | buf.charCodeAt(opt_offset + 2) << 8 | buf.charCodeAt(opt_offset + 3);\n        opt_offset += 4;\n      }\n    } else {\n      for (var i = 0; i < 16; i++) {\n        W[i] = buf[opt_offset] << 24 | buf[opt_offset + 1] << 16 | buf[opt_offset + 2] << 8 | buf[opt_offset + 3];\n        opt_offset += 4;\n      }\n    }\n    // expand to 80 words\n    for (var i = 16; i < 80; i++) {\n      var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = (t << 1 | t >>> 31) & 0xffffffff;\n    }\n    var a = this.chain_[0];\n    var b = this.chain_[1];\n    var c = this.chain_[2];\n    var d = this.chain_[3];\n    var e = this.chain_[4];\n    var f, k;\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (var i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ b & (c ^ d);\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = b & c | d & (b | c);\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n      var t = (a << 5 | a >>> 27) + f + e + k + W[i] & 0xffffffff;\n      e = d;\n      d = c;\n      c = (b << 30 | b >>> 2) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n    this.chain_[0] = this.chain_[0] + a & 0xffffffff;\n    this.chain_[1] = this.chain_[1] + b & 0xffffffff;\n    this.chain_[2] = this.chain_[2] + c & 0xffffffff;\n    this.chain_[3] = this.chain_[3] + d & 0xffffffff;\n    this.chain_[4] = this.chain_[4] + e & 0xffffffff;\n  };\n  Sha1.prototype.update = function (bytes, opt_length) {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n    if (opt_length === undefined) {\n      opt_length = bytes.length;\n    }\n    var lengthMinusBlock = opt_length - this.blockSize;\n    var n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    var buf = this.buf_;\n    var inbuf = this.inbuf_;\n    // The outer while loop should execute at most twice.\n    while (n < opt_length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf == 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n      if (typeof bytes === 'string') {\n        while (n < opt_length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf == this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < opt_length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf == this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n    this.inbuf_ = inbuf;\n    this.total_ += opt_length;\n  };\n  /** @override */\n  Sha1.prototype.digest = function () {\n    var digest = [];\n    var totalBits = this.total_ * 8;\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n    // Add # bits.\n    for (var i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n    var n = 0;\n    for (var i = 0; i < 5; i++) {\n      for (var j = 24; j >= 0; j -= 8) {\n        digest[n] = this.chain_[i] >> j & 255;\n        ++n;\n      }\n    }\n    return digest;\n  };\n  return Sha1;\n}(hash_1.Hash);\nexports.Sha1 = Sha1;","map":{"version":3,"mappings":"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","names":["__extends","_super","_this","blockSize","pad_","i","reset","Sha1","chain_","inbuf_","total_","buf","opt_offset","W","W_","charCodeAt","t","a","b","c","d","e","f","k","bytes","opt_length","undefined","length","lengthMinusBlock","n","buf_","inbuf","compress_","digest","totalBits","update","j","hash_1","exports"],"sources":["../src/sha1.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Hash } from './hash';\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @extends {Hash}\n * @final\n * @struct\n */\nexport class Sha1 extends Hash {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @type {!Array<number>}\n   * @private\n   */\n  private chain_: Array<number> = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @type {!Array<number>}\n   * @private\n   */\n  private buf_: Array<number> = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @type {!Array<number>}\n   * @private\n   */\n  private W_: Array<number> = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @type {!Array<number>}\n   * @private\n   */\n  private pad_: Array<number> = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  constructor() {\n    super();\n\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (var i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset() {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param {!Array<number>|!Uint8Array|string} buf Block to compress.\n   * @param {number=} opt_offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf, opt_offset?) {\n    if (!opt_offset) {\n      opt_offset = 0;\n    }\n\n    var W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (var i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(opt_offset) << 24) |\n          (buf.charCodeAt(opt_offset + 1) << 16) |\n          (buf.charCodeAt(opt_offset + 2) << 8) |\n          buf.charCodeAt(opt_offset + 3);\n        opt_offset += 4;\n      }\n    } else {\n      for (var i = 0; i < 16; i++) {\n        W[i] =\n          (buf[opt_offset] << 24) |\n          (buf[opt_offset + 1] << 16) |\n          (buf[opt_offset + 2] << 8) |\n          buf[opt_offset + 3];\n        opt_offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (var i = 16; i < 80; i++) {\n      var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    var a = this.chain_[0];\n    var b = this.chain_[1];\n    var c = this.chain_[2];\n    var d = this.chain_[3];\n    var e = this.chain_[4];\n    var f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (var i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes, opt_length?) {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (opt_length === undefined) {\n      opt_length = bytes.length;\n    }\n\n    var lengthMinusBlock = opt_length - this.blockSize;\n    var n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    var buf = this.buf_;\n    var inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < opt_length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf == 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < opt_length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf == this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < opt_length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf == this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += opt_length;\n  }\n\n  /** @override */\n  digest() {\n    var digest = [];\n    var totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (var i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    var n = 0;\n    for (var i = 0; i < 5; i++) {\n      for (var j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}