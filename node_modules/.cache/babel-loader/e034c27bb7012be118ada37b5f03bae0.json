{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nimport { ErrorFactory } from '@firebase/util';\nimport Errors from '../models/errors';\nimport TokenManager from '../models/token-manager';\nimport NOTIFICATION_PERMISSION from '../models/notification-permission';\nvar SENDER_ID_OPTION_NAME = 'messagingSenderId';\nvar ControllerInterface = /** @class */function () {\n  /**\n   * An interface of the Messaging Service API\n   * @param {!firebase.app.App} app\n   */\n  function ControllerInterface(app) {\n    var _this = this;\n    this.errorFactory_ = new ErrorFactory('messaging', 'Messaging', Errors.map);\n    if (!app.options[SENDER_ID_OPTION_NAME] || typeof app.options[SENDER_ID_OPTION_NAME] !== 'string') {\n      throw this.errorFactory_.create(Errors.codes.BAD_SENDER_ID);\n    }\n    this.messagingSenderId_ = app.options[SENDER_ID_OPTION_NAME];\n    this.tokenManager_ = new TokenManager();\n    this.app = app;\n    this.INTERNAL = {};\n    this.INTERNAL.delete = function () {\n      return _this.delete;\n    };\n  }\n  /**\n   * @export\n   * @return {Promise<string> | Promise<null>} Returns a promise that\n   * resolves to an FCM token.\n   */\n  ControllerInterface.prototype.getToken = function () {\n    var _this = this;\n    // Check with permissions\n    var currentPermission = this.getNotificationPermission_();\n    if (currentPermission !== NOTIFICATION_PERMISSION.granted) {\n      if (currentPermission === NOTIFICATION_PERMISSION.denied) {\n        return Promise.reject(this.errorFactory_.create(Errors.codes.NOTIFICATIONS_BLOCKED));\n      }\n      // We must wait for permission to be granted\n      return Promise.resolve(null);\n    }\n    return this.getSWRegistration_().then(function (registration) {\n      return _this.tokenManager_.getSavedToken(_this.messagingSenderId_, registration).then(function (token) {\n        if (token) {\n          return token;\n        }\n        return _this.tokenManager_.createToken(_this.messagingSenderId_, registration);\n      });\n    });\n  };\n  /**\n   * This method deletes tokens that the token manager looks after and then\n   * unregisters the push subscription if it exists.\n   * @export\n   * @param {string} token\n   * @return {Promise<void>}\n   */\n  ControllerInterface.prototype.deleteToken = function (token) {\n    var _this = this;\n    return this.tokenManager_.deleteToken(token).then(function () {\n      return _this.getSWRegistration_().then(function (registration) {\n        if (registration) {\n          return registration.pushManager.getSubscription();\n        }\n      }).then(function (subscription) {\n        if (subscription) {\n          return subscription.unsubscribe();\n        }\n      });\n    });\n  };\n  ControllerInterface.prototype.getSWRegistration_ = function () {\n    throw this.errorFactory_.create(Errors.codes.SHOULD_BE_INHERITED);\n  };\n  //\n  // The following methods should only be available in the window.\n  //\n  ControllerInterface.prototype.requestPermission = function () {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  };\n  /**\n   * @export\n   * @param {!ServiceWorkerRegistration} registration\n   */\n  ControllerInterface.prototype.useServiceWorker = function (registration) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  };\n  /**\n   * @export\n   * @param {!firebase.Observer|function(*)} nextOrObserver\n   * @param {function(!Error)=} optError\n   * @param {function()=} optCompleted\n   * @return {!function()}\n   */\n  ControllerInterface.prototype.onMessage = function (nextOrObserver, optError, optCompleted) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  };\n  /**\n   * @export\n   * @param {!firebase.Observer|function()} nextOrObserver An observer object\n   * or a function triggered on token refresh.\n   * @param {function(!Error)=} optError Optional A function\n   * triggered on token refresh error.\n   * @param {function()=} optCompleted Optional function triggered when the\n   * observer is removed.\n   * @return {!function()} The unsubscribe function for the observer.\n   */\n  ControllerInterface.prototype.onTokenRefresh = function (nextOrObserver, optError, optCompleted) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  };\n  //\n  // The following methods are used by the service worker only.\n  //\n  /**\n   * @export\n   * @param {function(Object)} callback\n   */\n  ControllerInterface.prototype.setBackgroundMessageHandler = function (callback) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_SW);\n  };\n  //\n  // The following methods are used by the service themselves and not exposed\n  // publicly or not expected to be used by developers.\n  //\n  /**\n   * This method is required to adhere to the Firebase interface.\n   * It closes any currently open indexdb database connections.\n   */\n  ControllerInterface.prototype.delete = function () {\n    return this.tokenManager_.closeDatabase();\n  };\n  /**\n   * Returns the current Notification Permission state.\n   * @private\n   * @return {string} The currenct permission state.\n   */\n  ControllerInterface.prototype.getNotificationPermission_ = function () {\n    return Notification.permission;\n  };\n  /**\n   * @protected\n   * @returns {TokenManager}\n   */\n  ControllerInterface.prototype.getTokenManager = function () {\n    return this.tokenManager_;\n  };\n  return ControllerInterface;\n}();\nexport default ControllerInterface;","map":{"version":3,"mappings":"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","names":["ErrorFactory","Errors","TokenManager","NOTIFICATION_PERMISSION","SENDER_ID_OPTION_NAME","app","errorFactory_","map","options","create","codes","BAD_SENDER_ID","messagingSenderId_","tokenManager_","INTERNAL","delete","ControllerInterface","currentPermission","getNotificationPermission_","granted","denied","Promise","reject","NOTIFICATIONS_BLOCKED","resolve","getSWRegistration_","then","_this","getSavedToken","registration","token","createToken","deleteToken","pushManager","getSubscription","subscription","unsubscribe","SHOULD_BE_INHERITED","AVAILABLE_IN_WINDOW","nextOrObserver","optError","optCompleted","callback","AVAILABLE_IN_SW","closeDatabase","Notification","permission"],"sources":["../src/controllers/controller-interface.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nimport { ErrorFactory } from '@firebase/util';\nimport Errors from '../models/errors';\nimport TokenManager from '../models/token-manager';\nimport NOTIFICATION_PERMISSION from '../models/notification-permission';\n\nconst SENDER_ID_OPTION_NAME = 'messagingSenderId';\n\nexport default class ControllerInterface {\n  public app;\n  public INTERNAL;\n  protected errorFactory_;\n  private messagingSenderId_: string;\n  private tokenManager_: TokenManager;\n\n  /**\n   * An interface of the Messaging Service API\n   * @param {!firebase.app.App} app\n   */\n  constructor(app) {\n    this.errorFactory_ = new ErrorFactory('messaging', 'Messaging', Errors.map);\n\n    if (\n      !app.options[SENDER_ID_OPTION_NAME] ||\n      typeof app.options[SENDER_ID_OPTION_NAME] !== 'string'\n    ) {\n      throw this.errorFactory_.create(Errors.codes.BAD_SENDER_ID);\n    }\n\n    this.messagingSenderId_ = app.options[SENDER_ID_OPTION_NAME];\n\n    this.tokenManager_ = new TokenManager();\n\n    this.app = app;\n    this.INTERNAL = {};\n    this.INTERNAL.delete = () => this.delete;\n  }\n\n  /**\n   * @export\n   * @return {Promise<string> | Promise<null>} Returns a promise that\n   * resolves to an FCM token.\n   */\n  getToken() {\n    // Check with permissions\n    const currentPermission = this.getNotificationPermission_();\n    if (currentPermission !== NOTIFICATION_PERMISSION.granted) {\n      if (currentPermission === NOTIFICATION_PERMISSION.denied) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.NOTIFICATIONS_BLOCKED)\n        );\n      }\n\n      // We must wait for permission to be granted\n      return Promise.resolve(null);\n    }\n\n    return this.getSWRegistration_().then(registration => {\n      return this.tokenManager_\n        .getSavedToken(this.messagingSenderId_, registration)\n        .then(token => {\n          if (token) {\n            return token;\n          }\n\n          return this.tokenManager_.createToken(\n            this.messagingSenderId_,\n            registration\n          );\n        });\n    });\n  }\n\n  /**\n   * This method deletes tokens that the token manager looks after and then\n   * unregisters the push subscription if it exists.\n   * @export\n   * @param {string} token\n   * @return {Promise<void>}\n   */\n  deleteToken(token) {\n    return this.tokenManager_.deleteToken(token).then(() => {\n      return this.getSWRegistration_()\n        .then(registration => {\n          if (registration) {\n            return registration.pushManager.getSubscription();\n          }\n        })\n        .then(subscription => {\n          if (subscription) {\n            return subscription.unsubscribe();\n          }\n        });\n    });\n  }\n\n  getSWRegistration_(): Promise<ServiceWorkerRegistration> {\n    throw this.errorFactory_.create(Errors.codes.SHOULD_BE_INHERITED);\n  }\n\n  //\n  // The following methods should only be available in the window.\n  //\n\n  requestPermission() {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * @export\n   * @param {!ServiceWorkerRegistration} registration\n   */\n  useServiceWorker(registration) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * @export\n   * @param {!firebase.Observer|function(*)} nextOrObserver\n   * @param {function(!Error)=} optError\n   * @param {function()=} optCompleted\n   * @return {!function()}\n   */\n  onMessage(nextOrObserver, optError, optCompleted) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * @export\n   * @param {!firebase.Observer|function()} nextOrObserver An observer object\n   * or a function triggered on token refresh.\n   * @param {function(!Error)=} optError Optional A function\n   * triggered on token refresh error.\n   * @param {function()=} optCompleted Optional function triggered when the\n   * observer is removed.\n   * @return {!function()} The unsubscribe function for the observer.\n   */\n  onTokenRefresh(nextOrObserver, optError, optCompleted) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  }\n\n  //\n  // The following methods are used by the service worker only.\n  //\n\n  /**\n   * @export\n   * @param {function(Object)} callback\n   */\n  setBackgroundMessageHandler(callback) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_SW);\n  }\n\n  //\n  // The following methods are used by the service themselves and not exposed\n  // publicly or not expected to be used by developers.\n  //\n\n  /**\n   * This method is required to adhere to the Firebase interface.\n   * It closes any currently open indexdb database connections.\n   */\n  delete() {\n    return this.tokenManager_.closeDatabase();\n  }\n\n  /**\n   * Returns the current Notification Permission state.\n   * @private\n   * @return {string} The currenct permission state.\n   */\n  getNotificationPermission_() {\n    return (Notification as any).permission;\n  }\n\n  /**\n   * @protected\n   * @returns {TokenManager}\n   */\n  getTokenManager() {\n    return this.tokenManager_;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}