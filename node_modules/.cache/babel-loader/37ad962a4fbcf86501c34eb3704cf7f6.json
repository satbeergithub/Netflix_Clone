{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport ControllerInterface from './controller-interface';\nimport Errors from '../models/errors';\nimport WorkerPageMessage from '../models/worker-page-message';\nimport FCMDetails from '../models/fcm-details';\nvar FCM_MSG = 'FCM_MSG';\nvar SWController = /** @class */function (_super) {\n  __extends(SWController, _super);\n  function SWController(app) {\n    var _this = _super.call(this, app) || this;\n    self.addEventListener('push', function (e) {\n      return _this.onPush_(e);\n    }, false);\n    self.addEventListener('pushsubscriptionchange', function (e) {\n      return _this.onSubChange_(e);\n    }, false);\n    self.addEventListener('notificationclick', function (e) {\n      return _this.onNotificationClick_(e);\n    }, false);\n    /**\n     * @private\n     * @type {function(Object)|null}\n     */\n    _this.bgMessageHandler_ = null;\n    return _this;\n  }\n  /**\n   * A handler for push events that shows notifications based on the content of\n   * the payload.\n   *\n   * The payload must be a JSON-encoded Object with a `notification` key. The\n   * value of the `notification` property will be used as the NotificationOptions\n   * object passed to showNotification. Additionally, the `title` property of the\n   * notification object will be used as the title.\n   *\n   * If there is no notification data in the payload then no notification will be\n   * shown.\n   * @private\n   */\n  SWController.prototype.onPush_ = function (event) {\n    var _this = this;\n    var msgPayload;\n    try {\n      msgPayload = event.data.json();\n    } catch (err) {\n      // Not JSON so not an FCM message\n      return;\n    }\n    var handleMsgPromise = this.hasVisibleClients_().then(function (hasVisibleClients) {\n      if (hasVisibleClients) {\n        // Do not need to show a notification.\n        if (msgPayload.notification || _this.bgMessageHandler_) {\n          // Send to page\n          return _this.sendMessageToWindowClients_(msgPayload);\n        }\n        return;\n      }\n      var notificationDetails = _this.getNotificationData_(msgPayload);\n      if (notificationDetails) {\n        var notificationTitle = notificationDetails.title || '';\n        return self.registration.showNotification(notificationTitle, notificationDetails);\n      } else if (_this.bgMessageHandler_) {\n        return _this.bgMessageHandler_(msgPayload);\n      }\n    });\n    event.waitUntil(handleMsgPromise);\n  };\n  /**\n   * @private\n   */\n  SWController.prototype.onSubChange_ = function (event) {\n    var _this = this;\n    var promiseChain = this.getToken().then(function (token) {\n      if (!token) {\n        // We can't resubscribe if we don't have an FCM token for this scope.\n        throw _this.errorFactory_.create(Errors.codes.NO_FCM_TOKEN_FOR_RESUBSCRIBE);\n      }\n      var tokenDetails = null;\n      var tokenManager = _this.getTokenManager();\n      return tokenManager.getTokenDetailsFromToken(token).then(function (details) {\n        tokenDetails = details;\n        if (!tokenDetails) {\n          throw _this.errorFactory_.create(Errors.codes.INVALID_SAVED_TOKEN);\n        }\n        // Attempt to get a new subscription\n        return self.registration.pushManager.subscribe(FCMDetails.SUBSCRIPTION_OPTIONS);\n      }).then(function (newSubscription) {\n        // Send new subscription to FCM.\n        return tokenManager.subscribeToFCM(tokenDetails.fcmSenderId, newSubscription, tokenDetails.fcmPushSet);\n      }).catch(function (err) {\n        // The best thing we can do is log this to the terminal so\n        // developers might notice the error.\n        return tokenManager.deleteToken(tokenDetails.fcmToken).then(function () {\n          throw _this.errorFactory_.create(Errors.codes.UNABLE_TO_RESUBSCRIBE, {\n            message: err\n          });\n        });\n      });\n    });\n    event.waitUntil(promiseChain);\n  };\n  /**\n   * @private\n   */\n  SWController.prototype.onNotificationClick_ = function (event) {\n    var _this = this;\n    if (!(event.notification && event.notification.data && event.notification.data[FCM_MSG])) {\n      // Not an FCM notification, do nothing.\n      return;\n    }\n    // Prevent other listeners from receiving the event\n    event.stopImmediatePropagation();\n    event.notification.close();\n    var msgPayload = event.notification.data[FCM_MSG];\n    var clickAction = msgPayload['notification']['click_action'];\n    if (!clickAction) {\n      // Nothing to do.\n      return;\n    }\n    var promiseChain = this.getWindowClient_(clickAction).then(function (windowClient) {\n      if (!windowClient) {\n        // Unable to find window client so need to open one.\n        return self.clients.openWindow(clickAction);\n      }\n      return windowClient;\n    }).then(function (windowClient) {\n      if (!windowClient) {\n        // Window Client will not be returned if it's for a third party origin.\n        return;\n      }\n      // Delete notification data from payload before sending to the page.\n      var notificationData = msgPayload['notification'];\n      delete msgPayload['notification'];\n      var internalMsg = WorkerPageMessage.createNewMsg(WorkerPageMessage.TYPES_OF_MSG.NOTIFICATION_CLICKED, msgPayload);\n      // Attempt to send a message to the client to handle the data\n      // Is affected by: https://github.com/slightlyoff/ServiceWorker/issues/728\n      return _this.attemptToMessageClient_(windowClient, internalMsg);\n    });\n    event.waitUntil(promiseChain);\n  };\n  /**\n   * @private\n   * @param {Object} msgPayload\n   * @return {NotificationOptions|undefined}\n   */\n  SWController.prototype.getNotificationData_ = function (msgPayload) {\n    if (!msgPayload) {\n      return;\n    }\n    if (typeof msgPayload.notification !== 'object') {\n      return;\n    }\n    var notificationInformation = Object.assign({}, msgPayload.notification);\n    // Put the message payload under FCM_MSG name so we can identify the\n    // notification as being an FCM notification vs a notification from\n    // somewhere else (i.e. normal web push or developer generated\n    // notification).\n    notificationInformation['data'] = (_a = {}, _a[FCM_MSG] = msgPayload, _a);\n    return notificationInformation;\n    var _a;\n  };\n  /**\n   * Calling setBackgroundMessageHandler will opt in to some specific\n   * behaviours.\n   * 1.) If a notification doesn't need to be shown due to a window already\n   * being visible, then push messages will be sent to the page.\n   * 2.) If a notification needs to be shown, and the message contains no\n   * notification data this method will be called\n   * and the promise it returns will be passed to event.waitUntil.\n   * If you do not set this callback then all push messages will let and the\n   * developer can handle them in a their own 'push' event callback\n   * @export\n   * @param {function(Object)} callback The callback to be called when a push\n   * message is received and a notification must be shown. The callback will\n   * be given the data from the push message.\n   */\n  SWController.prototype.setBackgroundMessageHandler = function (callback) {\n    if (callback && typeof callback !== 'function') {\n      throw this.errorFactory_.create(Errors.codes.BG_HANDLER_FUNCTION_EXPECTED);\n    }\n    this.bgMessageHandler_ = callback;\n  };\n  /**\n   * @private\n   * @param {string} url The URL to look for when focusing a client.\n   * @return {Object} Returns an existing window client or a newly opened\n   * WindowClient.\n   */\n  SWController.prototype.getWindowClient_ = function (url) {\n    // Use URL to normalize the URL when comparing to windowClients.\n    // This at least handles whether to include trailing slashes or not\n    var parsedURL = new URL(url).href;\n    return self.clients.matchAll({\n      type: 'window',\n      includeUncontrolled: true\n    }).then(function (clientList) {\n      var suitableClient = null;\n      for (var i = 0; i < clientList.length; i++) {\n        var parsedClientUrl = new URL(clientList[i].url).href;\n        if (parsedClientUrl === parsedURL) {\n          suitableClient = clientList[i];\n          break;\n        }\n      }\n      if (suitableClient) {\n        suitableClient.focus();\n        return suitableClient;\n      }\n    });\n  };\n  /**\n   * This message will attempt to send the message to a window client.\n   * @private\n   * @param {Object} client The WindowClient to send the message to.\n   * @param {Object} message The message to send to the client.\n   * @returns {Promise} Returns a promise that resolves after sending the\n   * message. This does not guarantee that the message was successfully\n   * received.\n   */\n  SWController.prototype.attemptToMessageClient_ = function (client, message) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      if (!client) {\n        return reject(_this.errorFactory_.create(Errors.codes.NO_WINDOW_CLIENT_TO_MSG));\n      }\n      client.postMessage(message);\n      resolve();\n    });\n  };\n  /**\n   * @private\n   * @returns {Promise<boolean>} If there is currently a visible WindowClient,\n   * this method will resolve to true, otherwise false.\n   */\n  SWController.prototype.hasVisibleClients_ = function () {\n    return self.clients.matchAll({\n      type: 'window',\n      includeUncontrolled: true\n    }).then(function (clientList) {\n      return clientList.some(function (client) {\n        return client.visibilityState === 'visible';\n      });\n    });\n  };\n  /**\n   * @private\n   * @param {Object} msgPayload The data from the push event that should be sent\n   * to all available pages.\n   * @returns {Promise} Returns a promise that resolves once the message\n   * has been sent to all WindowClients.\n   */\n  SWController.prototype.sendMessageToWindowClients_ = function (msgPayload) {\n    var _this = this;\n    return self.clients.matchAll({\n      type: 'window',\n      includeUncontrolled: true\n    }).then(function (clientList) {\n      var internalMsg = WorkerPageMessage.createNewMsg(WorkerPageMessage.TYPES_OF_MSG.PUSH_MSG_RECEIVED, msgPayload);\n      return Promise.all(clientList.map(function (client) {\n        return _this.attemptToMessageClient_(client, internalMsg);\n      }));\n    });\n  };\n  /**\n   * This will register the default service worker and return the registration.\n   * @private\n   * @return {Promise<!ServiceWorkerRegistration>} The service worker\n   * registration to be used for the push service.\n   */\n  SWController.prototype.getSWRegistration_ = function () {\n    return Promise.resolve(self.registration);\n  };\n  return SWController;\n}(ControllerInterface);\nexport default SWController;","map":{"version":3,"mappings":"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","names":["ControllerInterface","Errors","WorkerPageMessage","FCMDetails","FCM_MSG","__extends","app","_super","self","addEventListener","onPush_","e","onSubChange_","onNotificationClick_","_this","bgMessageHandler_","SWController","event","msgPayload","data","json","err","handleMsgPromise","hasVisibleClients_","then","hasVisibleClients","notification","sendMessageToWindowClients_","notificationDetails","getNotificationData_","notificationTitle","title","registration","showNotification","waitUntil","promiseChain","getToken","token","errorFactory_","create","codes","NO_FCM_TOKEN_FOR_RESUBSCRIBE","tokenDetails","tokenManager","getTokenManager","getTokenDetailsFromToken","details","INVALID_SAVED_TOKEN","pushManager","subscribe","SUBSCRIPTION_OPTIONS","subscribeToFCM","fcmSenderId","newSubscription","fcmPushSet","catch","deleteToken","fcmToken","UNABLE_TO_RESUBSCRIBE","message","stopImmediatePropagation","close","clickAction","getWindowClient_","windowClient","clients","openWindow","notificationData","internalMsg","createNewMsg","TYPES_OF_MSG","NOTIFICATION_CLICKED","attemptToMessageClient_","notificationInformation","Object","assign","_a","callback","BG_HANDLER_FUNCTION_EXPECTED","url","parsedURL","URL","href","matchAll","type","includeUncontrolled","suitableClient","i","clientList","length","parsedClientUrl","focus","client","Promise","resolve","reject","NO_WINDOW_CLIENT_TO_MSG","postMessage","some","visibilityState","PUSH_MSG_RECEIVED","all","map"],"sources":["../src/controllers/sw-controller.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nimport ControllerInterface from './controller-interface';\nimport Errors from '../models/errors';\nimport WorkerPageMessage from '../models/worker-page-message';\nimport FCMDetails from '../models/fcm-details';\n\nconst FCM_MSG = 'FCM_MSG';\n\nexport default class SWController extends ControllerInterface {\n  private bgMessageHandler_: (input: Object) => Promise<any>;\n\n  constructor(app) {\n    super(app);\n\n    self.addEventListener('push', e => this.onPush_(e), false);\n    self.addEventListener(\n      'pushsubscriptionchange',\n      e => this.onSubChange_(e),\n      false\n    );\n    self.addEventListener(\n      'notificationclick',\n      e => this.onNotificationClick_(e),\n      false\n    );\n\n    /**\n     * @private\n     * @type {function(Object)|null}\n     */\n    this.bgMessageHandler_ = null;\n  }\n\n  /**\n   * A handler for push events that shows notifications based on the content of\n   * the payload.\n   *\n   * The payload must be a JSON-encoded Object with a `notification` key. The\n   * value of the `notification` property will be used as the NotificationOptions\n   * object passed to showNotification. Additionally, the `title` property of the\n   * notification object will be used as the title.\n   *\n   * If there is no notification data in the payload then no notification will be\n   * shown.\n   * @private\n   */\n  onPush_(event) {\n    let msgPayload;\n    try {\n      msgPayload = event.data.json();\n    } catch (err) {\n      // Not JSON so not an FCM message\n      return;\n    }\n\n    const handleMsgPromise = this.hasVisibleClients_().then(\n      hasVisibleClients => {\n        if (hasVisibleClients) {\n          // Do not need to show a notification.\n          if (msgPayload.notification || this.bgMessageHandler_) {\n            // Send to page\n            return this.sendMessageToWindowClients_(msgPayload);\n          }\n          return;\n        }\n\n        const notificationDetails = this.getNotificationData_(msgPayload);\n        if (notificationDetails) {\n          const notificationTitle = notificationDetails.title || '';\n          return (self as any).registration.showNotification(\n            notificationTitle,\n            notificationDetails\n          );\n        } else if (this.bgMessageHandler_) {\n          return this.bgMessageHandler_(msgPayload);\n        }\n      }\n    );\n\n    event.waitUntil(handleMsgPromise);\n  }\n\n  /**\n   * @private\n   */\n  onSubChange_(event) {\n    const promiseChain = this.getToken().then(token => {\n      if (!token) {\n        // We can't resubscribe if we don't have an FCM token for this scope.\n        throw this.errorFactory_.create(\n          Errors.codes.NO_FCM_TOKEN_FOR_RESUBSCRIBE\n        );\n      }\n\n      let tokenDetails = null;\n      const tokenManager = this.getTokenManager();\n      return tokenManager\n        .getTokenDetailsFromToken(token)\n        .then(details => {\n          tokenDetails = details;\n          if (!tokenDetails) {\n            throw this.errorFactory_.create(Errors.codes.INVALID_SAVED_TOKEN);\n          }\n\n          // Attempt to get a new subscription\n          return (self as any).registration.pushManager.subscribe(\n            FCMDetails.SUBSCRIPTION_OPTIONS\n          );\n        })\n        .then(newSubscription => {\n          // Send new subscription to FCM.\n          return tokenManager.subscribeToFCM(\n            tokenDetails.fcmSenderId,\n            newSubscription,\n            tokenDetails.fcmPushSet\n          );\n        })\n        .catch(err => {\n          // The best thing we can do is log this to the terminal so\n          // developers might notice the error.\n          return tokenManager.deleteToken(tokenDetails.fcmToken).then(() => {\n            throw this.errorFactory_.create(\n              Errors.codes.UNABLE_TO_RESUBSCRIBE,\n              {\n                message: err\n              }\n            );\n          });\n        });\n    });\n\n    event.waitUntil(promiseChain);\n  }\n\n  /**\n   * @private\n   */\n  onNotificationClick_(event) {\n    if (\n      !(\n        event.notification &&\n        event.notification.data &&\n        event.notification.data[FCM_MSG]\n      )\n    ) {\n      // Not an FCM notification, do nothing.\n      return;\n    }\n\n    // Prevent other listeners from receiving the event\n    event.stopImmediatePropagation();\n\n    event.notification.close();\n\n    const msgPayload = event.notification.data[FCM_MSG];\n    const clickAction = msgPayload['notification']['click_action'];\n    if (!clickAction) {\n      // Nothing to do.\n      return;\n    }\n\n    const promiseChain = this.getWindowClient_(clickAction)\n      .then(windowClient => {\n        if (!windowClient) {\n          // Unable to find window client so need to open one.\n          return (self as any).clients.openWindow(clickAction);\n        }\n        return windowClient;\n      })\n      .then(windowClient => {\n        if (!windowClient) {\n          // Window Client will not be returned if it's for a third party origin.\n          return;\n        }\n\n        // Delete notification data from payload before sending to the page.\n        const notificationData = msgPayload['notification'];\n        delete msgPayload['notification'];\n\n        const internalMsg = WorkerPageMessage.createNewMsg(\n          WorkerPageMessage.TYPES_OF_MSG.NOTIFICATION_CLICKED,\n          msgPayload\n        );\n        // Attempt to send a message to the client to handle the data\n        // Is affected by: https://github.com/slightlyoff/ServiceWorker/issues/728\n        return this.attemptToMessageClient_(windowClient, internalMsg);\n      });\n\n    event.waitUntil(promiseChain);\n  }\n\n  /**\n   * @private\n   * @param {Object} msgPayload\n   * @return {NotificationOptions|undefined}\n   */\n  getNotificationData_(msgPayload) {\n    if (!msgPayload) {\n      return;\n    }\n\n    if (typeof msgPayload.notification !== 'object') {\n      return;\n    }\n\n    const notificationInformation = Object.assign({}, msgPayload.notification);\n    // Put the message payload under FCM_MSG name so we can identify the\n    // notification as being an FCM notification vs a notification from\n    // somewhere else (i.e. normal web push or developer generated\n    // notification).\n    notificationInformation['data'] = {\n      [FCM_MSG]: msgPayload\n    };\n\n    return notificationInformation;\n  }\n\n  /**\n   * Calling setBackgroundMessageHandler will opt in to some specific\n   * behaviours.\n   * 1.) If a notification doesn't need to be shown due to a window already\n   * being visible, then push messages will be sent to the page.\n   * 2.) If a notification needs to be shown, and the message contains no\n   * notification data this method will be called\n   * and the promise it returns will be passed to event.waitUntil.\n   * If you do not set this callback then all push messages will let and the\n   * developer can handle them in a their own 'push' event callback\n   * @export\n   * @param {function(Object)} callback The callback to be called when a push\n   * message is received and a notification must be shown. The callback will\n   * be given the data from the push message.\n   */\n  setBackgroundMessageHandler(callback) {\n    if (callback && typeof callback !== 'function') {\n      throw this.errorFactory_.create(\n        Errors.codes.BG_HANDLER_FUNCTION_EXPECTED\n      );\n    }\n\n    this.bgMessageHandler_ = callback;\n  }\n\n  /**\n   * @private\n   * @param {string} url The URL to look for when focusing a client.\n   * @return {Object} Returns an existing window client or a newly opened\n   * WindowClient.\n   */\n  getWindowClient_(url) {\n    // Use URL to normalize the URL when comparing to windowClients.\n    // This at least handles whether to include trailing slashes or not\n    const parsedURL = new URL(url).href;\n\n    return (self as any).clients\n      .matchAll({\n        type: 'window',\n        includeUncontrolled: true\n      })\n      .then(clientList => {\n        let suitableClient = null;\n        for (let i = 0; i < clientList.length; i++) {\n          const parsedClientUrl = new URL(clientList[i].url).href;\n          if (parsedClientUrl === parsedURL) {\n            suitableClient = clientList[i];\n            break;\n          }\n        }\n\n        if (suitableClient) {\n          suitableClient.focus();\n          return suitableClient;\n        }\n      });\n  }\n\n  /**\n   * This message will attempt to send the message to a window client.\n   * @private\n   * @param {Object} client The WindowClient to send the message to.\n   * @param {Object} message The message to send to the client.\n   * @returns {Promise} Returns a promise that resolves after sending the\n   * message. This does not guarantee that the message was successfully\n   * received.\n   */\n  attemptToMessageClient_(client, message) {\n    return new Promise((resolve, reject) => {\n      if (!client) {\n        return reject(\n          this.errorFactory_.create(Errors.codes.NO_WINDOW_CLIENT_TO_MSG)\n        );\n      }\n\n      client.postMessage(message);\n      resolve();\n    });\n  }\n\n  /**\n   * @private\n   * @returns {Promise<boolean>} If there is currently a visible WindowClient,\n   * this method will resolve to true, otherwise false.\n   */\n  hasVisibleClients_() {\n    return (self as any).clients\n      .matchAll({\n        type: 'window',\n        includeUncontrolled: true\n      })\n      .then(clientList => {\n        return clientList.some(client => client.visibilityState === 'visible');\n      });\n  }\n\n  /**\n   * @private\n   * @param {Object} msgPayload The data from the push event that should be sent\n   * to all available pages.\n   * @returns {Promise} Returns a promise that resolves once the message\n   * has been sent to all WindowClients.\n   */\n  sendMessageToWindowClients_(msgPayload) {\n    return (self as any).clients\n      .matchAll({\n        type: 'window',\n        includeUncontrolled: true\n      })\n      .then(clientList => {\n        const internalMsg = WorkerPageMessage.createNewMsg(\n          WorkerPageMessage.TYPES_OF_MSG.PUSH_MSG_RECEIVED,\n          msgPayload\n        );\n\n        return Promise.all(\n          clientList.map(client => {\n            return this.attemptToMessageClient_(client, internalMsg);\n          })\n        );\n      });\n  }\n\n  /**\n   * This will register the default service worker and return the registration.\n   * @private\n   * @return {Promise<!ServiceWorkerRegistration>} The service worker\n   * registration to be used for the push service.\n   */\n  getSWRegistration_() {\n    return Promise.resolve((self as any).registration);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}