{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar util_1 = require(\"@firebase/util\");\nvar EventEmitter_1 = require(\"./EventEmitter\");\nvar util_2 = require(\"@firebase/util\");\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n *\n * @extends {EventEmitter}\n */\nvar OnlineMonitor = /** @class */function (_super) {\n  __extends(OnlineMonitor, _super);\n  function OnlineMonitor() {\n    var _this = _super.call(this, ['online']) || this;\n    _this.online_ = true;\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !util_2.isMobileCordova()) {\n      window.addEventListener('online', function () {\n        if (!_this.online_) {\n          _this.online_ = true;\n          _this.trigger('online', true);\n        }\n      }, false);\n      window.addEventListener('offline', function () {\n        if (_this.online_) {\n          _this.online_ = false;\n          _this.trigger('online', false);\n        }\n      }, false);\n    }\n    return _this;\n  }\n  OnlineMonitor.getInstance = function () {\n    return new OnlineMonitor();\n  };\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  OnlineMonitor.prototype.getInitialEvent = function (eventType) {\n    util_1.assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  };\n  /**\n   * @return {boolean}\n   */\n  OnlineMonitor.prototype.currentlyOnline = function () {\n    return this.online_;\n  };\n  return OnlineMonitor;\n}(EventEmitter_1.EventEmitter);\nexports.OnlineMonitor = OnlineMonitor;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AAEA;;;;;;;;;AASA;EAAmCA;EAOjC;IAAA,YACEC,kBAAM,CAAC,QAAQ,CAAC,CAAC;IAPXC,aAAO,GAAG,IAAI;IASpB;IACA;IACA;IACA;IACA,IACE,OAAOC,MAAM,KAAK,WAAW,IAC7B,OAAOA,MAAM,CAACC,gBAAgB,KAAK,WAAW,IAC9C,CAACC,sBAAe,EAClB,EAAE;MACAF,MAAM,CAACC,gBAAgB,CACrB,QAAQ,EACR;QACE,IAAI,CAACF,KAAI,CAACI,OAAO,EAAE;UACjBJ,KAAI,CAACI,OAAO,GAAG,IAAI;UACnBJ,KAAI,CAACK,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC;QAC9B;MACF,CAAC,EACD,KAAK,CACN;MAEDJ,MAAM,CAACC,gBAAgB,CACrB,SAAS,EACT;QACE,IAAIF,KAAI,CAACI,OAAO,EAAE;UAChBJ,KAAI,CAACI,OAAO,GAAG,KAAK;UACpBJ,KAAI,CAACK,OAAO,CAAC,QAAQ,EAAE,KAAK,CAAC;QAC/B;MACF,CAAC,EACD,KAAK,CACN;IACH;;EACF;EAtCOC,yBAAW,GAAlB;IACE,OAAO,IAAIA,aAAa,EAAE;EAC5B,CAAC;EAsCD;;;;EAIAA,uCAAe,GAAf,UAAgBC,SAAiB;IAC/BC,aAAM,CAACD,SAAS,KAAK,QAAQ,EAAE,sBAAsB,GAAGA,SAAS,CAAC;IAClE,OAAO,CAAC,IAAI,CAACH,OAAO,CAAC;EACvB,CAAC;EAED;;;EAGAE,uCAAe,GAAf;IACE,OAAO,IAAI,CAACF,OAAO;EACrB,CAAC;EACH,oBAAC;AAAD,CA1DA,CAAmCK,2BAAY;AAAlCC","names":["__extends","_super","_this","window","addEventListener","util_2","online_","trigger","OnlineMonitor","eventType","util_1","EventEmitter_1","exports"],"sources":["../src/core/util/OnlineMonitor.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { EventEmitter } from './EventEmitter';\nimport { isMobileCordova } from '@firebase/util';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n *\n * @extends {EventEmitter}\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  /**\n   * @return {boolean}\n   */\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}