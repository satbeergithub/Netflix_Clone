{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar util_1 = require(\"../../core/util/util\");\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n * @constructor\n */\nvar PacketReceiver = /** @class */function () {\n  /**\n   * @param onMessage_\n   */\n  function PacketReceiver(onMessage_) {\n    this.onMessage_ = onMessage_;\n    this.pendingResponses = [];\n    this.currentResponseNum = 0;\n    this.closeAfterResponse = -1;\n    this.onClose = null;\n  }\n  PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  };\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   * @param {number} requestNum\n   * @param {Array} data\n   */\n  PacketReceiver.prototype.handleResponse = function (requestNum, data) {\n    var _this = this;\n    this.pendingResponses[requestNum] = data;\n    var _loop_1 = function () {\n      var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\n      delete this_1.pendingResponses[this_1.currentResponseNum];\n      var _loop_2 = function (i) {\n        if (toProcess[i]) {\n          util_1.exceptionGuard(function () {\n            _this.onMessage_(toProcess[i]);\n          });\n        }\n      };\n      for (var i = 0; i < toProcess.length; ++i) {\n        _loop_2(i);\n      }\n      if (this_1.currentResponseNum === this_1.closeAfterResponse) {\n        if (this_1.onClose) {\n          this_1.onClose();\n          this_1.onClose = null;\n        }\n        return \"break\";\n      }\n      this_1.currentResponseNum++;\n    };\n    var this_1 = this;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      var state_1 = _loop_1();\n      if (state_1 === \"break\") break;\n    }\n  };\n  return PacketReceiver;\n}();\nexports.PacketReceiver = PacketReceiver;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAgBA;AAEA;;;;;AAKA;EAME;;;EAGA,wBAAoBA,UAA+B;IAA/B,eAAU,GAAVA,UAAU;IAR9B,qBAAgB,GAAU,EAAE;IAC5B,uBAAkB,GAAG,CAAC;IACtB,uBAAkB,GAAG,CAAC,CAAC;IACvB,YAAO,GAAwB,IAAI;EAKmB;EAEtDC,mCAAU,GAAV,UAAWC,WAAmB,EAAEC,QAAoB;IAClD,IAAI,CAACC,kBAAkB,GAAGF,WAAW;IACrC,IAAI,CAACG,OAAO,GAAGF,QAAQ;IACvB,IAAI,IAAI,CAACC,kBAAkB,GAAG,IAAI,CAACE,kBAAkB,EAAE;MACrD,IAAI,CAACD,OAAO,EAAE;MACd,IAAI,CAACA,OAAO,GAAG,IAAI;IACrB;EACF,CAAC;EAED;;;;;;;EAOAJ,uCAAc,GAAd,UAAeM,UAAkB,EAAEC,IAAW;IAA9C;IACE,IAAI,CAACC,gBAAgB,CAACF,UAAU,CAAC,GAAGC,IAAI;;MAEtC,IAAME,SAAS,GAAGC,OAAKF,gBAAgB,CAACE,OAAKL,kBAAkB,CAAC;MAChE,OAAOK,OAAKF,gBAAgB,CAACE,OAAKL,kBAAkB,CAAC;8BAC5CM,CAAC;QACR,IAAIF,SAAS,CAACE,CAAC,CAAC,EAAE;UAChBC,qBAAc,CAAC;YACbC,KAAI,CAACd,UAAU,CAACU,SAAS,CAACE,CAAC,CAAC,CAAC;UAC/B,CAAC,CAAC;QACJ;MACF,CAAC;MAND,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAACK,MAAM,EAAE,EAAEH,CAAC;gBAAhCA,CAAC;;MAOV,IAAID,OAAKL,kBAAkB,KAAKK,OAAKP,kBAAkB,EAAE;QACvD,IAAIO,OAAKN,OAAO,EAAE;UAChBM,OAAKN,OAAO,EAAE;UACdM,OAAKN,OAAO,GAAG,IAAI;QACrB;;MAEF;MACAM,OAAKL,kBAAkB,EAAE;IAC3B,CAAC;;IAlBD,OAAO,IAAI,CAACG,gBAAgB,CAAC,IAAI,CAACH,kBAAkB,CAAC;;;;EAmBvD,CAAC;EACH,qBAAC;AAAD,CAjDA,EAiDC;AAjDYU","names":["onMessage_","PacketReceiver","responseNum","callback","closeAfterResponse","onClose","currentResponseNum","requestNum","data","pendingResponses","toProcess","this_1","i","util_1","_this","length","exports"],"sources":["../src/realtime/polling/PacketReceiver.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n * @constructor\n */\nexport class PacketReceiver {\n  pendingResponses: any[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: Object) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   * @param {number} requestNum\n   * @param {Array} data\n   */\n  handleResponse(requestNum: number, data: any[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[this.currentResponseNum];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}