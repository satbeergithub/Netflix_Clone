{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Satbeer\\\\Desktop\\\\New folder\\\\src\\\\component\\\\homescreen\\\\Row.js\";\nimport React, { useState } from 'react';\nimport { useEffect } from 'react';\nimport './Row.css';\n// import axios from '../tmdbfile/localaxios'\nimport axios from 'axios';\nimport YouTube from 'react-youtube';\nfunction Row(_ref) {\n  let {\n    title,\n    isLargeRow,\n    fetchurl\n  } = _ref;\n  const [movies, setmovie] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  const image_url = 'https://image.tmdb.org/t/p/original/';\n  // Options for react-youtube\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  useEffect(() => {\n    async function fetchdata() {\n      try {\n        const res = await axios.get(`https://api.themoviedb.org/3${fetchurl}`);\n        console.log(res.data.results);\n        setmovie(res.data.results);\n      } catch (error) {\n        console.log(error);\n        alert(error.message);\n      }\n    }\n    fetchdata();\n  }, [fetchurl]);\n  const handleClick = async movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      var _trailerurl$data$resu;\n      let trailerurl = await axios.get(`https://api.themoviedb.org/3/movie/${movie.id}/videos?api_key=32ce6adcd8f4737faa4cf686afa6b000`);\n      setTrailerUrl((_trailerurl$data$resu = trailerurl.data.results[0]) === null || _trailerurl$data$resu === void 0 ? void 0 : _trailerurl$data$resu.key);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row_posters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, movies.map(movie => {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      src: `${image_url}${movie.poster_path}`,\n      className: `ri ${isLargeRow && 'large-image'}`,\n      alt: movie.name,\n      key: movie.id,\n      onClick: () => handleClick(movie),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 20\n      }\n    });\n  })), trailerUrl && /*#__PURE__*/React.createElement(YouTube, {\n    videoId: trailerUrl,\n    opts: opts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 22\n    }\n  }));\n}\nexport default Row;\n\n// // https://image.tmdb.org/t/p/original/\n// poster_path\n// useEffect(()=>{\n//   async function fetchdata(){\n//     try{\n//       const res = await axios.get('https://api.themoviedb.org/3/trending/all/week?api_key=32ce6adcd8f4737faa4cf686afa6b000&language=en-US')\n//       console.log(res.data.results);\n//       let d=res.data.results\n//       setmovie(res.data.results)\n//     } catch(error){\n//       console.log(error)\n//     }  \n//   }\n//   fetchdata();\n// },[])","map":{"version":3,"names":["React","useState","useEffect","axios","YouTube","Row","title","isLargeRow","fetchurl","movies","setmovie","trailerUrl","setTrailerUrl","image_url","opts","height","width","playerVars","autoplay","fetchdata","res","get","console","log","data","results","error","alert","message","handleClick","movie","trailerurl","id","key","map","poster_path","name"],"sources":["C:/Users/Satbeer/Desktop/New folder/src/component/homescreen/Row.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { useEffect } from 'react'\r\nimport './Row.css'\r\n// import axios from '../tmdbfile/localaxios'\r\nimport axios from 'axios'\r\nimport YouTube from 'react-youtube'\r\n\r\nfunction Row({title,isLargeRow,fetchurl}) {\r\n\r\n  const [movies,setmovie]=useState([])\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  const image_url ='https://image.tmdb.org/t/p/original/'\r\n    // Options for react-youtube\r\n    const opts = {\r\n      height: \"390\",\r\n      width: \"100%\",\r\n      playerVars: {\r\n        autoplay: 1,\r\n      },\r\n    };\r\n  \r\nuseEffect(()=>{\r\n  async function fetchdata(){\r\n    try{\r\n      const res = await axios.get(`https://api.themoviedb.org/3${fetchurl}`)\r\n      console.log(res.data.results);\r\n      setmovie(res.data.results)\r\n    } catch(error){\r\n      console.log(error)\r\n      alert(error.message)\r\n    }  \r\n  }\r\n  fetchdata();\r\n},[fetchurl])\r\n\r\nconst handleClick = async (movie) => {\r\n  if (trailerUrl) {\r\n    setTrailerUrl(\"\");\r\n  } else {\r\n    let trailerurl = await axios.get(`https://api.themoviedb.org/3/movie/${movie.id}/videos?api_key=32ce6adcd8f4737faa4cf686afa6b000`);\r\n    setTrailerUrl(trailerurl.data.results[0]?.key);\r\n  }\r\n};\r\n \r\n  return (\r\n    <div className='row'>\r\n      <h1>{title}</h1>\r\n      \r\n      <div className=\"row_posters\">\r\n        {\r\n          movies.map(movie=>{\r\n            return <img src={`${image_url}${movie.poster_path}`} className={`ri ${isLargeRow && 'large-image'}`}\r\n            alt={movie.name}\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)} />\r\n          })\r\n        }\r\n       \r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Row\r\n\r\n\r\n// // https://image.tmdb.org/t/p/original/\r\n// poster_path\r\n// useEffect(()=>{\r\n//   async function fetchdata(){\r\n//     try{\r\n//       const res = await axios.get('https://api.themoviedb.org/3/trending/all/week?api_key=32ce6adcd8f4737faa4cf686afa6b000&language=en-US')\r\n//       console.log(res.data.results);\r\n//       let d=res.data.results\r\n//       setmovie(res.data.results)\r\n//     } catch(error){\r\n//       console.log(error)\r\n//     }  \r\n//   }\r\n//   fetchdata();\r\n// },[])"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAO,WAAW;AAClB;AACA,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,eAAe;AAEnC,SAASC,GAAG,OAA8B;EAAA,IAA7B;IAACC,KAAK;IAACC,UAAU;IAACC;EAAQ,CAAC;EAEtC,MAAM,CAACC,MAAM,EAACC,QAAQ,CAAC,GAACT,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMY,SAAS,GAAE,sCAAsC;EACrD;EACA,MAAMC,IAAI,GAAG;IACXC,MAAM,EAAE,KAAK;IACbC,KAAK,EAAE,MAAM;IACbC,UAAU,EAAE;MACVC,QAAQ,EAAE;IACZ;EACF,CAAC;EAELhB,SAAS,CAAC,MAAI;IACZ,eAAeiB,SAAS,GAAE;MACxB,IAAG;QACD,MAAMC,GAAG,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAE,+BAA8Bb,QAAS,EAAC,CAAC;QACtEc,OAAO,CAACC,GAAG,CAACH,GAAG,CAACI,IAAI,CAACC,OAAO,CAAC;QAC7Bf,QAAQ,CAACU,GAAG,CAACI,IAAI,CAACC,OAAO,CAAC;MAC5B,CAAC,CAAC,OAAMC,KAAK,EAAC;QACZJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;QAClBC,KAAK,CAACD,KAAK,CAACE,OAAO,CAAC;MACtB;IACF;IACAT,SAAS,EAAE;EACb,CAAC,EAAC,CAACX,QAAQ,CAAC,CAAC;EAEb,MAAMqB,WAAW,GAAG,MAAOC,KAAK,IAAK;IACnC,IAAInB,UAAU,EAAE;MACdC,aAAa,CAAC,EAAE,CAAC;IACnB,CAAC,MAAM;MAAA;MACL,IAAImB,UAAU,GAAG,MAAM5B,KAAK,CAACkB,GAAG,CAAE,sCAAqCS,KAAK,CAACE,EAAG,kDAAiD,CAAC;MAClIpB,aAAa,0BAACmB,UAAU,CAACP,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,0DAA1B,sBAA4BQ,GAAG,CAAC;IAChD;EACF,CAAC;EAEC,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAClB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAK3B,KAAK,CAAM,eAEhB;IAAK,SAAS,EAAC,aAAa;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAExBG,MAAM,CAACyB,GAAG,CAACJ,KAAK,IAAE;IAChB,oBAAO;MAAK,GAAG,EAAG,GAAEjB,SAAU,GAAEiB,KAAK,CAACK,WAAY,EAAE;MAAC,SAAS,EAAG,MAAK5B,UAAU,IAAI,aAAc,EAAE;MACpG,GAAG,EAAEuB,KAAK,CAACM,IAAK;MAChB,GAAG,EAAEN,KAAK,CAACE,EAAG;MACd,OAAO,EAAE,MAAMH,WAAW,CAACC,KAAK,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG;EACvC,CAAC,CAAC,CAGA,EACLnB,UAAU,iBAAI,oBAAC,OAAO;IAAC,OAAO,EAAEA,UAAW;IAAC,IAAI,EAAEG,IAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,CACvD;AAEV;AAEA,eAAeT,GAAG;;AAGlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}