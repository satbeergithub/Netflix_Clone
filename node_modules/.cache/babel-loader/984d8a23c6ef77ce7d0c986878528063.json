{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @constructor\n * @struct\n * @param {!string} type The event type\n * @param {!Node} snapshotNode The data\n * @param {string=} childName The name for this child, if it's a child event\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\n * @param {string=} prevName The name for the previous child, if applicable\n */\nvar Change = /** @class */function () {\n  function Change(type, snapshotNode, childName, oldSnap, prevName) {\n    this.type = type;\n    this.snapshotNode = snapshotNode;\n    this.childName = childName;\n    this.oldSnap = oldSnap;\n    this.prevName = prevName;\n  }\n  /**\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  Change.valueChange = function (snapshot) {\n    return new Change(Change.VALUE, snapshot);\n  };\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  Change.childAddedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  };\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  Change.childRemovedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  };\n  /**\n   * @param {string} childKey\n   * @param {!Node} newSnapshot\n   * @param {!Node} oldSnapshot\n   * @return {!Change}\n   */\n  Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  };\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  Change.childMovedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  };\n  //event types\n  /** Event type for a child added */\n  Change.CHILD_ADDED = 'child_added';\n  /** Event type for a child removed */\n  Change.CHILD_REMOVED = 'child_removed';\n  /** Event type for a child changed */\n  Change.CHILD_CHANGED = 'child_changed';\n  /** Event type for a child moved */\n  Change.CHILD_MOVED = 'child_moved';\n  /** Event type for a value change */\n  Change.VALUE = 'value';\n  return Change;\n}();\nexports.Change = Change;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;AASA;EACE,gBACSA,IAAY,EACZC,YAAkB,EAClBC,SAAkB,EAClBC,OAAc,EACdC,QAAiB;IAJjB,SAAI,GAAJJ,IAAI;IACJ,iBAAY,GAAZC,YAAY;IACZ,cAAS,GAATC,SAAS;IACT,YAAO,GAAPC,OAAO;IACP,aAAQ,GAARC,QAAQ;EACd;EAEH;;;;EAIOC,kBAAW,GAAlB,UAAmBC,QAAc;IAC/B,OAAO,IAAID,MAAM,CAACA,MAAM,CAACE,KAAK,EAAED,QAAQ,CAAC;EAC3C,CAAC;EAED;;;;;EAKOD,uBAAgB,GAAvB,UAAwBG,QAAgB,EAAEF,QAAc;IACtD,OAAO,IAAID,MAAM,CAACA,MAAM,CAACI,WAAW,EAAEH,QAAQ,EAAEE,QAAQ,CAAC;EAC3D,CAAC;EAED;;;;;EAKOH,yBAAkB,GAAzB,UAA0BG,QAAgB,EAAEF,QAAc;IACxD,OAAO,IAAID,MAAM,CAACA,MAAM,CAACK,aAAa,EAAEJ,QAAQ,EAAEE,QAAQ,CAAC;EAC7D,CAAC;EAED;;;;;;EAMOH,yBAAkB,GAAzB,UACEG,QAAgB,EAChBG,WAAiB,EACjBC,WAAiB;IAEjB,OAAO,IAAIP,MAAM,CAACA,MAAM,CAACQ,aAAa,EAAEF,WAAW,EAAEH,QAAQ,EAAEI,WAAW,CAAC;EAC7E,CAAC;EAED;;;;;EAKOP,uBAAgB,GAAvB,UAAwBG,QAAgB,EAAEF,QAAc;IACtD,OAAO,IAAID,MAAM,CAACA,MAAM,CAACS,WAAW,EAAER,QAAQ,EAAEE,QAAQ,CAAC;EAC3D,CAAC;EAED;EACA;EACOH,kBAAW,GAAG,aAAa;EAElC;EACOA,oBAAa,GAAG,eAAe;EAEtC;EACOA,oBAAa,GAAG,eAAe;EAEtC;EACOA,kBAAW,GAAG,aAAa;EAElC;EACOA,YAAK,GAAG,OAAO;EACxB,aAAC;CAzED,EAyEC;AAzEYU","names":["type","snapshotNode","childName","oldSnap","prevName","Change","snapshot","VALUE","childKey","CHILD_ADDED","CHILD_REMOVED","newSnapshot","oldSnapshot","CHILD_CHANGED","CHILD_MOVED","exports"],"sources":["../src/core/view/Change.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n * @param {!string} type The event type\n * @param {!Node} snapshotNode The data\n * @param {string=} childName The name for this child, if it's a child event\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\n * @param {string=} prevName The name for the previous child, if applicable\n */\nexport class Change {\n  constructor(\n    public type: string,\n    public snapshotNode: Node,\n    public childName?: string,\n    public oldSnap?: Node,\n    public prevName?: string\n  ) {}\n\n  /**\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static valueChange(snapshot: Node): Change {\n    return new Change(Change.VALUE, snapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childAddedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childRemovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} newSnapshot\n   * @param {!Node} oldSnapshot\n   * @return {!Change}\n   */\n  static childChangedChange(\n    childKey: string,\n    newSnapshot: Node,\n    oldSnapshot: Node\n  ): Change {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childMovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }\n\n  //event types\n  /** Event type for a child added */\n  static CHILD_ADDED = 'child_added';\n\n  /** Event type for a child removed */\n  static CHILD_REMOVED = 'child_removed';\n\n  /** Event type for a child changed */\n  static CHILD_CHANGED = 'child_changed';\n\n  /** Event type for a child moved */\n  static CHILD_MOVED = 'child_moved';\n\n  /** Event type for a value change */\n  static VALUE = 'value';\n}\n"]},"metadata":{},"sourceType":"script"}