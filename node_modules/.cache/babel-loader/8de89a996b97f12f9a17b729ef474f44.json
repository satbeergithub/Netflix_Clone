{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Operation_1 = require(\"./Operation\");\nvar Overwrite_1 = require(\"./Overwrite\");\nvar Path_1 = require(\"../util/Path\");\nvar util_1 = require(\"@firebase/util\");\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!ImmutableTree.<!Node>} children\n * @constructor\n * @implements {Operation}\n */\nvar Merge = /** @class */function () {\n  function Merge( /**@inheritDoc */source, /**@inheritDoc */path, /**@inheritDoc */children) {\n    this.source = source;\n    this.path = path;\n    this.children = children;\n    /** @inheritDoc */\n    this.type = Operation_1.OperationType.MERGE;\n  }\n  /**\n   * @inheritDoc\n   */\n  Merge.prototype.operationForChild = function (childName) {\n    if (this.path.isEmpty()) {\n      var childTree = this.children.subtree(new Path_1.Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite_1.Overwrite(this.source, Path_1.Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path_1.Path.Empty, childTree);\n      }\n    } else {\n      util_1.assert(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n  Merge.prototype.toString = function () {\n    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n  };\n  return Merge;\n}();\nexports.Merge = Merge;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AACA;AAIA;;;;;;;AAOA;EAIE,gBACE,iBAAyBA,MAAuB,EAChD,iBAAyBC,IAAU,EACnC,iBAAyBC,QAA6B;IAF7B,WAAM,GAANF,MAAM;IACN,SAAI,GAAJC,IAAI;IACJ,aAAQ,GAARC,QAAQ;IANnC;IACA,SAAI,GAAGC,yBAAa,CAACC,KAAK;EAMvB;EAEH;;;EAGAC,iCAAiB,GAAjB,UAAkBC,SAAiB;IACjC,IAAI,IAAI,CAACL,IAAI,CAACM,OAAO,EAAE,EAAE;MACvB,IAAMC,SAAS,GAAG,IAAI,CAACN,QAAQ,CAACO,OAAO,CAAC,IAAIC,WAAI,CAACJ,SAAS,CAAC,CAAC;MAC5D,IAAIE,SAAS,CAACD,OAAO,EAAE,EAAE;QACvB;QACA,OAAO,IAAI;MACb,CAAC,MAAM,IAAIC,SAAS,CAACG,KAAK,EAAE;QAC1B;QACA,OAAO,IAAIC,qBAAS,CAAC,IAAI,CAACZ,MAAM,EAAEU,WAAI,CAACG,KAAK,EAAEL,SAAS,CAACG,KAAK,CAAC;MAChE,CAAC,MAAM;QACL;QACA,OAAO,IAAIN,KAAK,CAAC,IAAI,CAACL,MAAM,EAAEU,WAAI,CAACG,KAAK,EAAEL,SAAS,CAAC;MACtD;IACF,CAAC,MAAM;MACLM,aAAM,CACJ,IAAI,CAACb,IAAI,CAACc,QAAQ,EAAE,KAAKT,SAAS,EAClC,gEAAgE,CACjE;MACD,OAAO,IAAID,KAAK,CAAC,IAAI,CAACL,MAAM,EAAE,IAAI,CAACC,IAAI,CAACe,QAAQ,EAAE,EAAE,IAAI,CAACd,QAAQ,CAAC;IACpE;EACF,CAAC;EAED;;;EAGAG,wBAAQ,GAAR;IACE,OACE,YAAY,GACZ,IAAI,CAACJ,IAAI,GACT,IAAI,GACJ,IAAI,CAACD,MAAM,CAACiB,QAAQ,EAAE,GACtB,UAAU,GACV,IAAI,CAACf,QAAQ,CAACe,QAAQ,EAAE,GACxB,GAAG;EAEP,CAAC;EACH,YAAC;AAAD,CAjDA,EAiDC;AAjDYC","names":["source","path","children","Operation_1","MERGE","Merge","childName","isEmpty","childTree","subtree","Path_1","value","Overwrite_1","Empty","util_1","getFront","popFront","toString","exports"],"sources":["../src/core/operation/Merge.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\nimport { Path } from '../util/Path';\nimport { assert } from '@firebase/util';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!ImmutableTree.<!Node>} children\n * @constructor\n * @implements {Operation}\n */\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /**@inheritDoc */ public source: OperationSource,\n    /**@inheritDoc */ public path: Path,\n    /**@inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): Operation {\n    if (this.path.isEmpty()) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path.Empty, childTree);\n      }\n    } else {\n      assert(\n        this.path.getFront() === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}