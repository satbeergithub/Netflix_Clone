{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar util_1 = require(\"@firebase/util\");\nvar validation_1 = require(\"../core/util/validation\");\nvar util_2 = require(\"../core/util/util\");\nvar util_3 = require(\"@firebase/util\");\n/**\n * @constructor\n */\nvar OnDisconnect = /** @class */function () {\n  /**\n   * @param {!Repo} repo_\n   * @param {!Path} path_\n   */\n  function OnDisconnect(repo_, path_) {\n    this.repo_ = repo_;\n    this.path_ = path_;\n  }\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  OnDisconnect.prototype.cancel = function (onComplete) {\n    util_1.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    util_1.validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    var deferred = new util_3.Deferred();\n    this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  OnDisconnect.prototype.remove = function (onComplete) {\n    util_1.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validation_1.validateWritablePath('OnDisconnect.remove', this.path_);\n    util_1.validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    var deferred = new util_3.Deferred();\n    this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\n   * @param {*} value\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  OnDisconnect.prototype.set = function (value, onComplete) {\n    util_1.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validation_1.validateWritablePath('OnDisconnect.set', this.path_);\n    validation_1.validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    util_1.validateCallback('OnDisconnect.set', 2, onComplete, true);\n    var deferred = new util_3.Deferred();\n    this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\n   * @param {*} value\n   * @param {number|string|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\n    util_1.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validation_1.validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validation_1.validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\n    validation_1.validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    util_1.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n    var deferred = new util_3.Deferred();\n    this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\n    util_1.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validation_1.validateWritablePath('OnDisconnect.update', this.path_);\n    if (Array.isArray(objectToMerge)) {\n      var newObjectToMerge = {};\n      for (var i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      util_2.warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' + 'existing data, or an Object with integer keys if you really do want to only update some of the children.');\n    }\n    validation_1.validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\n    util_1.validateCallback('OnDisconnect.update', 2, onComplete, true);\n    var deferred = new util_3.Deferred();\n    this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  return OnDisconnect;\n}();\nexports.OnDisconnect = OnDisconnect;","map":{"version":3,"mappings":"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","names":["repo_","path_","OnDisconnect","onComplete","util_1","arguments","length","deferred","util_3","onDisconnectCancel","wrapCallback","promise","validation_1","onDisconnectSet","value","priority","onDisconnectSetWithPriority","objectToMerge","Array","isArray","newObjectToMerge","i","util_2","onDisconnectUpdate","exports"],"sources":["../src/api/onDisconnect.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback } from '@firebase/util';\nimport {\n  validateWritablePath,\n  validateFirebaseDataArg,\n  validatePriority,\n  validateFirebaseMergeDataArg\n} from '../core/util/validation';\nimport { warn } from '../core/util/util';\nimport { Deferred } from '@firebase/util';\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\n\n/**\n * @constructor\n */\nexport class OnDisconnect {\n  /**\n   * @param {!Repo} repo_\n   * @param {!Path} path_\n   */\n  constructor(private repo_: Repo, private path_: Path) {}\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  cancel(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectCancel(\n      this.path_,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  set(value: any, onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    validateCallback('OnDisconnect.set', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      value,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {number|string|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  setWithPriority(\n    value: any,\n    priority: number | string | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      1,\n      value,\n      this.path_,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSetWithPriority(\n      this.path_,\n      value,\n      priority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  update(\n    objectToMerge: object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: any } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n          'existing data, or an Object with integer keys if you really do want to only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      1,\n      objectToMerge,\n      this.path_,\n      false\n    );\n    validateCallback('OnDisconnect.update', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectUpdate(\n      this.path_,\n      objectToMerge,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}