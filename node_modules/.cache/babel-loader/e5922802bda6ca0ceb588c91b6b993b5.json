{"ast":null,"code":"import * as type from './type';\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param var_args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob() {\n  var var_args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    var_args[_i] = arguments[_i];\n  }\n  var BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    var bb = new BlobBuilder();\n    for (var i = 0; i < var_args.length; i++) {\n      bb.append(var_args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (type.isNativeBlobDefined()) {\n      return new Blob(var_args);\n    } else {\n      throw Error(\"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}","map":{"version":3,"mappings":"AAqBA,OAAO,KAAKA,IAAI,MAAM,QAAQ;AAM9B;EACE,IAAI,OAAOC,WAAW,KAAK,WAAW,EAAE;IACtC,OAAOA,WAAW;EACpB,CAAC,MAAM,IAAI,OAAOC,iBAAiB,KAAK,WAAW,EAAE;IACnD,OAAOA,iBAAiB;EAC1B,CAAC,MAAM;IACL,OAAOC,SAAS;EAClB;AACF;AAEA;;;;;;AAMA,OAAM;EAAkB;OAAA,UAA4C,EAA5CC,qBAA4C,EAA5CA,IAA4C;IAA5CC;;EACtB,IAAIJ,WAAW,GAAGK,cAAc,EAAE;EAClC,IAAIL,WAAW,KAAKE,SAAS,EAAE;IAC7B,IAAII,EAAE,GAAG,IAAIN,WAAW,EAAE;IAC1B,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MACxCD,EAAE,CAACG,MAAM,CAACL,QAAQ,CAACG,CAAC,CAAC,CAAC;IACxB;IACA,OAAOD,EAAE,CAACI,OAAO,EAAE;EACrB,CAAC,MAAM;IACL,IAAIX,IAAI,CAACY,mBAAmB,EAAE,EAAE;MAC9B,OAAO,IAAIC,IAAI,CAACR,QAAQ,CAAC;IAC3B,CAAC,MAAM;MACL,MAAMS,KAAK,CAAC,qDAAqD,CAAC;IACpE;EACF;AACF;AAEA;;;;;;;;;AASA,OAAM,mBAAoBC,IAAU,EAAEC,KAAa,EAAEC,GAAW;EAC9D,IAAKF,IAAY,CAACG,WAAW,EAAE;IAC7B,OAAQH,IAAY,CAACG,WAAW,CAACF,KAAK,EAAEC,GAAG,CAAC;EAC9C,CAAC,MAAM,IAAKF,IAAY,CAACI,QAAQ,EAAE;IACjC,OAAQJ,IAAY,CAACI,QAAQ,CAACH,KAAK,EAAEC,GAAG,CAAC;EAC3C,CAAC,MAAM,IAAIF,IAAI,CAACK,KAAK,EAAE;IACrB,OAAOL,IAAI,CAACK,KAAK,CAACJ,KAAK,EAAEC,GAAG,CAAC;EAC/B;EACA,OAAO,IAAI;AACb","names":["type","BlobBuilder","WebKitBlobBuilder","undefined","_i","var_args","getBlobBuilder","bb","i","length","append","getBlob","isNativeBlobDefined","Blob","Error","blob","start","end","webkitSlice","mozSlice","slice"],"sources":["../src/implementation/fs.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport * as array from './array';\nimport * as type from './type';\n\ndeclare var IBlobBuilder;\ndeclare var BlobBuilder;\ndeclare var WebKitBlobBuilder;\n\nfunction getBlobBuilder(): (typeof IBlobBuilder) | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param var_args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...var_args: (string | Blob | ArrayBuffer)[]): Blob {\n  let BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    let bb = new BlobBuilder();\n    for (let i = 0; i < var_args.length; i++) {\n      bb.append(var_args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (type.isNativeBlobDefined()) {\n      return new Blob(var_args);\n    } else {\n      throw Error(\"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if ((blob as any).webkitSlice) {\n    return (blob as any).webkitSlice(start, end);\n  } else if ((blob as any).mozSlice) {\n    return (blob as any).mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}