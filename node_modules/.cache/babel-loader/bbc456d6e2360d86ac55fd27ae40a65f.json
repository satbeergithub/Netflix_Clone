{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar util_1 = require(\"../core/util/util\");\nvar parser_1 = require(\"../core/util/libs/parser\");\nvar Path_1 = require(\"../core/util/Path\");\nvar Reference_1 = require(\"./Reference\");\nvar Repo_1 = require(\"../core/Repo\");\nvar RepoManager_1 = require(\"../core/RepoManager\");\nvar util_2 = require(\"@firebase/util\");\nvar validation_1 = require(\"../core/util/validation\");\n/**\n * Class representing a firebase database.\n * @implements {FirebaseService}\n */\nvar Database = /** @class */function () {\n  /**\n   * The constructor should not be called by users of our public API.\n   * @param {!Repo} repo_\n   */\n  function Database(repo_) {\n    this.repo_ = repo_;\n    if (!(repo_ instanceof Repo_1.Repo)) {\n      util_1.fatal(\"Don't call new Database() directly - please use firebase.database().\");\n    }\n    /** @type {Reference} */\n    this.root_ = new Reference_1.Reference(repo_, Path_1.Path.Empty);\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n  Object.defineProperty(Database.prototype, \"app\", {\n    get: function get() {\n      return this.repo_.app;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns a reference to the root or the path specified in opt_pathString.\n   * @param {string=} pathString\n   * @return {!Reference} Firebase reference.\n   */\n  Database.prototype.ref = function (pathString) {\n    this.checkDeleted_('ref');\n    util_2.validateArgCount('database.ref', 0, 1, arguments.length);\n    return pathString !== undefined ? this.root_.child(pathString) : this.root_;\n  };\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @param {string} url\n   * @return {!Reference} Firebase reference.\n   */\n  Database.prototype.refFromURL = function (url) {\n    /** @const {string} */\n    var apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    util_2.validateArgCount(apiName, 1, 1, arguments.length);\n    var parsedURL = parser_1.parseRepoInfo(url);\n    validation_1.validateUrl(apiName, 1, parsedURL);\n    var repoInfo = parsedURL.repoInfo;\n    if (repoInfo.host !== this.repo_.repoInfo_.host) {\n      util_1.fatal(apiName + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + this.repo_.repoInfo_.host + ')');\n    }\n    return this.ref(parsedURL.path.toString());\n  };\n  /**\n   * @param {string} apiName\n   */\n  Database.prototype.checkDeleted_ = function (apiName) {\n    if (this.repo_ === null) {\n      util_1.fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  };\n  // Make individual repo go offline.\n  Database.prototype.goOffline = function () {\n    util_2.validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  };\n  Database.prototype.goOnline = function () {\n    util_2.validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  };\n  Database.ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    }\n  };\n  return Database;\n}();\nexports.Database = Database;\nvar DatabaseInternals = /** @class */function () {\n  /** @param {!Database} database */\n  function DatabaseInternals(database) {\n    this.database = database;\n  }\n  /** @return {Promise<void>} */\n  DatabaseInternals.prototype.delete = function () {\n    this.database.checkDeleted_('delete');\n    RepoManager_1.RepoManager.getInstance().deleteRepo(this.database.repo_);\n    this.database.repo_ = null;\n    this.database.root_ = null;\n    this.database.INTERNAL = null;\n    this.database = null;\n    return Promise.resolve();\n  };\n  return DatabaseInternals;\n}();\nexports.DatabaseInternals = DatabaseInternals;","map":{"version":3,"mappings":"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","names":["repo_","Repo_1","util_1","root_","Reference_1","Path_1","Empty","INTERNAL","DatabaseInternals","Object","Database","app","pathString","checkDeleted_","util_2","arguments","length","undefined","child","url","apiName","parsedURL","parser_1","validation_1","repoInfo","host","repoInfo_","ref","path","toString","interrupt","resume","TIMESTAMP","exports","database","RepoManager_1","getInstance","deleteRepo","Promise","resolve"],"sources":["../src/api/Database.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fatal } from '../core/util/util';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { Path } from '../core/util/Path';\nimport { Reference } from './Reference';\nimport { Repo } from '../core/Repo';\nimport { RepoManager } from '../core/RepoManager';\nimport { validateArgCount } from '@firebase/util';\nimport { validateUrl } from '../core/util/validation';\nimport { FirebaseApp, FirebaseService } from '@firebase/app';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Class representing a firebase database.\n * @implements {FirebaseService}\n */\nexport class Database implements FirebaseService {\n  INTERNAL: DatabaseInternals;\n  private root_: Reference;\n\n  static readonly ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    }\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   * @param {!Repo} repo_\n   */\n  constructor(private repo_: Repo) {\n    if (!(repo_ instanceof Repo)) {\n      fatal(\n        \"Don't call new Database() directly - please use firebase.database().\"\n      );\n    }\n\n    /** @type {Reference} */\n    this.root_ = new Reference(repo_, Path.Empty);\n\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  get app(): FirebaseApp {\n    return this.repo_.app;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in opt_pathString.\n   * @param {string=} pathString\n   * @return {!Reference} Firebase reference.\n   */\n  ref(pathString?: string): Reference {\n    this.checkDeleted_('ref');\n    validateArgCount('database.ref', 0, 1, arguments.length);\n\n    return pathString !== undefined ? this.root_.child(pathString) : this.root_;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @param {string} url\n   * @return {!Reference} Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    /** @const {string} */\n    const apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const parsedURL = parseRepoInfo(url);\n    validateUrl(apiName, 1, parsedURL);\n\n    const repoInfo = parsedURL.repoInfo;\n    if (repoInfo.host !== ((this.repo_ as any).repoInfo_ as RepoInfo).host) {\n      fatal(\n        apiName +\n          ': Host name does not match the current database: ' +\n          '(found ' +\n          repoInfo.host +\n          ' but expected ' +\n          ((this.repo_ as any).repoInfo_ as RepoInfo).host +\n          ')'\n      );\n    }\n\n    return this.ref(parsedURL.path.toString());\n  }\n\n  /**\n   * @param {string} apiName\n   */\n  private checkDeleted_(apiName: string) {\n    if (this.repo_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n\n  // Make individual repo go offline.\n  goOffline() {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  }\n\n  goOnline() {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  }\n}\n\nexport class DatabaseInternals {\n  /** @param {!Database} database */\n  constructor(public database: Database) {}\n\n  /** @return {Promise<void>} */\n  delete(): Promise<void> {\n    (this.database as any).checkDeleted_('delete');\n    RepoManager.getInstance().deleteRepo((this.database as any).repo_ as Repo);\n\n    (this.database as any).repo_ = null;\n    (this.database as any).root_ = null;\n    this.database.INTERNAL = null;\n    this.database = null;\n    return Promise.resolve();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}