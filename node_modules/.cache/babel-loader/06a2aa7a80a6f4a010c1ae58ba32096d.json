{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Index_1 = require(\"./Index\");\nvar Node_1 = require(\"../Node\");\nvar util_1 = require(\"../../util/util\");\nvar util_2 = require(\"@firebase/util\");\nvar __EMPTY_NODE;\nvar KeyIndex = /** @class */function (_super) {\n  __extends(KeyIndex, _super);\n  function KeyIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\n    get: function get() {\n      return __EMPTY_NODE;\n    },\n    set: function set(val) {\n      __EMPTY_NODE = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @inheritDoc\n   */\n  KeyIndex.prototype.compare = function (a, b) {\n    return util_1.nameCompare(a.name, b.name);\n  };\n  /**\n   * @inheritDoc\n   */\n  KeyIndex.prototype.isDefinedOn = function (node) {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw util_2.assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  };\n  /**\n   * @inheritDoc\n   */\n  KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return false; // The key for a node never changes.\n  };\n  /**\n   * @inheritDoc\n   */\n  KeyIndex.prototype.minPost = function () {\n    return Node_1.NamedNode.MIN;\n  };\n  /**\n   * @inheritDoc\n   */\n  KeyIndex.prototype.maxPost = function () {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new Node_1.NamedNode(util_1.MAX_NAME, __EMPTY_NODE);\n  };\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  KeyIndex.prototype.makePost = function (indexValue, name) {\n    util_2.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new Node_1.NamedNode(indexValue, __EMPTY_NODE);\n  };\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  KeyIndex.prototype.toString = function () {\n    return '.key';\n  };\n  return KeyIndex;\n}(Index_1.Index);\nexports.KeyIndex = KeyIndex;\nexports.KEY_INDEX = new KeyIndex();","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AACA;AAGA,IAAIA,YAA0B;AAE9B;EAA8BC;EAA9B;;EAoEA;EAnEEC,sBAAWC,wBAAY;SAAvB;MACE,OAAOH,YAAY;IACrB,CAAC;SAED,aAAwBI,GAAG;MACzBJ,YAAY,GAAGI,GAAG;IACpB,CAAC;;;;EAED;;;EAGAD,0BAAO,GAAP,UAAQE,CAAY,EAAEC,CAAY;IAChC,OAAOC,kBAAW,CAACF,CAAC,CAACG,IAAI,EAAEF,CAAC,CAACE,IAAI,CAAC;EACpC,CAAC;EAED;;;EAGAL,8BAAW,GAAX,UAAYM,IAAU;IACpB;IACA;IACA,MAAMC,qBAAc,CAAC,iDAAiD,CAAC;EACzE,CAAC;EAED;;;EAGAP,sCAAmB,GAAnB,UAAoBQ,OAAa,EAAEC,OAAa;IAC9C,OAAO,KAAK,CAAC,CAAC;EAChB,CAAC;EAED;;;EAGAT,0BAAO,GAAP;IACE,OAAQU,gBAAiB,CAACC,GAAG;EAC/B,CAAC;EAED;;;EAGAX,0BAAO,GAAP;IACE;IACA;IACA,OAAO,IAAIU,gBAAS,CAACN,eAAQ,EAAEP,YAAY,CAAC;EAC9C,CAAC;EAED;;;;;EAKAG,2BAAQ,GAAR,UAASY,UAAkB,EAAEP,IAAY;IACvCE,aAAM,CACJ,OAAOK,UAAU,KAAK,QAAQ,EAC9B,8CAA8C,CAC/C;IACD;IACA,OAAO,IAAIF,gBAAS,CAACE,UAAU,EAAEf,YAAY,CAAC;EAChD,CAAC;EAED;;;EAGAG,2BAAQ,GAAR;IACE,OAAO,MAAM;EACf,CAAC;EACH,eAAC;AAAD,CApEA,CAA8Ba,aAAK;AAAtBC;AAsEAA,iBAAS,GAAG,IAAId,QAAQ,EAAE","names":["__EMPTY_NODE","__extends","Object","KeyIndex","val","a","b","util_1","name","node","util_2","oldNode","newNode","Node_1","MIN","indexValue","Index_1","exports"],"sources":["../src/core/snap/indexes/KeyIndex.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { Node, NamedNode } from '../Node';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildrenNode } from '../ChildrenNode';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost() {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n"]},"metadata":{},"sourceType":"script"}