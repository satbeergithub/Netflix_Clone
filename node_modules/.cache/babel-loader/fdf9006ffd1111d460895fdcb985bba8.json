{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"../util/util\");\nvar KeyIndex_1 = require(\"../snap/indexes/KeyIndex\");\nvar PriorityIndex_1 = require(\"../snap/indexes/PriorityIndex\");\nvar ValueIndex_1 = require(\"../snap/indexes/ValueIndex\");\nvar PathIndex_1 = require(\"../snap/indexes/PathIndex\");\nvar IndexedFilter_1 = require(\"./filter/IndexedFilter\");\nvar LimitedFilter_1 = require(\"./filter/LimitedFilter\");\nvar RangedFilter_1 = require(\"./filter/RangedFilter\");\nvar util_3 = require(\"@firebase/util\");\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n * @constructor\n */\nvar QueryParams = /** @class */function () {\n  function QueryParams() {\n    this.limitSet_ = false;\n    this.startSet_ = false;\n    this.startNameSet_ = false;\n    this.endSet_ = false;\n    this.endNameSet_ = false;\n    this.limit_ = 0;\n    this.viewFrom_ = '';\n    this.indexStartValue_ = null;\n    this.indexStartName_ = '';\n    this.indexEndValue_ = null;\n    this.indexEndName_ = '';\n    this.index_ = PriorityIndex_1.PRIORITY_INDEX;\n  }\n  /**\n   * @return {boolean}\n   */\n  QueryParams.prototype.hasStart = function () {\n    return this.startSet_;\n  };\n  /**\n   * @return {boolean} True if it would return from left.\n   */\n  QueryParams.prototype.isViewFromLeft = function () {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    }\n  };\n  /**\n   * Only valid to call if hasStart() returns true\n   * @return {*}\n   */\n  QueryParams.prototype.getIndexStartValue = function () {\n    util_1.assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  };\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  QueryParams.prototype.getIndexStartName = function () {\n    util_1.assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return util_2.MIN_NAME;\n    }\n  };\n  /**\n   * @return {boolean}\n   */\n  QueryParams.prototype.hasEnd = function () {\n    return this.endSet_;\n  };\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * @return {*}\n   */\n  QueryParams.prototype.getIndexEndValue = function () {\n    util_1.assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  };\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  QueryParams.prototype.getIndexEndName = function () {\n    util_1.assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return util_2.MAX_NAME;\n    }\n  };\n  /**\n   * @return {boolean}\n   */\n  QueryParams.prototype.hasLimit = function () {\n    return this.limitSet_;\n  };\n  /**\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\n   */\n  QueryParams.prototype.hasAnchoredLimit = function () {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  };\n  /**\n   * Only valid to call if hasLimit() returns true\n   * @return {!number}\n   */\n  QueryParams.prototype.getLimit = function () {\n    util_1.assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  };\n  /**\n   * @return {!Index}\n   */\n  QueryParams.prototype.getIndex = function () {\n    return this.index_;\n  };\n  /**\n   * @return {!QueryParams}\n   * @private\n   */\n  QueryParams.prototype.copy_ = function () {\n    var copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  };\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  QueryParams.prototype.limit = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  };\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  QueryParams.prototype.limitToFirst = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  };\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  QueryParams.prototype.limitToLast = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  };\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  QueryParams.prototype.startAt = function (indexValue, key) {\n    var newParams = this.copy_();\n    newParams.startSet_ = true;\n    if (!(indexValue !== undefined)) {\n      indexValue = null;\n    }\n    newParams.indexStartValue_ = indexValue;\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n    return newParams;\n  };\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  QueryParams.prototype.endAt = function (indexValue, key) {\n    var newParams = this.copy_();\n    newParams.endSet_ = true;\n    if (!(indexValue !== undefined)) {\n      indexValue = null;\n    }\n    newParams.indexEndValue_ = indexValue;\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n    return newParams;\n  };\n  /**\n   * @param {!Index} index\n   * @return {!QueryParams}\n   */\n  QueryParams.prototype.orderBy = function (index) {\n    var newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  };\n  /**\n   * @return {!Object}\n   */\n  QueryParams.prototype.getQueryObject = function () {\n    var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    var obj = {};\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      var viewFrom = this.viewFrom_;\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    }\n    // For now, priority index is the default, so we only specify if it's some other index\n    if (this.index_ !== PriorityIndex_1.PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n    return obj;\n  };\n  /**\n   * @return {boolean}\n   */\n  QueryParams.prototype.loadsAllData = function () {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  };\n  /**\n   * @return {boolean}\n   */\n  QueryParams.prototype.isDefault = function () {\n    return this.loadsAllData() && this.index_ == PriorityIndex_1.PRIORITY_INDEX;\n  };\n  /**\n   * @return {!NodeFilter}\n   */\n  QueryParams.prototype.getNodeFilter = function () {\n    if (this.loadsAllData()) {\n      return new IndexedFilter_1.IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter_1.LimitedFilter(this);\n    } else {\n      return new RangedFilter_1.RangedFilter(this);\n    }\n  };\n  /**\n   * Returns a set of REST query string parameters representing this query.\n   *\n   * @return {!Object.<string,*>} query string parameters\n   */\n  QueryParams.prototype.toRestQueryStringParameters = function () {\n    var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    var qs = {};\n    if (this.isDefault()) {\n      return qs;\n    }\n    var orderBy;\n    if (this.index_ === PriorityIndex_1.PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === ValueIndex_1.VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KeyIndex_1.KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      util_1.assert(this.index_ instanceof PathIndex_1.PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n    qs[REST_CONSTANTS.ORDER_BY] = util_3.stringify(orderBy);\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = util_3.stringify(this.indexStartValue_);\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + util_3.stringify(this.indexStartName_);\n      }\n    }\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = util_3.stringify(this.indexEndValue_);\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + util_3.stringify(this.indexEndName_);\n      }\n    }\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n    return qs;\n  };\n  /**\n   * Wire Protocol Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n  /**\n   * REST Query Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  QueryParams.REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n  /**\n   * Default, empty query parameters\n   * @type {!QueryParams}\n   * @const\n   */\n  QueryParams.DEFAULT = new QueryParams();\n  return QueryParams;\n}();\nexports.QueryParams = QueryParams;","map":{"version":3,"mappings":"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","names":["PriorityIndex_1","QueryParams","startSet_","viewFrom_","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","util_1","indexStartValue_","startNameSet_","indexStartName_","util_2","endSet_","indexEndValue_","endNameSet_","indexEndName_","limitSet_","limit_","index_","copy","newLimit","newParams","copy_","VIEW_FROM_RIGHT","indexValue","key","undefined","index","WIRE_PROTOCOL_CONSTANTS","obj","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","isViewFromLeft","VIEW_FROM","INDEX","toString","loadsAllData","IndexedFilter_1","getIndex","hasLimit","LimitedFilter_1","RangedFilter_1","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","isDefault","orderBy","PRIORITY_INDEX","ValueIndex_1","VALUE_INDEX","KeyIndex_1","KEY_INDEX","PathIndex_1","ORDER_BY","util_3","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","exports"],"sources":["../src/core/view/QueryParams.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { MIN_NAME, MAX_NAME } from '../util/util';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { RangedFilter } from './filter/RangedFilter';\nimport { stringify } from '@firebase/util';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { Index } from '../snap/indexes/Index';\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n * @constructor\n */\nexport class QueryParams {\n  private limitSet_ = false;\n  private startSet_ = false;\n  private startNameSet_ = false;\n  private endSet_ = false;\n  private endNameSet_ = false;\n\n  private limit_ = 0;\n  private viewFrom_ = '';\n  private indexStartValue_: any | null = null;\n  private indexStartName_ = '';\n  private indexEndValue_: any | null = null;\n  private indexEndName_ = '';\n\n  private index_ = PRIORITY_INDEX;\n\n  /**\n   * Wire Protocol Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n\n  /**\n   * REST Query Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n\n  /**\n   * Default, empty query parameters\n   * @type {!QueryParams}\n   * @const\n   */\n  static readonly DEFAULT = new QueryParams();\n\n  /**\n   * @return {boolean}\n   */\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @return {boolean} True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return (\n        this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT\n      );\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   * @return {*}\n   */\n  getIndexStartValue(): any {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * @return {*}\n   */\n  getIndexEndValue(): any {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   * @return {!number}\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  /**\n   * @return {!Index}\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @return {!QueryParams}\n   * @private\n   */\n  private copy_(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limit(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToFirst(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToLast(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  startAt(indexValue: any, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.startSet_ = true;\n    if (!(indexValue !== undefined)) {\n      indexValue = null;\n    }\n    newParams.indexStartValue_ = indexValue;\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  endAt(indexValue: any, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.endSet_ = true;\n    if (!(indexValue !== undefined)) {\n      indexValue = null;\n    }\n    newParams.indexEndValue_ = indexValue;\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {!Index} index\n   * @return {!QueryParams}\n   */\n  orderBy(index: Index): QueryParams {\n    const newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  }\n\n  /**\n   * @return {!Object}\n   */\n  getQueryObject(): Object {\n    const WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    const obj: { [k: string]: any } = {};\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      let viewFrom = this.viewFrom_;\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    }\n    // For now, priority index is the default, so we only specify if it's some other index\n    if (this.index_ !== PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n    return obj;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ == PRIORITY_INDEX;\n  }\n\n  /**\n   * @return {!NodeFilter}\n   */\n  getNodeFilter(): NodeFilter {\n    if (this.loadsAllData()) {\n      return new IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter(this);\n    } else {\n      return new RangedFilter(this);\n    }\n  }\n\n  /**\n   * Returns a set of REST query string parameters representing this query.\n   *\n   * @return {!Object.<string,*>} query string parameters\n   */\n  toRestQueryStringParameters(): { [k: string]: any } {\n    const REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    const qs: { [k: string]: string | number } = {};\n\n    if (this.isDefault()) {\n      return qs;\n    }\n\n    let orderBy;\n    if (this.index_ === PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n    qs[REST_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = stringify(this.indexStartValue_);\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + stringify(this.indexStartName_);\n      }\n    }\n\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = stringify(this.indexEndValue_);\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + stringify(this.indexEndName_);\n      }\n    }\n\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n\n    return qs;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}