{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar IndexedFilter_1 = require(\"./filter/IndexedFilter\");\nvar ViewProcessor_1 = require(\"./ViewProcessor\");\nvar ChildrenNode_1 = require(\"../snap/ChildrenNode\");\nvar CacheNode_1 = require(\"./CacheNode\");\nvar ViewCache_1 = require(\"./ViewCache\");\nvar EventGenerator_1 = require(\"./EventGenerator\");\nvar util_1 = require(\"@firebase/util\");\nvar Operation_1 = require(\"../operation/Operation\");\nvar Change_1 = require(\"./Change\");\nvar PriorityIndex_1 = require(\"../snap/indexes/PriorityIndex\");\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n * @constructor\n */\nvar View = /** @class */function () {\n  /**\n   *\n   * @param {!Query} query_\n   * @param {!ViewCache} initialViewCache\n   */\n  function View(query_, initialViewCache) {\n    this.query_ = query_;\n    this.eventRegistrations_ = [];\n    var params = this.query_.getQueryParams();\n    var indexFilter = new IndexedFilter_1.IndexedFilter(params.getIndex());\n    var filter = params.getNodeFilter();\n    /**\n     * @type {ViewProcessor}\n     * @private\n     */\n    this.processor_ = new ViewProcessor_1.ViewProcessor(filter);\n    var initialServerCache = initialViewCache.getServerCache();\n    var initialEventCache = initialViewCache.getEventCache();\n    // Don't filter server node with other filter than index, wait for tagged listen\n    var serverSnap = indexFilter.updateFullNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n    var eventSnap = filter.updateFullNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n    var newServerCache = new CacheNode_1.CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n    var newEventCache = new CacheNode_1.CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n    /**\n     * @type {!ViewCache}\n     * @private\n     */\n    this.viewCache_ = new ViewCache_1.ViewCache(newEventCache, newServerCache);\n    /**\n     * @type {!EventGenerator}\n     * @private\n     */\n    this.eventGenerator_ = new EventGenerator_1.EventGenerator(this.query_);\n  }\n  /**\n   * @return {!Query}\n   */\n  View.prototype.getQuery = function () {\n    return this.query_;\n  };\n  /**\n   * @return {?Node}\n   */\n  View.prototype.getServerCache = function () {\n    return this.viewCache_.getServerCache().getNode();\n  };\n  /**\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  View.prototype.getCompleteServerCache = function (path) {\n    var cache = this.viewCache_.getCompleteServerSnap();\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (this.query_.getQueryParams().loadsAllData() || !path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty()) {\n        return cache.getChild(path);\n      }\n    }\n    return null;\n  };\n  /**\n   * @return {boolean}\n   */\n  View.prototype.isEmpty = function () {\n    return this.eventRegistrations_.length === 0;\n  };\n  /**\n   * @param {!EventRegistration} eventRegistration\n   */\n  View.prototype.addEventRegistration = function (eventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  };\n  /**\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n  View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\n    var cancelEvents = [];\n    if (cancelError) {\n      util_1.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n      var path_1 = this.query_.path;\n      this.eventRegistrations_.forEach(function (registration) {\n        cancelError /** @type {!Error} */ = cancelError;\n        var maybeEvent = registration.createCancelEvent(cancelError, path_1);\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n    if (eventRegistration) {\n      var remaining = [];\n      for (var i = 0; i < this.eventRegistrations_.length; ++i) {\n        var existing = this.eventRegistrations_[i];\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n  };\n  /**\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\n   *\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @return {!Array.<!Event>}\n   */\n  View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\n    if (operation.type === Operation_1.OperationType.MERGE && operation.source.queryId !== null) {\n      util_1.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\n      util_1.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\n    }\n    var oldViewCache = this.viewCache_;\n    var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\n    this.processor_.assertIndexed(result.viewCache);\n    util_1.assert(result.viewCache.getServerCache().isFullyInitialized() || !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n    this.viewCache_ = result.viewCache;\n    return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\n  };\n  /**\n   * @param {!EventRegistration} registration\n   * @return {!Array.<!Event>}\n   */\n  View.prototype.getInitialEvents = function (registration) {\n    var eventSnap = this.viewCache_.getEventCache();\n    var initialChanges = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n      var eventNode = eventSnap.getNode();\n      eventNode.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {\n        initialChanges.push(Change_1.Change.childAddedChange(key, childNode));\n      });\n    }\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change_1.Change.valueChange(eventSnap.getNode()));\n    }\n    return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\n  };\n  /**\n   * @private\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {EventRegistration=} eventRegistration\n   * @return {!Array.<!Event>}\n   */\n  View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\n    var registrations = eventRegistration ? [eventRegistration] : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\n  };\n  return View;\n}();\nexports.View = View;","map":{"version":3,"mappings":"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","names":["query_","initialViewCache","params","getQueryParams","indexFilter","IndexedFilter_1","getIndex","filter","getNodeFilter","processor_","ViewProcessor_1","initialServerCache","getServerCache","initialEventCache","getEventCache","serverSnap","updateFullNode","ChildrenNode_1","EMPTY_NODE","getNode","eventSnap","newServerCache","CacheNode_1","isFullyInitialized","filtersNodes","newEventCache","viewCache_","ViewCache_1","eventGenerator_","EventGenerator_1","View","path","cache","getCompleteServerSnap","loadsAllData","isEmpty","getImmediateChild","getFront","getChild","eventRegistrations_","length","eventRegistration","push","cancelError","cancelEvents","util_1","path_1","forEach","registration","maybeEvent","createCancelEvent","remaining","i","existing","matches","hasAnyCallback","concat","slice","operation","writesCache","completeServerCache","type","Operation_1","MERGE","source","queryId","getCompleteEventSnap","oldViewCache","result","applyOperation","assertIndexed","viewCache","generateEventsForChanges_","changes","initialChanges","isLeafNode","eventNode","forEachChild","PriorityIndex_1","key","childNode","Change_1","childAddedChange","valueChange","eventCache","registrations","generateEventsForChanges","exports"],"sources":["../src/core/view/View.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { ViewProcessor } from './ViewProcessor';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { ViewCache } from './ViewCache';\nimport { EventGenerator } from './EventGenerator';\nimport { assert } from '@firebase/util';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Change } from './Change';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Query } from '../../api/Query';\nimport { EventRegistration } from './EventRegistration';\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\nimport { CancelEvent, Event } from './Event';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n * @constructor\n */\nexport class View {\n  private processor_: ViewProcessor;\n  private viewCache_: ViewCache;\n  private eventRegistrations_: EventRegistration[] = [];\n  private eventGenerator_: EventGenerator;\n\n  /**\n   *\n   * @param {!Query} query_\n   * @param {!ViewCache} initialViewCache\n   */\n  constructor(private query_: Query, initialViewCache: ViewCache) {\n    const params = this.query_.getQueryParams();\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = params.getNodeFilter();\n\n    /**\n     * @type {ViewProcessor}\n     * @private\n     */\n    this.processor_ = new ViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.getServerCache();\n    const initialEventCache = initialViewCache.getEventCache();\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    /**\n     * @type {!ViewCache}\n     * @private\n     */\n    this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n\n    /**\n     * @type {!EventGenerator}\n     * @private\n     */\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  /**\n   * @return {!Query}\n   */\n  getQuery(): Query {\n    return this.query_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getServerCache(): Node | null {\n    return this.viewCache_.getServerCache().getNode();\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    const cache = this.viewCache_.getCompleteServerSnap();\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (\n        this.query_.getQueryParams().loadsAllData() ||\n        (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())\n      ) {\n        return cache.getChild(path);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.eventRegistrations_.length === 0;\n  }\n\n  /**\n   * @param {!EventRegistration} eventRegistration\n   */\n  addEventRegistration(eventRegistration: EventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  }\n\n  /**\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    const cancelEvents: CancelEvent[] = [];\n    if (cancelError) {\n      assert(\n        eventRegistration == null,\n        'A cancel should cancel all event registrations.'\n      );\n      const path = this.query_.path;\n      this.eventRegistrations_.forEach(function(registration) {\n        cancelError /** @type {!Error} */ = cancelError;\n        const maybeEvent = registration.createCancelEvent(cancelError, path);\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n\n    if (eventRegistration) {\n      let remaining = [];\n      for (let i = 0; i < this.eventRegistrations_.length; ++i) {\n        const existing = this.eventRegistrations_[i];\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\n   *\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @return {!Array.<!Event>}\n   */\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null\n  ): Event[] {\n    if (\n      operation.type === OperationType.MERGE &&\n      operation.source.queryId !== null\n    ) {\n      assert(\n        this.viewCache_.getCompleteServerSnap(),\n        'We should always have a full cache before handling merges'\n      );\n      assert(\n        this.viewCache_.getCompleteEventSnap(),\n        'Missing event cache, even though we have a server cache'\n      );\n    }\n\n    const oldViewCache = this.viewCache_;\n    const result = this.processor_.applyOperation(\n      oldViewCache,\n      operation,\n      writesCache,\n      completeServerCache\n    );\n    this.processor_.assertIndexed(result.viewCache);\n\n    assert(\n      result.viewCache.getServerCache().isFullyInitialized() ||\n        !oldViewCache.getServerCache().isFullyInitialized(),\n      'Once a server snap is complete, it should never go back'\n    );\n\n    this.viewCache_ = result.viewCache;\n\n    return this.generateEventsForChanges_(\n      result.changes,\n      result.viewCache.getEventCache().getNode(),\n      null\n    );\n  }\n\n  /**\n   * @param {!EventRegistration} registration\n   * @return {!Array.<!Event>}\n   */\n  getInitialEvents(registration: EventRegistration): Event[] {\n    const eventSnap = this.viewCache_.getEventCache();\n    const initialChanges: Change[] = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n      const eventNode = eventSnap.getNode() as ChildrenNode;\n      eventNode.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n        initialChanges.push(Change.childAddedChange(key, childNode));\n      });\n    }\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change.valueChange(eventSnap.getNode()));\n    }\n    return this.generateEventsForChanges_(\n      initialChanges,\n      eventSnap.getNode(),\n      registration\n    );\n  }\n\n  /**\n   * @private\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {EventRegistration=} eventRegistration\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges_(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistration?: EventRegistration\n  ): Event[] {\n    const registrations = eventRegistration\n      ? [eventRegistration]\n      : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(\n      changes,\n      eventCache,\n      registrations\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}