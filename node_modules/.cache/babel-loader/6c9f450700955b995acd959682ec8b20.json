{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nfunction deepCopy(value) {\n  return deepExtend(undefined, value);\n}\nexports.deepCopy = deepCopy;\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n */\nfunction deepExtend(target, source) {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      var dateValue = source;\n      return new Date(dateValue.getTime());\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n  for (var prop in source) {\n    if (!source.hasOwnProperty(prop)) {\n      continue;\n    }\n    target[prop] = deepExtend(target[prop], source[prop]);\n  }\n  return target;\n}\nexports.deepExtend = deepExtend;\n// TODO: Really needed (for JSCompiler type checking)?\nfunction patchProperty(obj, prop, value) {\n  obj[prop] = value;\n}\nexports.patchProperty = patchProperty;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAgBA;;;AAGA,kBAA4BA,KAAQ;EAClC,OAAOC,UAAU,CAACC,SAAS,EAAEF,KAAK,CAAC;AACrC;AAFAG;AAIA;;;;;;;;;;;;AAYA,oBAA2BC,MAAW,EAAEC,MAAW;EACjD,IAAI,EAAEA,MAAM,YAAYC,MAAM,CAAC,EAAE;IAC/B,OAAOD,MAAM;EACf;EAEA,QAAQA,MAAM,CAACE,WAAW;IACxB,KAAKC,IAAI;MACP;MACA;MACA,IAAIC,SAAS,GAAIJ,MAAsB;MACvC,OAAO,IAAIG,IAAI,CAACC,SAAS,CAACC,OAAO,EAAE,CAAC;IAEtC,KAAKJ,MAAM;MACT,IAAIF,MAAM,KAAKF,SAAS,EAAE;QACxBE,MAAM,GAAG,EAAE;MACb;MACA;IAEF,KAAKO,KAAK;MACR;MACAP,MAAM,GAAG,EAAE;MACX;IAEF;MACE;MACA,OAAOC,MAAM;EAAC;EAGlB,KAAK,IAAIO,IAAI,IAAIP,MAAM,EAAE;IACvB,IAAI,CAACA,MAAM,CAACQ,cAAc,CAACD,IAAI,CAAC,EAAE;MAChC;IACF;IACAR,MAAM,CAACQ,IAAI,CAAC,GAAGX,UAAU,CAACG,MAAM,CAACQ,IAAI,CAAC,EAAEP,MAAM,CAACO,IAAI,CAAC,CAAC;EACvD;EAEA,OAAOR,MAAM;AACf;AApCAD;AAsCA;AACA,uBAA8BW,GAAQ,EAAEF,IAAY,EAAEZ,KAAU;EAC9Dc,GAAG,CAACF,IAAI,CAAC,GAAGZ,KAAK;AACnB;AAFAG","names":["value","deepExtend","undefined","exports","target","source","Object","constructor","Date","dateValue","getTime","Array","prop","hasOwnProperty","obj"],"sources":["../src/deepCopy.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value);\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n */\nexport function deepExtend(target: any, source: any): any {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      let dateValue = (source as any) as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (let prop in source) {\n    if (!source.hasOwnProperty(prop)) {\n      continue;\n    }\n    target[prop] = deepExtend(target[prop], source[prop]);\n  }\n\n  return target;\n}\n\n// TODO: Really needed (for JSCompiler type checking)?\nexport function patchProperty(obj: any, prop: string, value: any) {\n  obj[prop] = value;\n}\n"]},"metadata":{},"sourceType":"script"}