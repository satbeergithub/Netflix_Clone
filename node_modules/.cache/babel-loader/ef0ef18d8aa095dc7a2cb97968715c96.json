{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Node_1 = require(\"../snap/Node\");\nvar Change_1 = require(\"./Change\");\nvar util_1 = require(\"@firebase/util\");\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n * @constructor\n */\nvar EventGenerator = /** @class */function () {\n  /**\n   *\n   * @param {!Query} query_\n   */\n  function EventGenerator(query_) {\n    this.query_ = query_;\n    /**\n     * @private\n     * @type {!Index}\n     */\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n  /**\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n   *\n   * Notes:\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\n   *    our index.\n   *  - prevName will be calculated based on the index ordering.\n   *\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {!Array.<!EventRegistration>} eventRegistrations\n   * @return {!Array.<!Event>}\n   */\n  EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\n    var _this = this;\n    var events = [];\n    var moves = [];\n    changes.forEach(function (change) {\n      if (change.type === Change_1.Change.CHILD_CHANGED && _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n        moves.push(Change_1.Change.childMovedChange(change.childName, change.snapshotNode));\n      }\n    });\n    this.generateEventsForType_(events, Change_1.Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change_1.Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change_1.Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change_1.Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change_1.Change.VALUE, changes, eventRegistrations, eventCache);\n    return events;\n  };\n  /**\n   * Given changes of a single change type, generate the corresponding events.\n   *\n   * @param {!Array.<!Event>} events\n   * @param {!string} eventType\n   * @param {!Array.<!Change>} changes\n   * @param {!Array.<!EventRegistration>} registrations\n   * @param {!Node} eventCache\n   * @private\n   */\n  EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\n    var _this = this;\n    var filteredChanges = changes.filter(function (change) {\n      return change.type === eventType;\n    });\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(function (change) {\n      var materializedChange = _this.materializeSingleChange_(change, eventCache);\n      registrations.forEach(function (registration) {\n        if (registration.respondsTo(change.type)) {\n          events.push(registration.createEvent(materializedChange, _this.query_));\n        }\n      });\n    });\n  };\n  /**\n   * @param {!Change} change\n   * @param {!Node} eventCache\n   * @return {!Change}\n   * @private\n   */\n  EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName( /** @type {!string} */\n      change.childName, change.snapshotNode, this.index_);\n      return change;\n    }\n  };\n  /**\n   * @param {!Change} a\n   * @param {!Change} b\n   * @return {number}\n   * @private\n   */\n  EventGenerator.prototype.compareChanges_ = function (a, b) {\n    if (a.childName == null || b.childName == null) {\n      throw util_1.assertionError('Should only compare child_ events.');\n    }\n    var aWrapped = new Node_1.NamedNode(a.childName, a.snapshotNode);\n    var bWrapped = new Node_1.NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  };\n  return EventGenerator;\n}();\nexports.EventGenerator = EventGenerator;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AAMA;;;;;;;AAOA;EAGE;;;;EAIA,wBAAoBA,MAAa;IAAb,WAAM,GAANA,MAAM;IACxB;;;;IAIA,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,MAAM,CAACE,cAAc,EAAE,CAACC,QAAQ,EAAE;EACvD;EAEA;;;;;;;;;;;;;;EAcAC,iDAAwB,GAAxB,UACEC,OAAiB,EACjBC,UAAgB,EAChBC,kBAAuC;IAHzC;IAKE,IAAMC,MAAM,GAAY,EAAE;IAC1B,IAAMC,KAAK,GAAa,EAAE;IAE1BJ,OAAO,CAACK,OAAO,CAAC,gBAAM;MACpB,IACEC,MAAM,CAACC,IAAI,KAAKC,eAAM,CAACC,aAAa,IACpCC,KAAI,CAACd,MAAM,CAACe,mBAAmB,CAC7BL,MAAM,CAACM,OAAe,EACtBN,MAAM,CAACO,YAAY,CAEvB,EAAE;QACAT,KAAK,CAACU,IAAI,CACRN,eAAM,CAACO,gBAAgB,CACrBT,MAAM,CAACU,SAAmB,EAC1BV,MAAM,CAACO,YAAY,CACpB,CACF;MACH;IACF,CAAC,CAAC;IAEF,IAAI,CAACI,sBAAsB,CACzBd,MAAM,EACNK,eAAM,CAACU,aAAa,EACpBlB,OAAO,EACPE,kBAAkB,EAClBD,UAAU,CACX;IACD,IAAI,CAACgB,sBAAsB,CACzBd,MAAM,EACNK,eAAM,CAACW,WAAW,EAClBnB,OAAO,EACPE,kBAAkB,EAClBD,UAAU,CACX;IACD,IAAI,CAACgB,sBAAsB,CACzBd,MAAM,EACNK,eAAM,CAACY,WAAW,EAClBhB,KAAK,EACLF,kBAAkB,EAClBD,UAAU,CACX;IACD,IAAI,CAACgB,sBAAsB,CACzBd,MAAM,EACNK,eAAM,CAACC,aAAa,EACpBT,OAAO,EACPE,kBAAkB,EAClBD,UAAU,CACX;IACD,IAAI,CAACgB,sBAAsB,CACzBd,MAAM,EACNK,eAAM,CAACa,KAAK,EACZrB,OAAO,EACPE,kBAAkB,EAClBD,UAAU,CACX;IAED,OAAOE,MAAM;EACf,CAAC;EAED;;;;;;;;;;EAUQJ,+CAAsB,GAA9B,UACEI,MAAe,EACfmB,SAAiB,EACjBtB,OAAiB,EACjBuB,aAAkC,EAClCtB,UAAgB;IALlB;IAOE,IAAMuB,eAAe,GAAGxB,OAAO,CAACyB,MAAM,CAAC,gBAAM;MAAI,aAAM,CAAClB,IAAI,KAAKe,SAAS;IAAzB,CAAyB,CAAC;IAE3EE,eAAe,CAACE,IAAI,CAAC,IAAI,CAACC,eAAe,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrDJ,eAAe,CAACnB,OAAO,CAAC,gBAAM;MAC5B,IAAMwB,kBAAkB,GAAGnB,KAAI,CAACoB,wBAAwB,CACtDxB,MAAM,EACNL,UAAU,CACX;MACDsB,aAAa,CAAClB,OAAO,CAAC,sBAAY;QAChC,IAAI0B,YAAY,CAACC,UAAU,CAAC1B,MAAM,CAACC,IAAI,CAAC,EAAE;UACxCJ,MAAM,CAACW,IAAI,CACTiB,YAAY,CAACE,WAAW,CAACJ,kBAAkB,EAAEnB,KAAI,CAACf,MAAM,CAAC,CAC1D;QACH;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAED;;;;;;EAMQI,iDAAwB,GAAhC,UAAiCO,MAAc,EAAEL,UAAgB;IAC/D,IAAIK,MAAM,CAACC,IAAI,KAAK,OAAO,IAAID,MAAM,CAACC,IAAI,KAAK,eAAe,EAAE;MAC9D,OAAOD,MAAM;IACf,CAAC,MAAM;MACLA,MAAM,CAAC4B,QAAQ,GAAGjC,UAAU,CAACkC,uBAAuB,EAClD;MACA7B,MAAM,CAACU,SAAS,EAChBV,MAAM,CAACO,YAAY,EACnB,IAAI,CAACjB,MAAM,CACZ;MACD,OAAOU,MAAM;IACf;EACF,CAAC;EAED;;;;;;EAMQP,wCAAe,GAAvB,UAAwBqC,CAAS,EAAEC,CAAS;IAC1C,IAAID,CAAC,CAACpB,SAAS,IAAI,IAAI,IAAIqB,CAAC,CAACrB,SAAS,IAAI,IAAI,EAAE;MAC9C,MAAMsB,qBAAc,CAAC,oCAAoC,CAAC;IAC5D;IACA,IAAMC,QAAQ,GAAG,IAAIC,gBAAS,CAACJ,CAAC,CAACpB,SAAS,EAAEoB,CAAC,CAACvB,YAAY,CAAC;IAC3D,IAAM4B,QAAQ,GAAG,IAAID,gBAAS,CAACH,CAAC,CAACrB,SAAS,EAAEqB,CAAC,CAACxB,YAAY,CAAC;IAC3D,OAAO,IAAI,CAACjB,MAAM,CAAC8C,OAAO,CAACH,QAAQ,EAAEE,QAAQ,CAAC;EAChD,CAAC;EACH,qBAAC;AAAD,CAlKA,EAkKC;AAlKYE","names":["query_","index_","getQueryParams","getIndex","EventGenerator","changes","eventCache","eventRegistrations","events","moves","forEach","change","type","Change_1","CHILD_CHANGED","_this","indexedValueChanged","oldSnap","snapshotNode","push","childMovedChange","childName","generateEventsForType_","CHILD_REMOVED","CHILD_ADDED","CHILD_MOVED","VALUE","eventType","registrations","filteredChanges","filter","sort","compareChanges_","bind","materializedChange","materializeSingleChange_","registration","respondsTo","createEvent","prevName","getPredecessorChildName","a","b","util_1","aWrapped","Node_1","bWrapped","compare","exports"],"sources":["../src/core/view/EventGenerator.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../snap/Node';\nimport { Change } from './Change';\nimport { assertionError } from '@firebase/util';\nimport { Query } from '../../api/Query';\nimport { Index } from '../snap/indexes/Index';\nimport { EventRegistration } from './EventRegistration';\nimport { Event } from './Event';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n * @constructor\n */\nexport class EventGenerator {\n  private index_: Index;\n\n  /**\n   *\n   * @param {!Query} query_\n   */\n  constructor(private query_: Query) {\n    /**\n     * @private\n     * @type {!Index}\n     */\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n\n  /**\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n   *\n   * Notes:\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\n   *    our index.\n   *  - prevName will be calculated based on the index ordering.\n   *\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {!Array.<!EventRegistration>} eventRegistrations\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistrations: EventRegistration[]\n  ): Event[] {\n    const events: Event[] = [];\n    const moves: Change[] = [];\n\n    changes.forEach(change => {\n      if (\n        change.type === Change.CHILD_CHANGED &&\n        this.index_.indexedValueChanged(\n          change.oldSnap as Node,\n          change.snapshotNode\n        )\n      ) {\n        moves.push(\n          Change.childMovedChange(\n            change.childName as string,\n            change.snapshotNode\n          )\n        );\n      }\n    });\n\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_REMOVED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_ADDED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_MOVED,\n      moves,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_CHANGED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.VALUE,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n\n    return events;\n  }\n\n  /**\n   * Given changes of a single change type, generate the corresponding events.\n   *\n   * @param {!Array.<!Event>} events\n   * @param {!string} eventType\n   * @param {!Array.<!Change>} changes\n   * @param {!Array.<!EventRegistration>} registrations\n   * @param {!Node} eventCache\n   * @private\n   */\n  private generateEventsForType_(\n    events: Event[],\n    eventType: string,\n    changes: Change[],\n    registrations: EventRegistration[],\n    eventCache: Node\n  ) {\n    const filteredChanges = changes.filter(change => change.type === eventType);\n\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(change => {\n      const materializedChange = this.materializeSingleChange_(\n        change,\n        eventCache\n      );\n      registrations.forEach(registration => {\n        if (registration.respondsTo(change.type)) {\n          events.push(\n            registration.createEvent(materializedChange, this.query_)\n          );\n        }\n      });\n    });\n  }\n\n  /**\n   * @param {!Change} change\n   * @param {!Node} eventCache\n   * @return {!Change}\n   * @private\n   */\n  private materializeSingleChange_(change: Change, eventCache: Node): Change {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(\n        /** @type {!string} */\n        change.childName,\n        change.snapshotNode,\n        this.index_\n      );\n      return change;\n    }\n  }\n\n  /**\n   * @param {!Change} a\n   * @param {!Change} b\n   * @return {number}\n   * @private\n   */\n  private compareChanges_(a: Change, b: Change) {\n    if (a.childName == null || b.childName == null) {\n      throw assertionError('Should only compare child_ events.');\n    }\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}