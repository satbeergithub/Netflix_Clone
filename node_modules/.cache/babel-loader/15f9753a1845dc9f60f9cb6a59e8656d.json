{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path) {\n  if (path.length == 0) {\n    return null;\n  }\n  var index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  var newPath = path.slice(0, index);\n  return newPath;\n}\nexport function child(path, childPath) {\n  var canonicalChildPath = childPath.split('/').filter(function (component) {\n    return component.length > 0;\n  }).join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path) {\n  var index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA;;;AAIA;;;AAGA,OAAM,gBAAiBA,IAAY;EACjC,IAAIA,IAAI,CAACC,MAAM,IAAI,CAAC,EAAE;IACpB,OAAO,IAAI;EACb;EACA,IAAIC,KAAK,GAAGF,IAAI,CAACG,WAAW,CAAC,GAAG,CAAC;EACjC,IAAID,KAAK,KAAK,CAAC,CAAC,EAAE;IAChB,OAAO,EAAE;EACX;EACA,IAAIE,OAAO,GAAGJ,IAAI,CAACK,KAAK,CAAC,CAAC,EAAEH,KAAK,CAAC;EAClC,OAAOE,OAAO;AAChB;AAEA,OAAM,eAAgBJ,IAAY,EAAEM,SAAiB;EACnD,IAAIC,kBAAkB,GAAGD,SAAS,CAC/BE,KAAK,CAAC,GAAG,CAAC,CACVC,MAAM,CAAC,UAASC,SAAS;IACxB,OAAOA,SAAS,CAACT,MAAM,GAAG,CAAC;EAC7B,CAAC,CAAC,CACDU,IAAI,CAAC,GAAG,CAAC;EACZ,IAAIX,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;IACrB,OAAOM,kBAAkB;EAC3B,CAAC,MAAM;IACL,OAAOP,IAAI,GAAG,GAAG,GAAGO,kBAAkB;EACxC;AACF;AAEA;;;;;;AAMA,OAAM,uBAAwBP,IAAY;EACxC,IAAIE,KAAK,GAAGF,IAAI,CAACG,WAAW,CAAC,GAAG,EAAEH,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;EAClD,IAAIC,KAAK,KAAK,CAAC,CAAC,EAAE;IAChB,OAAOF,IAAI;EACb,CAAC,MAAM;IACL,OAAOA,IAAI,CAACK,KAAK,CAACH,KAAK,GAAG,CAAC,CAAC;EAC9B;AACF","names":["path","length","index","lastIndexOf","newPath","slice","childPath","canonicalChildPath","split","filter","component","join"],"sources":["../src/implementation/path.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length == 0) {\n    return null;\n  }\n  let index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  let newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  let canonicalChildPath = childPath\n    .split('/')\n    .filter(function(component) {\n      return component.length > 0;\n    })\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  let index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}