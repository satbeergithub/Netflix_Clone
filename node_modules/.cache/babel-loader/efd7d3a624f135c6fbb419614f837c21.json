{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar EventEmitter_1 = require(\"./EventEmitter\");\nvar util_1 = require(\"@firebase/util\");\n/**\n * @extends {EventEmitter}\n */\nvar VisibilityMonitor = /** @class */function (_super) {\n  __extends(VisibilityMonitor, _super);\n  function VisibilityMonitor() {\n    var _this = _super.call(this, ['visible']) || this;\n    var hidden;\n    var visibilityChange;\n    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    _this.visible_ = true;\n    if (visibilityChange) {\n      document.addEventListener(visibilityChange, function () {\n        var visible = !document[hidden];\n        if (visible !== _this.visible_) {\n          _this.visible_ = visible;\n          _this.trigger('visible', visible);\n        }\n      }, false);\n    }\n    return _this;\n  }\n  VisibilityMonitor.getInstance = function () {\n    return new VisibilityMonitor();\n  };\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\n    util_1.assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  };\n  return VisibilityMonitor;\n}(EventEmitter_1.EventEmitter);\nexports.VisibilityMonitor = VisibilityMonitor;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;AACA;AAIA;;;AAGA;EAAuCA;EAOrC;IAAA,YACEC,kBAAM,CAAC,SAAS,CAAC,CAAC;IAClB,IAAIC,MAAc;IAClB,IAAIC,gBAAwB;IAC5B,IACE,OAAOC,QAAQ,KAAK,WAAW,IAC/B,OAAOA,QAAQ,CAACC,gBAAgB,KAAK,WACvC,EAAE;MACA,IAAI,OAAOD,QAAQ,CAAC,QAAQ,CAAC,KAAK,WAAW,EAAE;QAC7C;QACAD,gBAAgB,GAAG,kBAAkB;QACrCD,MAAM,GAAG,QAAQ;MACnB,CAAC,MAAM,IAAI,OAAOE,QAAQ,CAAC,WAAW,CAAC,KAAK,WAAW,EAAE;QACvDD,gBAAgB,GAAG,qBAAqB;QACxCD,MAAM,GAAG,WAAW;MACtB,CAAC,MAAM,IAAI,OAAOE,QAAQ,CAAC,UAAU,CAAC,KAAK,WAAW,EAAE;QACtDD,gBAAgB,GAAG,oBAAoB;QACvCD,MAAM,GAAG,UAAU;MACrB,CAAC,MAAM,IAAI,OAAOE,QAAQ,CAAC,cAAc,CAAC,KAAK,WAAW,EAAE;QAC1DD,gBAAgB,GAAG,wBAAwB;QAC3CD,MAAM,GAAG,cAAc;MACzB;IACF;IAEA;IACA;IACA;IACA;IACAI,KAAI,CAACC,QAAQ,GAAG,IAAI;IAEpB,IAAIJ,gBAAgB,EAAE;MACpBC,QAAQ,CAACC,gBAAgB,CACvBF,gBAAgB,EAChB;QACE,IAAMK,OAAO,GAAG,CAACJ,QAAQ,CAACF,MAAM,CAAC;QACjC,IAAIM,OAAO,KAAKF,KAAI,CAACC,QAAQ,EAAE;UAC7BD,KAAI,CAACC,QAAQ,GAAGC,OAAO;UACvBF,KAAI,CAACG,OAAO,CAAC,SAAS,EAAED,OAAO,CAAC;QAClC;MACF,CAAC,EACD,KAAK,CACN;IACH;;EACF;EA/COE,6BAAW,GAAlB;IACE,OAAO,IAAIA,iBAAiB,EAAE;EAChC,CAAC;EA+CD;;;;EAIAA,2CAAe,GAAf,UAAgBC,SAAiB;IAC/BC,aAAM,CAACD,SAAS,KAAK,SAAS,EAAE,sBAAsB,GAAGA,SAAS,CAAC;IACnE,OAAO,CAAC,IAAI,CAACJ,QAAQ,CAAC;EACxB,CAAC;EACH,wBAAC;AAAD,CA5DA,CAAuCM,2BAAY;AAAtCC","names":["__extends","_super","hidden","visibilityChange","document","addEventListener","_this","visible_","visible","trigger","VisibilityMonitor","eventType","util_1","EventEmitter_1","exports"],"sources":["../src/core/util/VisibilityMonitor.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from './EventEmitter';\nimport { assert } from '@firebase/util';\n\ndeclare const document: any;\n\n/**\n * @extends {EventEmitter}\n */\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n"]},"metadata":{},"sourceType":"script"}