{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"@firebase/util\");\nvar storage_1 = require(\"./storage/storage\");\nvar Constants_1 = require(\"../realtime/Constants\");\n/**\n * A class that holds metadata about a Repo object\n *\n * @constructor\n */\nvar RepoInfo = /** @class */function () {\n  /**\n   * @param {string} host Hostname portion of the url for the repo\n   * @param {boolean} secure Whether or not this repo is accessed over ssl\n   * @param {string} namespace The namespace represented by the repo\n   * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\n   * @param {string=} persistenceKey Override the default session persistence storage key\n   */\n  function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey) {\n    if (persistenceKey === void 0) {\n      persistenceKey = '';\n    }\n    this.secure = secure;\n    this.namespace = namespace;\n    this.webSocketOnly = webSocketOnly;\n    this.persistenceKey = persistenceKey;\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost = storage_1.PersistentStorage.get('host:' + host) || this.host;\n  }\n  RepoInfo.prototype.needsQueryParam = function () {\n    return this.host !== this.internalHost;\n  };\n  RepoInfo.prototype.isCacheableHost = function () {\n    return this.internalHost.substr(0, 2) === 's-';\n  };\n  RepoInfo.prototype.isDemoHost = function () {\n    return this.domain === 'firebaseio-demo.com';\n  };\n  RepoInfo.prototype.isCustomHost = function () {\n    return this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com';\n  };\n  RepoInfo.prototype.updateHost = function (newHost) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        storage_1.PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  };\n  /**\n   * Returns the websocket URL for this repo\n   * @param {string} type of connection\n   * @param {Object} params list\n   * @return {string} The URL for this repo\n   */\n  RepoInfo.prototype.connectionURL = function (type, params) {\n    util_1.assert(typeof type === 'string', 'typeof type must == string');\n    util_1.assert(typeof params === 'object', 'typeof params must == object');\n    var connURL;\n    if (type === Constants_1.WEBSOCKET) {\n      connURL = (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === Constants_1.LONG_POLLING) {\n      connURL = (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n    var pairs = [];\n    util_2.forEach(params, function (key, value) {\n      pairs.push(key + '=' + value);\n    });\n    return connURL + pairs.join('&');\n  };\n  /** @return {string} */\n  RepoInfo.prototype.toString = function () {\n    var str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  };\n  /** @return {string} */\n  RepoInfo.prototype.toURLString = function () {\n    return (this.secure ? 'https://' : 'http://') + this.host;\n  };\n  return RepoInfo;\n}();\nexports.RepoInfo = RepoInfo;","map":{"version":3,"mappings":"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","names":["host","secure","namespace","webSocketOnly","persistenceKey","toLowerCase","domain","substr","indexOf","internalHost","storage_1","get","RepoInfo","newHost","isCacheableHost","set","type","params","util_1","connURL","Constants_1","Error","needsQueryParam","pairs","util_2","key","value","push","join","str","toURLString","exports"],"sources":["../src/core/RepoInfo.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { forEach } from '@firebase/util';\nimport { PersistentStorage } from './storage/storage';\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\n/**\n * A class that holds metadata about a Repo object\n *\n * @constructor\n */\nexport class RepoInfo {\n  host: string;\n  domain: string;\n  internalHost: string;\n\n  /**\n   * @param {string} host Hostname portion of the url for the repo\n   * @param {boolean} secure Whether or not this repo is accessed over ssl\n   * @param {string} namespace The namespace represented by the repo\n   * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\n   * @param {string=} persistenceKey Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public secure: boolean,\n    public namespace: string,\n    public webSocketOnly: boolean,\n    public persistenceKey: string = ''\n  ) {\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this.host;\n  }\n\n  needsQueryParam(): boolean {\n    return this.host !== this.internalHost;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isDemoHost() {\n    return this.domain === 'firebaseio-demo.com';\n  }\n\n  isCustomHost() {\n    return (\n      this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  updateHost(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  }\n\n  /**\n   * Returns the websocket URL for this repo\n   * @param {string} type of connection\n   * @param {Object} params list\n   * @return {string} The URL for this repo\n   */\n  connectionURL(type: string, params: { [k: string]: string }): string {\n    assert(typeof type === 'string', 'typeof type must == string');\n    assert(typeof params === 'object', 'typeof params must == object');\n\n    let connURL: string;\n    if (type === WEBSOCKET) {\n      connURL =\n        (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === LONG_POLLING) {\n      connURL =\n        (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n\n    const pairs: string[] = [];\n\n    forEach(params, (key: string, value: string) => {\n      pairs.push(key + '=' + value);\n    });\n\n    return connURL + pairs.join('&');\n  }\n\n  /** @return {string} */\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  /** @return {string} */\n  toURLString(): string {\n    return (this.secure ? 'https://' : 'http://') + this.host;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}