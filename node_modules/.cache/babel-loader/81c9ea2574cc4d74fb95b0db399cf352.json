{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar util_1 = require(\"@firebase/util\");\n/**\n * Implements a set with a count of elements.\n *\n * @template K, V\n */\nvar CountedSet = /** @class */function () {\n  function CountedSet() {\n    this.set = {};\n  }\n  /**\n   * @param {!K} item\n   * @param {V} val\n   */\n  CountedSet.prototype.add = function (item, val) {\n    this.set[item] = val !== null ? val : true;\n  };\n  /**\n   * @param {!K} key\n   * @return {boolean}\n   */\n  CountedSet.prototype.contains = function (key) {\n    return util_1.contains(this.set, key);\n  };\n  /**\n   * @param {!K} item\n   * @return {V}\n   */\n  CountedSet.prototype.get = function (item) {\n    return this.contains(item) ? this.set[item] : undefined;\n  };\n  /**\n   * @param {!K} item\n   */\n  CountedSet.prototype.remove = function (item) {\n    delete this.set[item];\n  };\n  /**\n   * Deletes everything in the set\n   */\n  CountedSet.prototype.clear = function () {\n    this.set = {};\n  };\n  /**\n   * True if there's nothing in the set\n   * @return {boolean}\n   */\n  CountedSet.prototype.isEmpty = function () {\n    return util_1.isEmpty(this.set);\n  };\n  /**\n   * @return {number} The number of items in the set\n   */\n  CountedSet.prototype.count = function () {\n    return util_1.getCount(this.set);\n  };\n  /**\n   * Run a function on each k,v pair in the set\n   * @param {function(K, V)} fn\n   */\n  CountedSet.prototype.each = function (fn) {\n    util_1.forEach(this.set, function (k, v) {\n      return fn(k, v);\n    });\n  };\n  /**\n   * Mostly for debugging\n   * @return {Array.<K>} The keys present in this CountedSet\n   */\n  CountedSet.prototype.keys = function () {\n    var keys = [];\n    util_1.forEach(this.set, function (k) {\n      keys.push(k);\n    });\n    return keys;\n  };\n  return CountedSet;\n}();\nexports.CountedSet = CountedSet;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAgBA;AAEA;;;;;AAKA;EAAA;IACE,QAAG,GAAuB,EAAE;EA0E9B;EAxEE;;;;EAIAA,wBAAG,GAAH,UAAIC,IAAO,EAAEC,GAAM;IACjB,IAAI,CAACC,GAAG,CAACF,IAAW,CAAC,GAAGC,GAAG,KAAK,IAAI,GAAGA,GAAG,GAAI,IAAY;EAC5D,CAAC;EAED;;;;EAIAF,6BAAQ,GAAR,UAASI,GAAM;IACb,OAAOC,eAAQ,CAAC,IAAI,CAACF,GAAG,EAAEC,GAAG,CAAC;EAChC,CAAC;EAED;;;;EAIAJ,wBAAG,GAAH,UAAIC,IAAO;IACT,OAAO,IAAI,CAACK,QAAQ,CAACL,IAAI,CAAC,GAAG,IAAI,CAACE,GAAG,CAACF,IAAW,CAAC,GAAGM,SAAS;EAChE,CAAC;EAED;;;EAGAP,2BAAM,GAAN,UAAOC,IAAO;IACZ,OAAO,IAAI,CAACE,GAAG,CAACF,IAAW,CAAC;EAC9B,CAAC;EAED;;;EAGAD,0BAAK,GAAL;IACE,IAAI,CAACG,GAAG,GAAG,EAAE;EACf,CAAC;EAED;;;;EAIAH,4BAAO,GAAP;IACE,OAAOK,cAAO,CAAC,IAAI,CAACF,GAAG,CAAC;EAC1B,CAAC;EAED;;;EAGAH,0BAAK,GAAL;IACE,OAAOK,eAAQ,CAAC,IAAI,CAACF,GAAG,CAAC;EAC3B,CAAC;EAED;;;;EAIAH,yBAAI,GAAJ,UAAKQ,EAAwB;IAC3BH,cAAO,CAAC,IAAI,CAACF,GAAG,EAAE,UAACM,CAAI,EAAEC,CAAI;MAAK,SAAE,CAACD,CAAC,EAAEC,CAAC,CAAC;IAAR,CAAQ,CAAC;EAC7C,CAAC;EAED;;;;EAIAV,yBAAI,GAAJ;IACE,IAAMW,IAAI,GAAQ,EAAE;IACpBN,cAAO,CAAC,IAAI,CAACF,GAAG,EAAE,UAACM,CAAI;MACrBE,IAAI,CAACC,IAAI,CAACH,CAAC,CAAC;IACd,CAAC,CAAC;IACF,OAAOE,IAAI;EACb,CAAC;EACH,iBAAC;AAAD,CA3EA,EA2EC;AA3EYE","names":["CountedSet","item","val","set","key","util_1","contains","undefined","fn","k","v","keys","push","exports"],"sources":["../src/core/util/CountedSet.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isEmpty, getCount, forEach, contains } from '@firebase/util';\n\n/**\n * Implements a set with a count of elements.\n *\n * @template K, V\n */\nexport class CountedSet<K, V> {\n  set: { [k: string]: V } = {};\n\n  /**\n   * @param {!K} item\n   * @param {V} val\n   */\n  add(item: K, val: V) {\n    this.set[item as any] = val !== null ? val : (true as any);\n  }\n\n  /**\n   * @param {!K} key\n   * @return {boolean}\n   */\n  contains(key: K) {\n    return contains(this.set, key);\n  }\n\n  /**\n   * @param {!K} item\n   * @return {V}\n   */\n  get(item: K): V | void {\n    return this.contains(item) ? this.set[item as any] : undefined;\n  }\n\n  /**\n   * @param {!K} item\n   */\n  remove(item: K) {\n    delete this.set[item as any];\n  }\n\n  /**\n   * Deletes everything in the set\n   */\n  clear() {\n    this.set = {};\n  }\n\n  /**\n   * True if there's nothing in the set\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return isEmpty(this.set);\n  }\n\n  /**\n   * @return {number} The number of items in the set\n   */\n  count(): number {\n    return getCount(this.set);\n  }\n\n  /**\n   * Run a function on each k,v pair in the set\n   * @param {function(K, V)} fn\n   */\n  each(fn: (k: K, v: V) => void) {\n    forEach(this.set, (k: K, v: V) => fn(k, v));\n  }\n\n  /**\n   * Mostly for debugging\n   * @return {Array.<K>} The keys present in this CountedSet\n   */\n  keys(): K[] {\n    const keys: K[] = [];\n    forEach(this.set, (k: K) => {\n      keys.push(k);\n    });\n    return keys;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}