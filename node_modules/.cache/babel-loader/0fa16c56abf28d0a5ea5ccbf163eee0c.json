{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param {!string} fnName The function name\n * @param {!number} minCount The minimum number of arguments to allow for the function call\n * @param {!number} maxCount The maximum number of argument to allow for the function call\n * @param {!number} argCount The actual number of arguments provided.\n */\nexports.validateArgCount = function (fnName, minCount, maxCount, argCount) {\n  var argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    var error = fnName + ' failed: Was called with ' + argCount + (argCount === 1 ? ' argument.' : ' arguments.') + ' Expects ' + argError + '.';\n    throw new Error(error);\n  }\n};\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param {!string} fnName The function name\n * @param {!number} argumentNumber The index of the argument\n * @param {boolean} optional Whether or not the argument is optional\n * @return {!string} The prefix to add to the error thrown for validation.\n */\nfunction errorPrefix(fnName, argumentNumber, optional) {\n  var argName = '';\n  switch (argumentNumber) {\n    case 1:\n      argName = optional ? 'first' : 'First';\n      break;\n    case 2:\n      argName = optional ? 'second' : 'Second';\n      break;\n    case 3:\n      argName = optional ? 'third' : 'Third';\n      break;\n    case 4:\n      argName = optional ? 'fourth' : 'Fourth';\n      break;\n    default:\n      throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');\n  }\n  var error = fnName + ' failed: ';\n  error += argName + ' argument ';\n  return error;\n}\nexports.errorPrefix = errorPrefix;\n/**\n * @param {!string} fnName\n * @param {!number} argumentNumber\n * @param {!string} namespace\n * @param {boolean} optional\n */\nfunction validateNamespace(fnName, argumentNumber, namespace, optional) {\n  if (optional && !namespace) return;\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid firebase namespace.');\n  }\n}\nexports.validateNamespace = validateNamespace;\nfunction validateCallback(fnName, argumentNumber, callback, optional) {\n  if (optional && !callback) return;\n  if (typeof callback !== 'function') throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid function.');\n}\nexports.validateCallback = validateCallback;\nfunction validateContextObject(fnName, argumentNumber, context, optional) {\n  if (optional && !context) return;\n  if (typeof context !== 'object' || context === null) throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid context object.');\n}\nexports.validateContextObject = validateContextObject;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;AASaA,wBAAgB,GAAG,UAASC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,QAAQ;EAC3E,IAAIC,QAAQ;EACZ,IAAID,QAAQ,GAAGF,QAAQ,EAAE;IACvBG,QAAQ,GAAG,WAAW,GAAGH,QAAQ;EACnC,CAAC,MAAM,IAAIE,QAAQ,GAAGD,QAAQ,EAAE;IAC9BE,QAAQ,GAAGF,QAAQ,KAAK,CAAC,GAAG,MAAM,GAAG,eAAe,GAAGA,QAAQ;EACjE;EACA,IAAIE,QAAQ,EAAE;IACZ,IAAIC,KAAK,GACPL,MAAM,GACN,2BAA2B,GAC3BG,QAAQ,IACPA,QAAQ,KAAK,CAAC,GAAG,YAAY,GAAG,aAAa,CAAC,GAC/C,WAAW,GACXC,QAAQ,GACR,GAAG;IACL,MAAM,IAAIE,KAAK,CAACD,KAAK,CAAC;EACxB;AACF,CAAC;AAED;;;;;;;;AAQA,qBAA4BL,MAAM,EAAEO,cAAc,EAAEC,QAAQ;EAC1D,IAAIC,OAAO,GAAG,EAAE;EAChB,QAAQF,cAAc;IACpB,KAAK,CAAC;MACJE,OAAO,GAAGD,QAAQ,GAAG,OAAO,GAAG,OAAO;MACtC;IACF,KAAK,CAAC;MACJC,OAAO,GAAGD,QAAQ,GAAG,QAAQ,GAAG,QAAQ;MACxC;IACF,KAAK,CAAC;MACJC,OAAO,GAAGD,QAAQ,GAAG,OAAO,GAAG,OAAO;MACtC;IACF,KAAK,CAAC;MACJC,OAAO,GAAGD,QAAQ,GAAG,QAAQ,GAAG,QAAQ;MACxC;IACF;MACE,MAAM,IAAIF,KAAK,CACb,iEAAiE,CAClE;EAAC;EAGN,IAAID,KAAK,GAAGL,MAAM,GAAG,WAAW;EAEhCK,KAAK,IAAII,OAAO,GAAG,YAAY;EAC/B,OAAOJ,KAAK;AACd;AAzBAN;AA2BA;;;;;;AAMA,2BAAkCC,MAAM,EAAEO,cAAc,EAAEG,SAAS,EAAEF,QAAQ;EAC3E,IAAIA,QAAQ,IAAI,CAACE,SAAS,EAAE;EAC5B,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;IACjC;IACA,MAAM,IAAIJ,KAAK,CACbK,WAAW,CAACX,MAAM,EAAEO,cAAc,EAAEC,QAAQ,CAAC,GAC3C,qCAAqC,CACxC;EACH;AACF;AATAT;AAWA,0BAAiCC,MAAM,EAAEO,cAAc,EAAEK,QAAQ,EAAEJ,QAAQ;EACzE,IAAIA,QAAQ,IAAI,CAACI,QAAQ,EAAE;EAC3B,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAChC,MAAM,IAAIN,KAAK,CACbK,WAAW,CAACX,MAAM,EAAEO,cAAc,EAAEC,QAAQ,CAAC,GAC3C,2BAA2B,CAC9B;AACL;AAPAT;AASA,+BACEC,MAAM,EACNO,cAAc,EACdM,OAAO,EACPL,QAAQ;EAER,IAAIA,QAAQ,IAAI,CAACK,OAAO,EAAE;EAC1B,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EACjD,MAAM,IAAIP,KAAK,CACbK,WAAW,CAACX,MAAM,EAAEO,cAAc,EAAEC,QAAQ,CAAC,GAC3C,iCAAiC,CACpC;AACL;AAZAT","names":["exports","fnName","minCount","maxCount","argCount","argError","error","Error","argumentNumber","optional","argName","namespace","errorPrefix","callback","context"],"sources":["../src/validation.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param {!string} fnName The function name\n * @param {!number} minCount The minimum number of arguments to allow for the function call\n * @param {!number} maxCount The maximum number of argument to allow for the function call\n * @param {!number} argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function(fnName, minCount, maxCount, argCount) {\n  var argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    var error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param {!string} fnName The function name\n * @param {!number} argumentNumber The index of the argument\n * @param {boolean} optional Whether or not the argument is optional\n * @return {!string} The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(fnName, argumentNumber, optional) {\n  var argName = '';\n  switch (argumentNumber) {\n    case 1:\n      argName = optional ? 'first' : 'First';\n      break;\n    case 2:\n      argName = optional ? 'second' : 'Second';\n      break;\n    case 3:\n      argName = optional ? 'third' : 'Third';\n      break;\n    case 4:\n      argName = optional ? 'fourth' : 'Fourth';\n      break;\n    default:\n      throw new Error(\n        'errorPrefix called with argumentNumber > 4.  Need to update it?'\n      );\n  }\n\n  var error = fnName + ' failed: ';\n\n  error += argName + ' argument ';\n  return error;\n}\n\n/**\n * @param {!string} fnName\n * @param {!number} argumentNumber\n * @param {!string} namespace\n * @param {boolean} optional\n */\nexport function validateNamespace(fnName, argumentNumber, namespace, optional) {\n  if (optional && !namespace) return;\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid firebase namespace.'\n    );\n  }\n}\n\nexport function validateCallback(fnName, argumentNumber, callback, optional) {\n  if (optional && !callback) return;\n  if (typeof callback !== 'function')\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid function.'\n    );\n}\n\nexport function validateContextObject(\n  fnName,\n  argumentNumber,\n  context,\n  optional\n) {\n  if (optional && !context) return;\n  if (typeof context !== 'object' || context === null)\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid context object.'\n    );\n}\n"]},"metadata":{},"sourceType":"script"}