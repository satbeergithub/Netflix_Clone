{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport { StringFormat } from './src/implementation/string';\nimport { TaskEvent } from './src/implementation/taskenums';\nimport { TaskState } from './src/implementation/taskenums';\nimport { XhrIoPool } from './src/implementation/xhriopool';\nimport { Reference } from './src/reference';\nimport { Service } from './src/service';\n/**\n * Type constant for Firebase Storage.\n */\nvar STORAGE_TYPE = 'storage';\nfunction factory(app, unused, opt_url) {\n  return new Service(app, new XhrIoPool(), opt_url);\n}\nexport function registerStorage(instance) {\n  var namespaceExports = {\n    // no-inline\n    TaskState: TaskState,\n    TaskEvent: TaskEvent,\n    StringFormat: StringFormat,\n    Storage: Service,\n    Reference: Reference\n  };\n  instance.INTERNAL.registerService(STORAGE_TYPE, factory, namespaceExports, undefined,\n  // Allow multiple storage instances per app.\n  true);\n}\nregisterStorage(firebase);","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,OAAOA,QAAiD,MAAM,eAAe;AAC7E,SAASC,YAAY,QAAQ,6BAA6B;AAC1D,SAASC,SAAS,QAAQ,gCAAgC;AAC1D,SAASC,SAAS,QAAQ,gCAAgC;AAC1D,SAASC,SAAS,QAAQ,gCAAgC;AAC1D,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,OAAO,QAAQ,eAAe;AAEvC;;;AAGA,IAAMC,YAAY,GAAG,SAAS;AAE9B,iBAAiBC,GAAgB,EAAEC,MAAW,EAAEC,OAAgB;EAC9D,OAAO,IAAIJ,OAAO,CAACE,GAAG,EAAE,IAAIJ,SAAS,EAAE,EAAEM,OAAO,CAAC;AACnD;AAEA,OAAM,yBAA0BC,QAAQ;EACtC,IAAIC,gBAAgB,GAAG;IACrB;IACAT,SAAS,EAAEA,SAAS;IACpBD,SAAS,EAAEA,SAAS;IACpBD,YAAY,EAAEA,YAAY;IAC1BY,OAAO,EAAEP,OAAO;IAChBD,SAAS,EAAEA;GACZ;EACDM,QAAQ,CAACG,QAAQ,CAACC,eAAe,CAC/BR,YAAY,EACZS,OAAiC,EACjCJ,gBAAgB,EAChBK,SAAS;EACT;EACA,IAAI,CACL;AACH;AAEAC,eAAe,CAAClB,QAAQ,CAAC","names":["firebase","StringFormat","TaskEvent","TaskState","XhrIoPool","Reference","Service","STORAGE_TYPE","app","unused","opt_url","instance","namespaceExports","Storage","INTERNAL","registerService","factory","undefined","registerStorage"],"sources":["../index.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, { FirebaseApp, FirebaseServiceFactory } from '@firebase/app';\nimport { StringFormat } from './src/implementation/string';\nimport { TaskEvent } from './src/implementation/taskenums';\nimport { TaskState } from './src/implementation/taskenums';\nimport { XhrIoPool } from './src/implementation/xhriopool';\nimport { Reference } from './src/reference';\nimport { Service } from './src/service';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage';\n\nfunction factory(app: FirebaseApp, unused: any, opt_url?: string): Service {\n  return new Service(app, new XhrIoPool(), opt_url);\n}\n\nexport function registerStorage(instance) {\n  let namespaceExports = {\n    // no-inline\n    TaskState: TaskState,\n    TaskEvent: TaskEvent,\n    StringFormat: StringFormat,\n    Storage: Service,\n    Reference: Reference\n  };\n  instance.INTERNAL.registerService(\n    STORAGE_TYPE,\n    factory as FirebaseServiceFactory,\n    namespaceExports,\n    undefined,\n    // Allow multiple storage instances per app.\n    true\n  );\n}\n\nregisterStorage(firebase);\n"]},"metadata":{},"sourceType":"module"}