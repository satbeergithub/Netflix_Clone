{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ChildrenNode_1 = require(\"../snap/ChildrenNode\");\nvar CacheNode_1 = require(\"./CacheNode\");\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n *\n * @constructor\n */\nvar ViewCache = /** @class */function () {\n  /**\n   *\n   * @param {!CacheNode} eventCache_\n   * @param {!CacheNode} serverCache_\n   */\n  function ViewCache(eventCache_, serverCache_) {\n    this.eventCache_ = eventCache_;\n    this.serverCache_ = serverCache_;\n  }\n  /**\n   * @param {!Node} eventSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {\n    return new ViewCache(new CacheNode_1.CacheNode(eventSnap, complete, filtered), this.serverCache_);\n  };\n  /**\n   * @param {!Node} serverSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {\n    return new ViewCache(this.eventCache_, new CacheNode_1.CacheNode(serverSnap, complete, filtered));\n  };\n  /**\n   * @return {!CacheNode}\n   */\n  ViewCache.prototype.getEventCache = function () {\n    return this.eventCache_;\n  };\n  /**\n   * @return {?Node}\n   */\n  ViewCache.prototype.getCompleteEventSnap = function () {\n    return this.eventCache_.isFullyInitialized() ? this.eventCache_.getNode() : null;\n  };\n  /**\n   * @return {!CacheNode}\n   */\n  ViewCache.prototype.getServerCache = function () {\n    return this.serverCache_;\n  };\n  /**\n   * @return {?Node}\n   */\n  ViewCache.prototype.getCompleteServerSnap = function () {\n    return this.serverCache_.isFullyInitialized() ? this.serverCache_.getNode() : null;\n  };\n  /**\n   * @const\n   * @type {ViewCache}\n   */\n  ViewCache.Empty = new ViewCache(new CacheNode_1.CacheNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, /*fullyInitialized=*/false, /*filtered=*/false), new CacheNode_1.CacheNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, /*fullyInitialized=*/false, /*filtered=*/false));\n  return ViewCache;\n}();\nexports.ViewCache = ViewCache;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAgBA;AACA;AAGA;;;;;;;AAOA;EACE;;;;;EAKA,mBACmBA,WAAsB,EACtBC,YAAuB;IADvB,gBAAW,GAAXD,WAAW;IACX,iBAAY,GAAZC,YAAY;EAC5B;EAmBH;;;;;;EAMAC,mCAAe,GAAf,UACEC,SAAe,EACfC,QAAiB,EACjBC,QAAiB;IAEjB,OAAO,IAAIH,SAAS,CAClB,IAAII,qBAAS,CAACH,SAAS,EAAEC,QAAQ,EAAEC,QAAQ,CAAC,EAC5C,IAAI,CAACJ,YAAY,CAClB;EACH,CAAC;EAED;;;;;;EAMAC,oCAAgB,GAAhB,UACEK,UAAgB,EAChBH,QAAiB,EACjBC,QAAiB;IAEjB,OAAO,IAAIH,SAAS,CAClB,IAAI,CAACF,WAAW,EAChB,IAAIM,qBAAS,CAACC,UAAU,EAAEH,QAAQ,EAAEC,QAAQ,CAAC,CAC9C;EACH,CAAC;EAED;;;EAGAH,iCAAa,GAAb;IACE,OAAO,IAAI,CAACF,WAAW;EACzB,CAAC;EAED;;;EAGAE,wCAAoB,GAApB;IACE,OAAO,IAAI,CAACF,WAAW,CAACQ,kBAAkB,EAAE,GACxC,IAAI,CAACR,WAAW,CAACS,OAAO,EAAE,GAC1B,IAAI;EACV,CAAC;EAED;;;EAGAP,kCAAc,GAAd;IACE,OAAO,IAAI,CAACD,YAAY;EAC1B,CAAC;EAED;;;EAGAC,yCAAqB,GAArB;IACE,OAAO,IAAI,CAACD,YAAY,CAACO,kBAAkB,EAAE,GACzC,IAAI,CAACP,YAAY,CAACQ,OAAO,EAAE,GAC3B,IAAI;EACV,CAAC;EAjFD;;;;EAIOP,eAAK,GAAG,IAAIA,SAAS,CAC1B,IAAII,qBAAS,CACXI,2BAAY,CAACC,UAAU,EACvB,qBAAsB,KAAK,EAC3B,aAAc,KAAK,CACpB,EACD,IAAIL,qBAAS,CACXI,2BAAY,CAACC,UAAU,EACvB,qBAAsB,KAAK,EAC3B,aAAc,KAAK,CACpB,CACF;EAmEH,gBAAC;CA7FD,EA6FC;AA7FYC","names":["eventCache_","serverCache_","ViewCache","eventSnap","complete","filtered","CacheNode_1","serverSnap","isFullyInitialized","getNode","ChildrenNode_1","EMPTY_NODE","exports"],"sources":["../src/core/view/ViewCache.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { Node } from '../snap/Node';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n *\n * @constructor\n */\nexport class ViewCache {\n  /**\n   *\n   * @param {!CacheNode} eventCache_\n   * @param {!CacheNode} serverCache_\n   */\n  constructor(\n    private readonly eventCache_: CacheNode,\n    private readonly serverCache_: CacheNode\n  ) {}\n\n  /**\n   * @const\n   * @type {ViewCache}\n   */\n  static Empty = new ViewCache(\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    ),\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    )\n  );\n\n  /**\n   * @param {!Node} eventSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateEventSnap(\n    eventSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      new CacheNode(eventSnap, complete, filtered),\n      this.serverCache_\n    );\n  }\n\n  /**\n   * @param {!Node} serverSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateServerSnap(\n    serverSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      this.eventCache_,\n      new CacheNode(serverSnap, complete, filtered)\n    );\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getEventCache(): CacheNode {\n    return this.eventCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteEventSnap(): Node | null {\n    return this.eventCache_.isFullyInitialized()\n      ? this.eventCache_.getNode()\n      : null;\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getServerCache(): CacheNode {\n    return this.serverCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteServerSnap(): Node | null {\n    return this.serverCache_.isFullyInitialized()\n      ? this.serverCache_.getNode()\n      : null;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}