{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar util_1 = require(\"@firebase/util\");\nvar Path_1 = require(\"../util/Path\");\nvar Operation_1 = require(\"./Operation\");\nvar AckUserWrite = /** @class */function () {\n  /**\n   *\n   * @param {!Path} path\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\n   * @param {!boolean} revert\n   */\n  function AckUserWrite( /**@inheritDoc */path, /**@inheritDoc */affectedTree, /**@inheritDoc */revert) {\n    this.path = path;\n    this.affectedTree = affectedTree;\n    this.revert = revert;\n    /** @inheritDoc */\n    this.type = Operation_1.OperationType.ACK_USER_WRITE;\n    /** @inheritDoc */\n    this.source = Operation_1.OperationSource.User;\n  }\n  /**\n   * @inheritDoc\n   */\n  AckUserWrite.prototype.operationForChild = function (childName) {\n    if (!this.path.isEmpty()) {\n      util_1.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\n      return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\n    } else if (this.affectedTree.value != null) {\n      util_1.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      var childTree = this.affectedTree.subtree(new Path_1.Path(childName));\n      return new AckUserWrite(Path_1.Path.Empty, childTree, this.revert);\n    }\n  };\n  return AckUserWrite;\n}();\nexports.AckUserWrite = AckUserWrite;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AAGA;EAOE;;;;;;EAMA,uBACE,iBAAyBA,IAAU,EACnC,iBAAyBC,YAAoC,EAC7D,iBAAyBC,MAAe;IAFf,SAAI,GAAJF,IAAI;IACJ,iBAAY,GAAZC,YAAY;IACZ,WAAM,GAANC,MAAM;IAfjC;IACA,SAAI,GAAGC,yBAAa,CAACC,cAAc;IAEnC;IACA,WAAM,GAAGD,2BAAe,CAACE,IAAI;EAY1B;EAEH;;;EAGAC,wCAAiB,GAAjB,UAAkBC,SAAiB;IACjC,IAAI,CAAC,IAAI,CAACP,IAAI,CAACQ,OAAO,EAAE,EAAE;MACxBC,aAAM,CACJ,IAAI,CAACT,IAAI,CAACU,QAAQ,EAAE,KAAKH,SAAS,EAClC,+CAA+C,CAChD;MACD,OAAO,IAAID,YAAY,CACrB,IAAI,CAACN,IAAI,CAACW,QAAQ,EAAE,EACpB,IAAI,CAACV,YAAY,EACjB,IAAI,CAACC,MAAM,CACZ;IACH,CAAC,MAAM,IAAI,IAAI,CAACD,YAAY,CAACW,KAAK,IAAI,IAAI,EAAE;MAC1CH,aAAM,CACJ,IAAI,CAACR,YAAY,CAACY,QAAQ,CAACL,OAAO,EAAE,EACpC,0DAA0D,CAC3D;MACD;MACA,OAAO,IAAI;IACb,CAAC,MAAM;MACL,IAAMM,SAAS,GAAG,IAAI,CAACb,YAAY,CAACc,OAAO,CAAC,IAAIC,WAAI,CAACT,SAAS,CAAC,CAAC;MAChE,OAAO,IAAID,YAAY,CAACU,WAAI,CAACC,KAAK,EAAEH,SAAS,EAAE,IAAI,CAACZ,MAAM,CAAC;IAC7D;EACF,CAAC;EACH,mBAAC;AAAD,CA7CA,EA6CC;AA7CYgB","names":["path","affectedTree","revert","Operation_1","ACK_USER_WRITE","User","AckUserWrite","childName","isEmpty","util_1","getFront","popFront","value","children","childTree","subtree","Path_1","Empty","exports"],"sources":["../src/core/operation/AckUserWrite.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { ImmutableTree } from '../util/ImmutableTree';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = OperationSource.User;\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\n   * @param {!boolean} revert\n   */\n  constructor(\n    /**@inheritDoc */ public path: Path,\n    /**@inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /**@inheritDoc */ public revert: boolean\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): AckUserWrite {\n    if (!this.path.isEmpty()) {\n      assert(\n        this.path.getFront() === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        this.path.popFront(),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(Path.Empty, childTree, this.revert);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}