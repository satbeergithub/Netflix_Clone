{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport ControllerInterface from './controller-interface';\nimport Errors from '../models/errors';\nimport WorkerPageMessage from '../models/worker-page-message';\nimport DefaultSW from '../models/default-sw';\nimport NOTIFICATION_PERMISSION from '../models/notification-permission';\nimport { createSubscribe } from '@firebase/util';\nvar WindowController = /** @class */function (_super) {\n  __extends(WindowController, _super);\n  /**\n   * A service that provides a MessagingService instance.\n   * @param {!firebase.app.App} app\n   */\n  function WindowController(app) {\n    var _this = _super.call(this, app) || this;\n    /**\n     * @private\n     * @type {ServiceWorkerRegistration}\n     */\n    _this.registrationToUse_;\n    /**\n     * @private\n     * @type {Promise}\n     */\n    _this.manifestCheckPromise_;\n    /**\n     * @private\n     * @type {firebase.Observer}\n     */\n    _this.messageObserver_ = null;\n    /**\n     * @private {!firebase.Subscribe} The subscribe function to the onMessage\n     * observer.\n     */\n    _this.onMessage_ = createSubscribe(function (observer) {\n      _this.messageObserver_ = observer;\n    });\n    /**\n     * @private\n     * @type {firebase.Observer}\n     */\n    _this.tokenRefreshObserver_ = null;\n    _this.onTokenRefresh_ = createSubscribe(function (observer) {\n      _this.tokenRefreshObserver_ = observer;\n    });\n    _this.setupSWMessageListener_();\n    return _this;\n  }\n  /**\n   * This method returns an FCM token if it can be generated.\n   * The return promise will reject if the browser doesn't support\n   * FCM, if permission is denied for notifications or it's not\n   * possible to generate a token.\n   * @export\n   * @return {Promise<string> | Promise<null>} Returns a promise the\n   * resolves to an FCM token or null if permission isn't granted.\n   */\n  WindowController.prototype.getToken = function () {\n    var _this = this;\n    // Check that the required API's are available\n    if (!this.isSupported_()) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.UNSUPPORTED_BROWSER));\n    }\n    return this.manifestCheck_().then(function () {\n      return _super.prototype.getToken.call(_this);\n    });\n  };\n  /**\n   * The method checks that a manifest is defined and has the correct GCM\n   * sender ID.\n   * @private\n   * @return {Promise} Returns a promise that resolves if the manifest matches\n   * our required sender ID\n   */\n  WindowController.prototype.manifestCheck_ = function () {\n    var _this = this;\n    if (this.manifestCheckPromise_) {\n      return this.manifestCheckPromise_;\n    }\n    var manifestTag = document.querySelector('link[rel=\"manifest\"]');\n    if (!manifestTag) {\n      this.manifestCheckPromise_ = Promise.resolve();\n    } else {\n      this.manifestCheckPromise_ = fetch(manifestTag.href).then(function (response) {\n        return response.json();\n      }).catch(function () {\n        // If the download or parsing fails allow check.\n        // We only want to error if we KNOW that the gcm_sender_id is incorrect.\n        return Promise.resolve();\n      }).then(function (manifestContent) {\n        if (!manifestContent) {\n          return;\n        }\n        if (!manifestContent['gcm_sender_id']) {\n          return;\n        }\n        if (manifestContent['gcm_sender_id'] !== '103953800507') {\n          throw _this.errorFactory_.create(Errors.codes.INCORRECT_GCM_SENDER_ID);\n        }\n      });\n    }\n    return this.manifestCheckPromise_;\n  };\n  /**\n   * Request permission if it is not currently granted\n   * @export\n   * @returns {Promise} Resolves if the permission was granted, otherwise\n   * rejects\n   */\n  WindowController.prototype.requestPermission = function () {\n    var _this = this;\n    if (Notification.permission === NOTIFICATION_PERMISSION.granted) {\n      return Promise.resolve();\n    }\n    return new Promise(function (resolve, reject) {\n      var managePermissionResult = function managePermissionResult(result) {\n        if (result === NOTIFICATION_PERMISSION.granted) {\n          return resolve();\n        } else if (result === NOTIFICATION_PERMISSION.denied) {\n          return reject(_this.errorFactory_.create(Errors.codes.PERMISSION_BLOCKED));\n        } else {\n          return reject(_this.errorFactory_.create(Errors.codes.PERMISSION_DEFAULT));\n        }\n      };\n      // The Notification.requestPermission API was changed to\n      // return a promise so now have to handle both in case\n      // browsers stop support callbacks for promised version\n      var permissionPromise = Notification.requestPermission(function (result) {\n        if (permissionPromise) {\n          // Let the promise manage this\n          return;\n        }\n        managePermissionResult(result);\n      });\n      if (permissionPromise) {\n        // Prefer the promise version as it's the future API.\n        permissionPromise.then(managePermissionResult);\n      }\n    });\n  };\n  /**\n   * This method allows a developer to override the default service worker and\n   * instead use a custom service worker.\n   * @export\n   * @param {!ServiceWorkerRegistration} registration The service worker\n   * registration that should be used to receive the push messages.\n   */\n  WindowController.prototype.useServiceWorker = function (registration) {\n    if (!(registration instanceof ServiceWorkerRegistration)) {\n      throw this.errorFactory_.create(Errors.codes.SW_REGISTRATION_EXPECTED);\n    }\n    if (typeof this.registrationToUse_ !== 'undefined') {\n      throw this.errorFactory_.create(Errors.codes.USE_SW_BEFORE_GET_TOKEN);\n    }\n    this.registrationToUse_ = registration;\n  };\n  /**\n   * @export\n   * @param {!firebase.Observer|function(*)} nextOrObserver An observer object\n   * or a function triggered on message.\n   * @param {function(!Error)=} optError Optional A function triggered on\n   * message error.\n   * @param {function()=} optCompleted Optional function triggered when the\n   * observer is removed.\n   * @return {!function()} The unsubscribe function for the observer.\n   */\n  WindowController.prototype.onMessage = function (nextOrObserver, optError, optCompleted) {\n    return this.onMessage_(nextOrObserver, optError, optCompleted);\n  };\n  /**\n   * @export\n   * @param {!firebase.Observer|function()} nextOrObserver An observer object\n   * or a function triggered on token refresh.\n   * @param {function(!Error)=} optError Optional A function\n   * triggered on token refresh error.\n   * @param {function()=} optCompleted Optional function triggered when the\n   * observer is removed.\n   * @return {!function()} The unsubscribe function for the observer.\n   */\n  WindowController.prototype.onTokenRefresh = function (nextOrObserver, optError, optCompleted) {\n    return this.onTokenRefresh_(nextOrObserver, optError, optCompleted);\n  };\n  /**\n   * Given a registration, wait for the service worker it relates to\n   * become activer\n   * @private\n   * @param  {ServiceWorkerRegistration} registration Registration to wait\n   * for service worker to become active\n   * @return {Promise<!ServiceWorkerRegistration>} Wait for service worker\n   * registration to become active\n   */\n  WindowController.prototype.waitForRegistrationToActivate_ = function (registration) {\n    var _this = this;\n    var serviceWorker = registration.installing || registration.waiting || registration.active;\n    return new Promise(function (resolve, reject) {\n      if (!serviceWorker) {\n        // This is a rare scenario but has occured in firefox\n        reject(_this.errorFactory_.create(Errors.codes.NO_SW_IN_REG));\n        return;\n      }\n      // Because the Promise function is called on next tick there is a\n      // small chance that the worker became active or redundant already.\n      if (serviceWorker.state === 'activated') {\n        resolve(registration);\n        return;\n      }\n      if (serviceWorker.state === 'redundant') {\n        reject(_this.errorFactory_.create(Errors.codes.SW_REG_REDUNDANT));\n        return;\n      }\n      var stateChangeListener = function stateChangeListener() {\n        if (serviceWorker.state === 'activated') {\n          resolve(registration);\n        } else if (serviceWorker.state === 'redundant') {\n          reject(_this.errorFactory_.create(Errors.codes.SW_REG_REDUNDANT));\n        } else {\n          // Return early and wait to next state change\n          return;\n        }\n        serviceWorker.removeEventListener('statechange', stateChangeListener);\n      };\n      serviceWorker.addEventListener('statechange', stateChangeListener);\n    });\n  };\n  /**\n   * This will regiater the default service worker and return the registration\n   * @private\n   * @return {Promise<!ServiceWorkerRegistration>} The service worker\n   * registration to be used for the push service.\n   */\n  WindowController.prototype.getSWRegistration_ = function () {\n    var _this = this;\n    if (this.registrationToUse_) {\n      return this.waitForRegistrationToActivate_(this.registrationToUse_);\n    }\n    // Make the registration null so we know useServiceWorker will not\n    // use a new service worker as registrationToUse_ is no longer undefined\n    this.registrationToUse_ = null;\n    return navigator.serviceWorker.register(DefaultSW.path, {\n      scope: DefaultSW.scope\n    }).catch(function (err) {\n      throw _this.errorFactory_.create(Errors.codes.FAILED_DEFAULT_REGISTRATION, {\n        browserErrorMessage: err.message\n      });\n    }).then(function (registration) {\n      return _this.waitForRegistrationToActivate_(registration).then(function () {\n        _this.registrationToUse_ = registration;\n        // We update after activation due to an issue with Firefox v49 where\n        // a race condition occassionally causes the service work to not\n        // install\n        registration.update();\n        return registration;\n      });\n    });\n  };\n  /**\n   * This method will set up a message listener to handle\n   * events from the service worker that should trigger\n   * events in the page.\n   *\n   * @private\n   */\n  WindowController.prototype.setupSWMessageListener_ = function () {\n    var _this = this;\n    if (!('serviceWorker' in navigator)) {\n      return;\n    }\n    navigator.serviceWorker.addEventListener('message', function (event) {\n      if (!event.data || !event.data[WorkerPageMessage.PARAMS.TYPE_OF_MSG]) {\n        // Not a message from FCM\n        return;\n      }\n      var workerPageMessage = event.data;\n      switch (workerPageMessage[WorkerPageMessage.PARAMS.TYPE_OF_MSG]) {\n        case WorkerPageMessage.TYPES_OF_MSG.PUSH_MSG_RECEIVED:\n        case WorkerPageMessage.TYPES_OF_MSG.NOTIFICATION_CLICKED:\n          var pushMessage = workerPageMessage[WorkerPageMessage.PARAMS.DATA];\n          _this.messageObserver_.next(pushMessage);\n          break;\n        default:\n          // Noop.\n          break;\n      }\n    }, false);\n  };\n  /**\n   * Checks to see if the required API's are valid or not.\n   * @private\n   * @return {boolean} Returns true if the desired APIs are available.\n   */\n  WindowController.prototype.isSupported_ = function () {\n    return 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window && 'fetch' in window && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n  };\n  return WindowController;\n}(ControllerInterface);\nexport default WindowController;","map":{"version":3,"mappings":"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","names":["ControllerInterface","Errors","WorkerPageMessage","DefaultSW","NOTIFICATION_PERMISSION","createSubscribe","__extends","app","_super","_this","registrationToUse_","manifestCheckPromise_","messageObserver_","onMessage_","observer","tokenRefreshObserver_","onTokenRefresh_","setupSWMessageListener_","WindowController","isSupported_","Promise","reject","errorFactory_","create","codes","UNSUPPORTED_BROWSER","manifestCheck_","then","getToken","manifestTag","document","querySelector","resolve","fetch","href","response","json","catch","manifestContent","INCORRECT_GCM_SENDER_ID","Notification","permission","granted","managePermissionResult","result","denied","PERMISSION_BLOCKED","PERMISSION_DEFAULT","permissionPromise","requestPermission","registration","ServiceWorkerRegistration","SW_REGISTRATION_EXPECTED","USE_SW_BEFORE_GET_TOKEN","nextOrObserver","optError","optCompleted","serviceWorker","installing","waiting","active","NO_SW_IN_REG","state","SW_REG_REDUNDANT","stateChangeListener","removeEventListener","addEventListener","waitForRegistrationToActivate_","navigator","register","path","scope","FAILED_DEFAULT_REGISTRATION","browserErrorMessage","err","message","update","event","data","PARAMS","TYPE_OF_MSG","workerPageMessage","TYPES_OF_MSG","PUSH_MSG_RECEIVED","NOTIFICATION_CLICKED","pushMessage","DATA","next","window","prototype","hasOwnProperty","PushSubscription"],"sources":["../src/controllers/window-controller.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nimport ControllerInterface from './controller-interface';\nimport Errors from '../models/errors';\nimport WorkerPageMessage from '../models/worker-page-message';\nimport DefaultSW from '../models/default-sw';\nimport NOTIFICATION_PERMISSION from '../models/notification-permission';\nimport { createSubscribe } from '@firebase/util';\n\ndeclare const firebase: any;\n\nexport default class WindowController extends ControllerInterface {\n  private registrationToUse_;\n  private manifestCheckPromise_;\n  private messageObserver_;\n  private onMessage_;\n  private tokenRefreshObserver_;\n  private onTokenRefresh_;\n\n  /**\n   * A service that provides a MessagingService instance.\n   * @param {!firebase.app.App} app\n   */\n  constructor(app) {\n    super(app);\n\n    /**\n     * @private\n     * @type {ServiceWorkerRegistration}\n     */\n    this.registrationToUse_;\n\n    /**\n     * @private\n     * @type {Promise}\n     */\n    this.manifestCheckPromise_;\n\n    /**\n     * @private\n     * @type {firebase.Observer}\n     */\n    this.messageObserver_ = null;\n    /**\n     * @private {!firebase.Subscribe} The subscribe function to the onMessage\n     * observer.\n     */\n    this.onMessage_ = createSubscribe(observer => {\n      this.messageObserver_ = observer;\n    });\n\n    /**\n     * @private\n     * @type {firebase.Observer}\n     */\n    this.tokenRefreshObserver_ = null;\n    this.onTokenRefresh_ = createSubscribe(observer => {\n      this.tokenRefreshObserver_ = observer;\n    });\n\n    this.setupSWMessageListener_();\n  }\n\n  /**\n   * This method returns an FCM token if it can be generated.\n   * The return promise will reject if the browser doesn't support\n   * FCM, if permission is denied for notifications or it's not\n   * possible to generate a token.\n   * @export\n   * @return {Promise<string> | Promise<null>} Returns a promise the\n   * resolves to an FCM token or null if permission isn't granted.\n   */\n  getToken() {\n    // Check that the required API's are available\n    if (!this.isSupported_()) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.UNSUPPORTED_BROWSER)\n      );\n    }\n\n    return this.manifestCheck_().then(() => {\n      return super.getToken();\n    });\n  }\n\n  /**\n   * The method checks that a manifest is defined and has the correct GCM\n   * sender ID.\n   * @private\n   * @return {Promise} Returns a promise that resolves if the manifest matches\n   * our required sender ID\n   */\n  manifestCheck_() {\n    if (this.manifestCheckPromise_) {\n      return this.manifestCheckPromise_;\n    }\n\n    const manifestTag = <HTMLAnchorElement>document.querySelector(\n      'link[rel=\"manifest\"]'\n    );\n    if (!manifestTag) {\n      this.manifestCheckPromise_ = Promise.resolve();\n    } else {\n      this.manifestCheckPromise_ = fetch(manifestTag.href)\n        .then(response => {\n          return response.json();\n        })\n        .catch(() => {\n          // If the download or parsing fails allow check.\n          // We only want to error if we KNOW that the gcm_sender_id is incorrect.\n          return Promise.resolve();\n        })\n        .then(manifestContent => {\n          if (!manifestContent) {\n            return;\n          }\n\n          if (!manifestContent['gcm_sender_id']) {\n            return;\n          }\n\n          if (manifestContent['gcm_sender_id'] !== '103953800507') {\n            throw this.errorFactory_.create(\n              Errors.codes.INCORRECT_GCM_SENDER_ID\n            );\n          }\n        });\n    }\n\n    return this.manifestCheckPromise_;\n  }\n\n  /**\n   * Request permission if it is not currently granted\n   * @export\n   * @returns {Promise} Resolves if the permission was granted, otherwise\n   * rejects\n   */\n  requestPermission() {\n    if ((Notification as any).permission === NOTIFICATION_PERMISSION.granted) {\n      return Promise.resolve();\n    }\n\n    return new Promise((resolve, reject) => {\n      const managePermissionResult = result => {\n        if (result === NOTIFICATION_PERMISSION.granted) {\n          return resolve();\n        } else if (result === NOTIFICATION_PERMISSION.denied) {\n          return reject(\n            this.errorFactory_.create(Errors.codes.PERMISSION_BLOCKED)\n          );\n        } else {\n          return reject(\n            this.errorFactory_.create(Errors.codes.PERMISSION_DEFAULT)\n          );\n        }\n      };\n\n      // The Notification.requestPermission API was changed to\n      // return a promise so now have to handle both in case\n      // browsers stop support callbacks for promised version\n      const permissionPromise = Notification.requestPermission(result => {\n        if (permissionPromise) {\n          // Let the promise manage this\n          return;\n        }\n\n        managePermissionResult(result);\n      });\n\n      if (permissionPromise) {\n        // Prefer the promise version as it's the future API.\n        permissionPromise.then(managePermissionResult);\n      }\n    });\n  }\n\n  /**\n   * This method allows a developer to override the default service worker and\n   * instead use a custom service worker.\n   * @export\n   * @param {!ServiceWorkerRegistration} registration The service worker\n   * registration that should be used to receive the push messages.\n   */\n  useServiceWorker(registration) {\n    if (!(registration instanceof ServiceWorkerRegistration)) {\n      throw this.errorFactory_.create(Errors.codes.SW_REGISTRATION_EXPECTED);\n    }\n\n    if (typeof this.registrationToUse_ !== 'undefined') {\n      throw this.errorFactory_.create(Errors.codes.USE_SW_BEFORE_GET_TOKEN);\n    }\n\n    this.registrationToUse_ = registration;\n  }\n\n  /**\n   * @export\n   * @param {!firebase.Observer|function(*)} nextOrObserver An observer object\n   * or a function triggered on message.\n   * @param {function(!Error)=} optError Optional A function triggered on\n   * message error.\n   * @param {function()=} optCompleted Optional function triggered when the\n   * observer is removed.\n   * @return {!function()} The unsubscribe function for the observer.\n   */\n  onMessage(nextOrObserver, optError, optCompleted) {\n    return this.onMessage_(nextOrObserver, optError, optCompleted);\n  }\n\n  /**\n   * @export\n   * @param {!firebase.Observer|function()} nextOrObserver An observer object\n   * or a function triggered on token refresh.\n   * @param {function(!Error)=} optError Optional A function\n   * triggered on token refresh error.\n   * @param {function()=} optCompleted Optional function triggered when the\n   * observer is removed.\n   * @return {!function()} The unsubscribe function for the observer.\n   */\n  onTokenRefresh(nextOrObserver, optError, optCompleted) {\n    return this.onTokenRefresh_(nextOrObserver, optError, optCompleted);\n  }\n\n  /**\n   * Given a registration, wait for the service worker it relates to\n   * become activer\n   * @private\n   * @param  {ServiceWorkerRegistration} registration Registration to wait\n   * for service worker to become active\n   * @return {Promise<!ServiceWorkerRegistration>} Wait for service worker\n   * registration to become active\n   */\n  waitForRegistrationToActivate_(registration) {\n    const serviceWorker =\n      registration.installing || registration.waiting || registration.active;\n\n    return new Promise<ServiceWorkerRegistration>((resolve, reject) => {\n      if (!serviceWorker) {\n        // This is a rare scenario but has occured in firefox\n        reject(this.errorFactory_.create(Errors.codes.NO_SW_IN_REG));\n        return;\n      }\n      // Because the Promise function is called on next tick there is a\n      // small chance that the worker became active or redundant already.\n      if (serviceWorker.state === 'activated') {\n        resolve(registration);\n        return;\n      }\n\n      if (serviceWorker.state === 'redundant') {\n        reject(this.errorFactory_.create(Errors.codes.SW_REG_REDUNDANT));\n        return;\n      }\n\n      let stateChangeListener = () => {\n        if (serviceWorker.state === 'activated') {\n          resolve(registration);\n        } else if (serviceWorker.state === 'redundant') {\n          reject(this.errorFactory_.create(Errors.codes.SW_REG_REDUNDANT));\n        } else {\n          // Return early and wait to next state change\n          return;\n        }\n        serviceWorker.removeEventListener('statechange', stateChangeListener);\n      };\n      serviceWorker.addEventListener('statechange', stateChangeListener);\n    });\n  }\n\n  /**\n   * This will regiater the default service worker and return the registration\n   * @private\n   * @return {Promise<!ServiceWorkerRegistration>} The service worker\n   * registration to be used for the push service.\n   */\n  getSWRegistration_() {\n    if (this.registrationToUse_) {\n      return this.waitForRegistrationToActivate_(this.registrationToUse_);\n    }\n\n    // Make the registration null so we know useServiceWorker will not\n    // use a new service worker as registrationToUse_ is no longer undefined\n    this.registrationToUse_ = null;\n\n    return navigator.serviceWorker\n      .register(DefaultSW.path, {\n        scope: DefaultSW.scope\n      })\n      .catch(err => {\n        throw this.errorFactory_.create(\n          Errors.codes.FAILED_DEFAULT_REGISTRATION,\n          {\n            browserErrorMessage: err.message\n          }\n        );\n      })\n      .then(registration => {\n        return this.waitForRegistrationToActivate_(registration).then(() => {\n          this.registrationToUse_ = registration;\n\n          // We update after activation due to an issue with Firefox v49 where\n          // a race condition occassionally causes the service work to not\n          // install\n          registration.update();\n\n          return registration;\n        });\n      });\n  }\n\n  /**\n   * This method will set up a message listener to handle\n   * events from the service worker that should trigger\n   * events in the page.\n   *\n   * @private\n   */\n  setupSWMessageListener_() {\n    if (!('serviceWorker' in navigator)) {\n      return;\n    }\n\n    navigator.serviceWorker.addEventListener(\n      'message',\n      event => {\n        if (!event.data || !event.data[WorkerPageMessage.PARAMS.TYPE_OF_MSG]) {\n          // Not a message from FCM\n          return;\n        }\n\n        const workerPageMessage = event.data;\n        switch (workerPageMessage[WorkerPageMessage.PARAMS.TYPE_OF_MSG]) {\n          case WorkerPageMessage.TYPES_OF_MSG.PUSH_MSG_RECEIVED:\n          case WorkerPageMessage.TYPES_OF_MSG.NOTIFICATION_CLICKED:\n            const pushMessage =\n              workerPageMessage[WorkerPageMessage.PARAMS.DATA];\n            this.messageObserver_.next(pushMessage);\n            break;\n          default:\n            // Noop.\n            break;\n        }\n      },\n      false\n    );\n  }\n\n  /**\n   * Checks to see if the required API's are valid or not.\n   * @private\n   * @return {boolean} Returns true if the desired APIs are available.\n   */\n  isSupported_() {\n    return (\n      'serviceWorker' in navigator &&\n      'PushManager' in window &&\n      'Notification' in window &&\n      'fetch' in window &&\n      ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n      PushSubscription.prototype.hasOwnProperty('getKey')\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}