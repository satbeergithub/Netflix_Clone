{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines the Firebase Storage Reference class.\n */\nimport * as args from './implementation/args';\nimport { FbsBlob } from './implementation/blob';\nimport * as errorsExports from './implementation/error';\nimport { Location } from './implementation/location';\nimport * as metadata from './implementation/metadata';\nimport * as object from './implementation/object';\nimport * as path from './implementation/path';\nimport * as requests from './implementation/requests';\nimport * as fbsString from './implementation/string';\nimport { StringFormat } from './implementation/string';\nimport * as type from './implementation/type';\nimport { UploadTask } from './task';\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @param location An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nvar Reference = /** @class */function () {\n  function Reference(authWrapper, location) {\n    this.authWrapper = authWrapper;\n    if (location instanceof Location) {\n      this.location = location;\n    } else {\n      this.location = Location.makeFromUrl(location);\n    }\n  }\n  /**\n   * @return The URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  Reference.prototype.toString = function () {\n    args.validate('toString', [], arguments);\n    return 'gs://' + this.location.bucket + '/' + this.location.path;\n  };\n  Reference.prototype.newRef = function (authWrapper, location) {\n    return new Reference(authWrapper, location);\n  };\n  Reference.prototype.mappings = function () {\n    return metadata.getMappings();\n  };\n  /**\n   * @return A reference to the object obtained by\n   *     appending childPath, removing any duplicate, beginning, or trailing\n   *     slashes.\n   */\n  Reference.prototype.child = function (childPath) {\n    args.validate('child', [args.stringSpec()], arguments);\n    var newPath = path.child(this.location.path, childPath);\n    var location = new Location(this.location.bucket, newPath);\n    return this.newRef(this.authWrapper, location);\n  };\n  Object.defineProperty(Reference.prototype, \"parent\", {\n    /**\n     * @return A reference to the parent of the\n     *     current object, or null if the current object is the root.\n     */\n    get: function get() {\n      var newPath = path.parent(this.location.path);\n      if (newPath === null) {\n        return null;\n      }\n      var location = new Location(this.location.bucket, newPath);\n      return this.newRef(this.authWrapper, location);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"root\", {\n    /**\n     * @return An reference to the root of this\n     *     object's bucket.\n     */\n    get: function get() {\n      var location = new Location(this.location.bucket, '');\n      return this.newRef(this.authWrapper, location);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"bucket\", {\n    get: function get() {\n      return this.location.bucket;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"fullPath\", {\n    get: function get() {\n      return this.location.path;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"name\", {\n    get: function get() {\n      return path.lastComponent(this.location.path);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"storage\", {\n    get: function get() {\n      return this.authWrapper.service();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Uploads a blob to this object's location.\n   * @param data The blob to upload.\n   * @return An UploadTask that lets you control and\n   *     observe the upload.\n   */\n  Reference.prototype.put = function (data, metadata) {\n    if (metadata === void 0) {\n      metadata = null;\n    }\n    args.validate('put', [args.uploadDataSpec(), args.metadataSpec(true)], arguments);\n    this.throwIfRoot_('put');\n    return new UploadTask(this, this.authWrapper, this.location, this.mappings(), new FbsBlob(data), metadata);\n  };\n  /**\n   * Uploads a string to this object's location.\n   * @param string The string to upload.\n   * @param opt_format The format of the string to upload.\n   * @return An UploadTask that lets you control and\n   *     observe the upload.\n   */\n  Reference.prototype.putString = function (string, format, opt_metadata) {\n    if (format === void 0) {\n      format = StringFormat.RAW;\n    }\n    args.validate('putString', [args.stringSpec(), args.stringSpec(fbsString.formatValidator, true), args.metadataSpec(true)], arguments);\n    this.throwIfRoot_('putString');\n    var data = fbsString.dataFromString(format, string);\n    var metadata = object.clone(opt_metadata);\n    if (!type.isDef(metadata['contentType']) && type.isDef(data.contentType)) {\n      metadata['contentType'] = data.contentType;\n    }\n    return new UploadTask(this, this.authWrapper, this.location, this.mappings(), new FbsBlob(data.data, true), metadata);\n  };\n  /**\n   * Deletes the object at this location.\n   * @return A promise that resolves if the deletion succeeds.\n   */\n  Reference.prototype.delete = function () {\n    args.validate('delete', [], arguments);\n    this.throwIfRoot_('delete');\n    var self = this;\n    return this.authWrapper.getAuthToken().then(function (authToken) {\n      var requestInfo = requests.deleteObject(self.authWrapper, self.location);\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  };\n  /**\n   *     A promise that resolves with the metadata for this object. If this\n   *     object doesn't exist or metadata cannot be retreived, the promise is\n   *     rejected.\n   */\n  Reference.prototype.getMetadata = function () {\n    args.validate('getMetadata', [], arguments);\n    this.throwIfRoot_('getMetadata');\n    var self = this;\n    return this.authWrapper.getAuthToken().then(function (authToken) {\n      var requestInfo = requests.getMetadata(self.authWrapper, self.location, self.mappings());\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  };\n  /**\n   * Updates the metadata for this object.\n   * @param metadata The new metadata for the object.\n   *     Only values that have been explicitly set will be changed. Explicitly\n   *     setting a value to null will remove the metadata.\n   * @return A promise that resolves\n   *     with the new metadata for this object.\n   *     @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  Reference.prototype.updateMetadata = function (metadata) {\n    args.validate('updateMetadata', [args.metadataSpec()], arguments);\n    this.throwIfRoot_('updateMetadata');\n    var self = this;\n    return this.authWrapper.getAuthToken().then(function (authToken) {\n      var requestInfo = requests.updateMetadata(self.authWrapper, self.location, metadata, self.mappings());\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  };\n  /**\n   * @return A promise that resolves with the download\n   *     URL for this object.\n   */\n  Reference.prototype.getDownloadURL = function () {\n    args.validate('getDownloadURL', [], arguments);\n    this.throwIfRoot_('getDownloadURL');\n    return this.getMetadata().then(function (metadata) {\n      var url = metadata['downloadURLs'][0];\n      if (type.isDef(url)) {\n        return url;\n      } else {\n        throw errorsExports.noDownloadURL();\n      }\n    });\n  };\n  Reference.prototype.throwIfRoot_ = function (name) {\n    if (this.location.path === '') {\n      throw errorsExports.invalidRootOperation(name);\n    }\n  };\n  return Reference;\n}();\nexport { Reference };","map":{"version":3,"mappings":"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","names":["args","FbsBlob","errorsExports","Location","metadata","object","path","requests","fbsString","StringFormat","type","UploadTask","authWrapper","location","makeFromUrl","Reference","validate","arguments","bucket","getMappings","childPath","stringSpec","newPath","child","newRef","Object","parent","lastComponent","service","data","uploadDataSpec","metadataSpec","throwIfRoot_","mappings","string","format","opt_metadata","RAW","formatValidator","dataFromString","clone","isDef","contentType","self","getAuthToken","then","authToken","requestInfo","deleteObject","makeRequest","getPromise","getMetadata","updateMetadata","url","noDownloadURL","name","invalidRootOperation"],"sources":["../src/reference.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase Storage Reference class.\n */\nimport * as args from './implementation/args';\nimport { AuthWrapper } from './implementation/authwrapper';\nimport { FbsBlob } from './implementation/blob';\nimport * as errorsExports from './implementation/error';\nimport { errors } from './implementation/error';\nimport { Location } from './implementation/location';\nimport * as metadata from './implementation/metadata';\nimport * as object from './implementation/object';\nimport * as path from './implementation/path';\nimport * as requests from './implementation/requests';\nimport * as fbsString from './implementation/string';\nimport { StringFormat } from './implementation/string';\nimport * as type from './implementation/type';\nimport { Metadata } from './metadata';\nimport { Service } from './service';\nimport { UploadTask } from './task';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @param location An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  protected location: Location;\n\n  constructor(protected authWrapper: AuthWrapper, location: string | Location) {\n    if (location instanceof Location) {\n      this.location = location;\n    } else {\n      this.location = Location.makeFromUrl(location);\n    }\n  }\n\n  /**\n   * @return The URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    args.validate('toString', [], arguments);\n    return 'gs://' + this.location.bucket + '/' + this.location.path;\n  }\n\n  protected newRef(authWrapper: AuthWrapper, location: Location): Reference {\n    return new Reference(authWrapper, location);\n  }\n\n  protected mappings(): metadata.Mappings {\n    return metadata.getMappings();\n  }\n\n  /**\n   * @return A reference to the object obtained by\n   *     appending childPath, removing any duplicate, beginning, or trailing\n   *     slashes.\n   */\n  child(childPath: string): Reference {\n    args.validate('child', [args.stringSpec()], arguments);\n    let newPath = path.child(this.location.path, childPath);\n    let location = new Location(this.location.bucket, newPath);\n    return this.newRef(this.authWrapper, location);\n  }\n\n  /**\n   * @return A reference to the parent of the\n   *     current object, or null if the current object is the root.\n   */\n  get parent(): Reference | null {\n    let newPath = path.parent(this.location.path);\n    if (newPath === null) {\n      return null;\n    }\n    let location = new Location(this.location.bucket, newPath);\n    return this.newRef(this.authWrapper, location);\n  }\n\n  /**\n   * @return An reference to the root of this\n   *     object's bucket.\n   */\n  get root(): Reference {\n    let location = new Location(this.location.bucket, '');\n    return this.newRef(this.authWrapper, location);\n  }\n\n  get bucket(): string {\n    return this.location.bucket;\n  }\n\n  get fullPath(): string {\n    return this.location.path;\n  }\n\n  get name(): string {\n    return path.lastComponent(this.location.path);\n  }\n\n  get storage(): Service {\n    return this.authWrapper.service();\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data The blob to upload.\n   * @return An UploadTask that lets you control and\n   *     observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata: Metadata | null = null\n  ): UploadTask {\n    args.validate(\n      'put',\n      [args.uploadDataSpec(), args.metadataSpec(true)],\n      arguments\n    );\n    this.throwIfRoot_('put');\n    return new UploadTask(\n      this,\n      this.authWrapper,\n      this.location,\n      this.mappings(),\n      new FbsBlob(data),\n      metadata\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param string The string to upload.\n   * @param opt_format The format of the string to upload.\n   * @return An UploadTask that lets you control and\n   *     observe the upload.\n   */\n  putString(\n    string: string,\n    format: StringFormat = StringFormat.RAW,\n    opt_metadata?: Metadata\n  ): UploadTask {\n    args.validate(\n      'putString',\n      [\n        args.stringSpec(),\n        args.stringSpec(fbsString.formatValidator, true),\n        args.metadataSpec(true)\n      ],\n      arguments\n    );\n    this.throwIfRoot_('putString');\n    let data = fbsString.dataFromString(format, string);\n    let metadata = object.clone<Metadata>(opt_metadata);\n    if (!type.isDef(metadata['contentType']) && type.isDef(data.contentType)) {\n      metadata['contentType'] = data.contentType;\n    }\n    return new UploadTask(\n      this,\n      this.authWrapper,\n      this.location,\n      this.mappings(),\n      new FbsBlob(data.data, true),\n      metadata\n    );\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @return A promise that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    args.validate('delete', [], arguments);\n    this.throwIfRoot_('delete');\n    let self = this;\n    return this.authWrapper.getAuthToken().then(function(authToken) {\n      let requestInfo = requests.deleteObject(self.authWrapper, self.location);\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  }\n\n  /**\n   *     A promise that resolves with the metadata for this object. If this\n   *     object doesn't exist or metadata cannot be retreived, the promise is\n   *     rejected.\n   */\n  getMetadata(): Promise<Metadata> {\n    args.validate('getMetadata', [], arguments);\n    this.throwIfRoot_('getMetadata');\n    let self = this;\n    return this.authWrapper.getAuthToken().then(function(authToken) {\n      let requestInfo = requests.getMetadata(\n        self.authWrapper,\n        self.location,\n        self.mappings()\n      );\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata The new metadata for the object.\n   *     Only values that have been explicitly set will be changed. Explicitly\n   *     setting a value to null will remove the metadata.\n   * @return A promise that resolves\n   *     with the new metadata for this object.\n   *     @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(metadata: Metadata): Promise<Metadata> {\n    args.validate('updateMetadata', [args.metadataSpec()], arguments);\n    this.throwIfRoot_('updateMetadata');\n    let self = this;\n    return this.authWrapper.getAuthToken().then(function(authToken) {\n      let requestInfo = requests.updateMetadata(\n        self.authWrapper,\n        self.location,\n        metadata,\n        self.mappings()\n      );\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  }\n\n  /**\n   * @return A promise that resolves with the download\n   *     URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    args.validate('getDownloadURL', [], arguments);\n    this.throwIfRoot_('getDownloadURL');\n    return this.getMetadata().then(function(metadata) {\n      let url = (metadata['downloadURLs'] as string[])[0];\n      if (type.isDef(url)) {\n        return url;\n      } else {\n        throw errorsExports.noDownloadURL();\n      }\n    });\n  }\n\n  private throwIfRoot_(name: string) {\n    if (this.location.path === '') {\n      throw errorsExports.invalidRootOperation(name);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}