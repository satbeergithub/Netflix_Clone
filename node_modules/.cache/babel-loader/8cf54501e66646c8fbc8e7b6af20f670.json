{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar util_1 = require(\"@firebase/util\");\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n *\n * @constructor\n */\nvar MemoryStorage = /** @class */function () {\n  function MemoryStorage() {\n    this.cache_ = {};\n    this.isInMemoryStorage = true;\n  }\n  MemoryStorage.prototype.set = function (key, value) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  };\n  MemoryStorage.prototype.get = function (key) {\n    if (util_1.contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  };\n  MemoryStorage.prototype.remove = function (key) {\n    delete this.cache_[key];\n  };\n  return MemoryStorage;\n}();\nexports.MemoryStorage = MemoryStorage;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAgBA;AAEA;;;;;;AAMA;EAAA;IACU,WAAM,GAAyB,EAAE;IAqBzC,sBAAiB,GAAG,IAAI;EAC1B;EApBEA,2BAAG,GAAH,UAAIC,GAAW,EAAEC,KAAiB;IAChC,IAAIA,KAAK,IAAI,IAAI,EAAE;MACjB,OAAO,IAAI,CAACC,MAAM,CAACF,GAAG,CAAC;IACzB,CAAC,MAAM;MACL,IAAI,CAACE,MAAM,CAACF,GAAG,CAAC,GAAGC,KAAK;IAC1B;EACF,CAAC;EAEDF,2BAAG,GAAH,UAAIC,GAAW;IACb,IAAIG,eAAQ,CAAC,IAAI,CAACD,MAAM,EAAEF,GAAG,CAAC,EAAE;MAC9B,OAAO,IAAI,CAACE,MAAM,CAACF,GAAG,CAAC;IACzB;IACA,OAAO,IAAI;EACb,CAAC;EAEDD,8BAAM,GAAN,UAAOC,GAAW;IAChB,OAAO,IAAI,CAACE,MAAM,CAACF,GAAG,CAAC;EACzB,CAAC;EAGH,oBAAC;AAAD,CAvBA,EAuBC;AAvBYI","names":["MemoryStorage","key","value","cache_","util_1","exports"],"sources":["../src/core/storage/MemoryStorage.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n *\n * @constructor\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: any } = {};\n\n  set(key: string, value: any | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): any {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n"]},"metadata":{},"sourceType":"script"}